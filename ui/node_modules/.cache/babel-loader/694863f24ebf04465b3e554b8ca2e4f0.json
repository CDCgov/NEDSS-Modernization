{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$(),\n    _s21 = $RefreshSig$(),\n    _s22 = $RefreshSig$(),\n    _s23 = $RefreshSig$(),\n    _s24 = $RefreshSig$(),\n    _s25 = $RefreshSig$(),\n    _s26 = $RefreshSig$(),\n    _s27 = $RefreshSig$(),\n    _s28 = $RefreshSig$(),\n    _s29 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport let CaseStatus;\n\n(function (CaseStatus) {\n  CaseStatus[\"Confirmed\"] = \"CONFIRMED\";\n  CaseStatus[\"NotACase\"] = \"NOT_A_CASE\";\n  CaseStatus[\"Probable\"] = \"PROBABLE\";\n  CaseStatus[\"Suspect\"] = \"SUSPECT\";\n  CaseStatus[\"Unknown\"] = \"UNKNOWN\";\n})(CaseStatus || (CaseStatus = {}));\n\nexport let Deceased;\n\n(function (Deceased) {\n  Deceased[\"N\"] = \"N\";\n  Deceased[\"Unk\"] = \"UNK\";\n  Deceased[\"Y\"] = \"Y\";\n})(Deceased || (Deceased = {}));\n\nexport let EntryMethod;\n\n(function (EntryMethod) {\n  EntryMethod[\"Electronic\"] = \"ELECTRONIC\";\n  EntryMethod[\"Manual\"] = \"MANUAL\";\n})(EntryMethod || (EntryMethod = {}));\n\nexport let Ethnicity;\n\n(function (Ethnicity) {\n  Ethnicity[\"HispanicOrLatino\"] = \"HISPANIC_OR_LATINO\";\n  Ethnicity[\"NotHispanicOrLatino\"] = \"NOT_HISPANIC_OR_LATINO\";\n  Ethnicity[\"Unknown\"] = \"UNKNOWN\";\n})(Ethnicity || (Ethnicity = {}));\n\nexport let EventStatus;\n\n(function (EventStatus) {\n  EventStatus[\"New\"] = \"NEW\";\n  EventStatus[\"Update\"] = \"UPDATE\";\n})(EventStatus || (EventStatus = {}));\n\nexport let EventType;\n\n(function (EventType) {\n  EventType[\"Investigation\"] = \"INVESTIGATION\";\n  EventType[\"LaboratoryReport\"] = \"LABORATORY_REPORT\";\n})(EventType || (EventType = {}));\n\nexport let Gender;\n\n(function (Gender) {\n  Gender[\"F\"] = \"F\";\n  Gender[\"M\"] = \"M\";\n  Gender[\"U\"] = \"U\";\n})(Gender || (Gender = {}));\n\nexport let IdentificationType;\n\n(function (IdentificationType) {\n  IdentificationType[\"AccountNumber\"] = \"ACCOUNT_NUMBER\";\n  IdentificationType[\"AlternatePersonNumber\"] = \"ALTERNATE_PERSON_NUMBER\";\n  IdentificationType[\"ChipIdentificationNumber\"] = \"CHIP_IDENTIFICATION_NUMBER\";\n  IdentificationType[\"DriversLicenseNumber\"] = \"DRIVERS_LICENSE_NUMBER\";\n  IdentificationType[\"ImmunizationRegistryId\"] = \"IMMUNIZATION_REGISTRY_ID\";\n  IdentificationType[\"MedicaidNumber\"] = \"MEDICAID_NUMBER\";\n  IdentificationType[\"MedicalRecordNumber\"] = \"MEDICAL_RECORD_NUMBER\";\n  IdentificationType[\"MedicareNumber\"] = \"MEDICARE_NUMBER\";\n  IdentificationType[\"MothersIdentifier\"] = \"MOTHERS_IDENTIFIER\";\n  IdentificationType[\"NationalUniqueIndividualIdentifier\"] = \"NATIONAL_UNIQUE_INDIVIDUAL_IDENTIFIER\";\n  IdentificationType[\"Other\"] = \"OTHER\";\n  IdentificationType[\"PartnerServicesPatientNumber\"] = \"PARTNER_SERVICES_PATIENT_NUMBER\";\n  IdentificationType[\"PatientExternalIdentifier\"] = \"PATIENT_EXTERNAL_IDENTIFIER\";\n  IdentificationType[\"PatientInternalIdentifier\"] = \"PATIENT_INTERNAL_IDENTIFIER\";\n  IdentificationType[\"PersonNumber\"] = \"PERSON_NUMBER\";\n  IdentificationType[\"PrisonIdentificationNumber\"] = \"PRISON_IDENTIFICATION_NUMBER\";\n  IdentificationType[\"RyanWhiteIdentifier\"] = \"RYAN_WHITE_IDENTIFIER\";\n  IdentificationType[\"SocialSecurity\"] = \"SOCIAL_SECURITY\";\n  IdentificationType[\"VisaPassport\"] = \"VISA_PASSPORT\";\n  IdentificationType[\"WicIdentifier\"] = \"WIC_IDENTIFIER\";\n})(IdentificationType || (IdentificationType = {}));\n\nexport let InvestigationEventDateType;\n\n(function (InvestigationEventDateType) {\n  InvestigationEventDateType[\"DateOfReport\"] = \"DATE_OF_REPORT\";\n  InvestigationEventDateType[\"InvestigationClosedDate\"] = \"INVESTIGATION_CLOSED_DATE\";\n  InvestigationEventDateType[\"InvestigationCreateDate\"] = \"INVESTIGATION_CREATE_DATE\";\n  InvestigationEventDateType[\"InvestigationStartDate\"] = \"INVESTIGATION_START_DATE\";\n  InvestigationEventDateType[\"LastUpdateDate\"] = \"LAST_UPDATE_DATE\";\n  InvestigationEventDateType[\"NotificationCreateDate\"] = \"NOTIFICATION_CREATE_DATE\";\n})(InvestigationEventDateType || (InvestigationEventDateType = {}));\n\nexport let InvestigationEventIdType;\n\n(function (InvestigationEventIdType) {\n  InvestigationEventIdType[\"AbcsCaseId\"] = \"ABCS_CASE_ID\";\n  InvestigationEventIdType[\"CityCountyCaseId\"] = \"CITY_COUNTY_CASE_ID\";\n  InvestigationEventIdType[\"InvestigationId\"] = \"INVESTIGATION_ID\";\n  InvestigationEventIdType[\"NotificationId\"] = \"NOTIFICATION_ID\";\n  InvestigationEventIdType[\"StateCaseId\"] = \"STATE_CASE_ID\";\n})(InvestigationEventIdType || (InvestigationEventIdType = {}));\n\nexport let InvestigationStatus;\n\n(function (InvestigationStatus) {\n  InvestigationStatus[\"Closed\"] = \"CLOSED\";\n  InvestigationStatus[\"Open\"] = \"OPEN\";\n})(InvestigationStatus || (InvestigationStatus = {}));\n\nexport let LaboratoryEventIdType;\n\n(function (LaboratoryEventIdType) {\n  LaboratoryEventIdType[\"AccessionNumber\"] = \"ACCESSION_NUMBER\";\n  LaboratoryEventIdType[\"LabId\"] = \"LAB_ID\";\n})(LaboratoryEventIdType || (LaboratoryEventIdType = {}));\n\nexport let LaboratoryReportEventDateType;\n\n(function (LaboratoryReportEventDateType) {\n  LaboratoryReportEventDateType[\"DateOfReport\"] = \"DATE_OF_REPORT\";\n  LaboratoryReportEventDateType[\"DateOfSpecimenCollection\"] = \"DATE_OF_SPECIMEN_COLLECTION\";\n  LaboratoryReportEventDateType[\"DateReceivedByPublicHealth\"] = \"DATE_RECEIVED_BY_PUBLIC_HEALTH\";\n  LaboratoryReportEventDateType[\"LabReportCreateDate\"] = \"LAB_REPORT_CREATE_DATE\";\n  LaboratoryReportEventDateType[\"LastUpdateDate\"] = \"LAST_UPDATE_DATE\";\n})(LaboratoryReportEventDateType || (LaboratoryReportEventDateType = {}));\n\nexport let LaboratoryReportStatus;\n\n(function (LaboratoryReportStatus) {\n  LaboratoryReportStatus[\"Processed\"] = \"PROCESSED\";\n  LaboratoryReportStatus[\"Unprocessed\"] = \"UNPROCESSED\";\n})(LaboratoryReportStatus || (LaboratoryReportStatus = {}));\n\nexport let NotificationStatus;\n\n(function (NotificationStatus) {\n  NotificationStatus[\"Approved\"] = \"APPROVED\";\n  NotificationStatus[\"Completed\"] = \"COMPLETED\";\n  NotificationStatus[\"MessageFailed\"] = \"MESSAGE_FAILED\";\n  NotificationStatus[\"PendingApproval\"] = \"PENDING_APPROVAL\";\n  NotificationStatus[\"Rejected\"] = \"REJECTED\";\n})(NotificationStatus || (NotificationStatus = {}));\n\nexport let Operator;\n\n(function (Operator) {\n  Operator[\"After\"] = \"AFTER\";\n  Operator[\"Before\"] = \"BEFORE\";\n  Operator[\"Equal\"] = \"EQUAL\";\n})(Operator || (Operator = {}));\n\nexport let PhoneType;\n\n(function (PhoneType) {\n  PhoneType[\"Cell\"] = \"CELL\";\n  PhoneType[\"Home\"] = \"HOME\";\n  PhoneType[\"Work\"] = \"WORK\";\n})(PhoneType || (PhoneType = {}));\n\nexport let PregnancyStatus;\n\n(function (PregnancyStatus) {\n  PregnancyStatus[\"No\"] = \"NO\";\n  PregnancyStatus[\"Unknown\"] = \"UNKNOWN\";\n  PregnancyStatus[\"Yes\"] = \"YES\";\n})(PregnancyStatus || (PregnancyStatus = {}));\n\nexport let ProcessingStatus;\n\n(function (ProcessingStatus) {\n  ProcessingStatus[\"AwaitingInterview\"] = \"AWAITING_INTERVIEW\";\n  ProcessingStatus[\"ClosedCase\"] = \"CLOSED_CASE\";\n  ProcessingStatus[\"FieldFollowUp\"] = \"FIELD_FOLLOW_UP\";\n  ProcessingStatus[\"NoFollowUp\"] = \"NO_FOLLOW_UP\";\n  ProcessingStatus[\"OpenCase\"] = \"OPEN_CASE\";\n  ProcessingStatus[\"SurveillanceFollowUp\"] = \"SURVEILLANCE_FOLLOW_UP\";\n})(ProcessingStatus || (ProcessingStatus = {}));\n\nexport let ProviderType;\n\n(function (ProviderType) {\n  ProviderType[\"OrderingFacility\"] = \"ORDERING_FACILITY\";\n  ProviderType[\"OrderingProvider\"] = \"ORDERING_PROVIDER\";\n  ProviderType[\"ReportingFacility\"] = \"REPORTING_FACILITY\";\n})(ProviderType || (ProviderType = {}));\n\nexport let Race;\n\n(function (Race) {\n  Race[\"AfricanAmerican\"] = \"AFRICAN_AMERICAN\";\n  Race[\"AmericanIndianOrAlaskanNative\"] = \"AMERICAN_INDIAN_OR_ALASKAN_NATIVE\";\n  Race[\"Asian\"] = \"ASIAN\";\n  Race[\"NativeHawaiianOrPacificIslander\"] = \"NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER\";\n  Race[\"NotAsked\"] = \"NOT_ASKED\";\n  Race[\"OtherRace\"] = \"OTHER_RACE\";\n  Race[\"RefusedToAnswer\"] = \"REFUSED_TO_ANSWER\";\n  Race[\"Unknown\"] = \"UNKNOWN\";\n  Race[\"White\"] = \"WHITE\";\n})(Race || (Race = {}));\n\nexport let RecordStatus;\n\n(function (RecordStatus) {\n  RecordStatus[\"Active\"] = \"ACTIVE\";\n  RecordStatus[\"LogDel\"] = \"LOG_DEL\";\n})(RecordStatus || (RecordStatus = {}));\n\nexport let ReportingEntityType;\n\n(function (ReportingEntityType) {\n  ReportingEntityType[\"Facility\"] = \"FACILITY\";\n  ReportingEntityType[\"Provider\"] = \"PROVIDER\";\n})(ReportingEntityType || (ReportingEntityType = {}));\n\nexport let SortDirection;\n\n(function (SortDirection) {\n  SortDirection[\"Asc\"] = \"ASC\";\n  SortDirection[\"Desc\"] = \"DESC\";\n})(SortDirection || (SortDirection = {}));\n\nexport let Suffix;\n\n(function (Suffix) {\n  Suffix[\"Esq\"] = \"ESQ\";\n  Suffix[\"Ii\"] = \"II\";\n  Suffix[\"Iii\"] = \"III\";\n  Suffix[\"Iv\"] = \"IV\";\n  Suffix[\"Jr\"] = \"JR\";\n  Suffix[\"Sr\"] = \"SR\";\n  Suffix[\"V\"] = \"V\";\n})(Suffix || (Suffix = {}));\n\nexport let UserType;\n\n(function (UserType) {\n  UserType[\"External\"] = \"EXTERNAL\";\n  UserType[\"Internal\"] = \"INTERNAL\";\n})(UserType || (UserType = {}));\n\nexport const CreatePatientDocument = gql`\n    mutation createPatient($patient: PersonInput!) {\n  createPatient(patient: $patient) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useCreatePatientMutation__\n *\n * To run a mutation, you first call `useCreatePatientMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePatientMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPatientMutation, { data, loading, error }] = useCreatePatientMutation({\n *   variables: {\n *      patient: // value for 'patient'\n *   },\n * });\n */\nexport function useCreatePatientMutation(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(CreatePatientDocument, options);\n}\n\n_s(useCreatePatientMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport const FindAllCountryCodesDocument = gql`\n    query findAllCountryCodes($page: Page) {\n  findAllCountryCodes(page: $page) {\n    id\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    codeDescTxt\n    codeShortDescTxt\n    effectiveFromTime\n    effectiveToTime\n    excludedTxt\n    keyInfoTxt\n    indentLevelNbr\n    isModifiableInd\n    parentIsCd\n    statusCd\n    statusTime\n    codeSetNm\n    seqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n  }\n}\n    `;\n/**\n * __useFindAllCountryCodesQuery__\n *\n * To run a query within a React component, call `useFindAllCountryCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllCountryCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllCountryCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindAllCountryCodesQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindAllCountryCodesDocument, options);\n}\n\n_s2(useFindAllCountryCodesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindAllCountryCodesLazyQuery(baseOptions) {\n  _s3();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindAllCountryCodesDocument, options);\n}\n\n_s3(useFindAllCountryCodesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindAllJurisdictionsDocument = gql`\n    query findAllJurisdictions($page: Page) {\n  findAllJurisdictions(page: $page) {\n    id\n    typeCd\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    codeDescTxt\n    codeShortDescTxt\n    effectiveFromTime\n    effectiveToTime\n    indentLevelNbr\n    isModifiableInd\n    parentIsCd\n    stateDomainCd\n    statusCd\n    statusTime\n    codeSetNm\n    codeSeqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n    exportInd\n  }\n}\n    `;\n/**\n * __useFindAllJurisdictionsQuery__\n *\n * To run a query within a React component, call `useFindAllJurisdictionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllJurisdictionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllJurisdictionsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindAllJurisdictionsQuery(baseOptions) {\n  _s4();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindAllJurisdictionsDocument, options);\n}\n\n_s4(useFindAllJurisdictionsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindAllJurisdictionsLazyQuery(baseOptions) {\n  _s5();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindAllJurisdictionsDocument, options);\n}\n\n_s5(useFindAllJurisdictionsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindAllOrganizationsDocument = gql`\n    query findAllOrganizations($page: Page) {\n  findAllOrganizations(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n/**\n * __useFindAllOrganizationsQuery__\n *\n * To run a query within a React component, call `useFindAllOrganizationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllOrganizationsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindAllOrganizationsQuery(baseOptions) {\n  _s6();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindAllOrganizationsDocument, options);\n}\n\n_s6(useFindAllOrganizationsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindAllOrganizationsLazyQuery(baseOptions) {\n  _s7();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindAllOrganizationsDocument, options);\n}\n\n_s7(useFindAllOrganizationsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindAllPatientsDocument = gql`\n    query findAllPatients($page: Page) {\n  findAllPatients(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n/**\n * __useFindAllPatientsQuery__\n *\n * To run a query within a React component, call `useFindAllPatientsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPatientsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPatientsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindAllPatientsQuery(baseOptions) {\n  _s8();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindAllPatientsDocument, options);\n}\n\n_s8(useFindAllPatientsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindAllPatientsLazyQuery(baseOptions) {\n  _s9();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindAllPatientsDocument, options);\n}\n\n_s9(useFindAllPatientsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindAllPlacesDocument = gql`\n    query findAllPlaces($page: Page) {\n  findAllPlaces(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n/**\n * __useFindAllPlacesQuery__\n *\n * To run a query within a React component, call `useFindAllPlacesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPlacesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPlacesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindAllPlacesQuery(baseOptions) {\n  _s10();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindAllPlacesDocument, options);\n}\n\n_s10(useFindAllPlacesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindAllPlacesLazyQuery(baseOptions) {\n  _s11();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindAllPlacesDocument, options);\n}\n\n_s11(useFindAllPlacesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindAllStateCodesDocument = gql`\n    query findAllStateCodes($page: Page) {\n  findAllStateCodes(page: $page) {\n    id\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    stateNm\n    codeDescTxt\n    effectiveFromTime\n    effectiveToTime\n    excludedTxt\n    indentLevelNbr\n    isModifiableInd\n    keyInfoTxt\n    parentIsCd\n    statusCd\n    statusTime\n    codeSetNm\n    seqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n  }\n}\n    `;\n/**\n * __useFindAllStateCodesQuery__\n *\n * To run a query within a React component, call `useFindAllStateCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllStateCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllStateCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindAllStateCodesQuery(baseOptions) {\n  _s12();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindAllStateCodesDocument, options);\n}\n\n_s12(useFindAllStateCodesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindAllStateCodesLazyQuery(baseOptions) {\n  _s13();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindAllStateCodesDocument, options);\n}\n\n_s13(useFindAllStateCodesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindOrganizationByIdDocument = gql`\n    query findOrganizationById($id: ID!) {\n  findOrganizationById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n/**\n * __useFindOrganizationByIdQuery__\n *\n * To run a query within a React component, call `useFindOrganizationByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useFindOrganizationByIdQuery(baseOptions) {\n  _s14();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindOrganizationByIdDocument, options);\n}\n\n_s14(useFindOrganizationByIdQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindOrganizationByIdLazyQuery(baseOptions) {\n  _s15();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindOrganizationByIdDocument, options);\n}\n\n_s15(useFindOrganizationByIdLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindOrganizationsByFilterDocument = gql`\n    query findOrganizationsByFilter($filter: OrganizationFilter!, $page: Page) {\n  findOrganizationsByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n/**\n * __useFindOrganizationsByFilterQuery__\n *\n * To run a query within a React component, call `useFindOrganizationsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindOrganizationsByFilterQuery(baseOptions) {\n  _s16();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindOrganizationsByFilterDocument, options);\n}\n\n_s16(useFindOrganizationsByFilterQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindOrganizationsByFilterLazyQuery(baseOptions) {\n  _s17();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindOrganizationsByFilterDocument, options);\n}\n\n_s17(useFindOrganizationsByFilterLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindPatientByIdDocument = gql`\n    query findPatientById($id: ID!) {\n  findPatientById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n/**\n * __useFindPatientByIdQuery__\n *\n * To run a query within a React component, call `useFindPatientByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useFindPatientByIdQuery(baseOptions) {\n  _s18();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindPatientByIdDocument, options);\n}\n\n_s18(useFindPatientByIdQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindPatientByIdLazyQuery(baseOptions) {\n  _s19();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindPatientByIdDocument, options);\n}\n\n_s19(useFindPatientByIdLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindPatientsByEventDocument = gql`\n    query findPatientsByEvent($filter: EventFilter!, $page: Page) {\n  findPatientsByEvent(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n/**\n * __useFindPatientsByEventQuery__\n *\n * To run a query within a React component, call `useFindPatientsByEventQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByEventQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByEventQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindPatientsByEventQuery(baseOptions) {\n  _s20();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindPatientsByEventDocument, options);\n}\n\n_s20(useFindPatientsByEventQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindPatientsByEventLazyQuery(baseOptions) {\n  _s21();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindPatientsByEventDocument, options);\n}\n\n_s21(useFindPatientsByEventLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindPatientsByFilterDocument = gql`\n    query findPatientsByFilter($filter: PersonFilter!, $page: Page) {\n  findPatientsByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n/**\n * __useFindPatientsByFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindPatientsByFilterQuery(baseOptions) {\n  _s22();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindPatientsByFilterDocument, options);\n}\n\n_s22(useFindPatientsByFilterQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindPatientsByFilterLazyQuery(baseOptions) {\n  _s23();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindPatientsByFilterDocument, options);\n}\n\n_s23(useFindPatientsByFilterLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindPatientsByOrganizationFilterDocument = gql`\n    query findPatientsByOrganizationFilter($filter: OrganizationFilter!, $page: Page) {\n  findPatientsByOrganizationFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n/**\n * __useFindPatientsByOrganizationFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByOrganizationFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByOrganizationFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByOrganizationFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindPatientsByOrganizationFilterQuery(baseOptions) {\n  _s24();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindPatientsByOrganizationFilterDocument, options);\n}\n\n_s24(useFindPatientsByOrganizationFilterQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindPatientsByOrganizationFilterLazyQuery(baseOptions) {\n  _s25();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindPatientsByOrganizationFilterDocument, options);\n}\n\n_s25(useFindPatientsByOrganizationFilterLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindPlaceByIdDocument = gql`\n    query findPlaceById($id: ID!) {\n  findPlaceById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n/**\n * __useFindPlaceByIdQuery__\n *\n * To run a query within a React component, call `useFindPlaceByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlaceByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlaceByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useFindPlaceByIdQuery(baseOptions) {\n  _s26();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindPlaceByIdDocument, options);\n}\n\n_s26(useFindPlaceByIdQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindPlaceByIdLazyQuery(baseOptions) {\n  _s27();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindPlaceByIdDocument, options);\n}\n\n_s27(useFindPlaceByIdLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FindPlacesByFilterDocument = gql`\n    query findPlacesByFilter($filter: PlaceFilter!, $page: Page) {\n  findPlacesByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n/**\n * __useFindPlacesByFilterQuery__\n *\n * To run a query within a React component, call `useFindPlacesByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlacesByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlacesByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\n\nexport function useFindPlacesByFilterQuery(baseOptions) {\n  _s28();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FindPlacesByFilterDocument, options);\n}\n\n_s28(useFindPlacesByFilterQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFindPlacesByFilterLazyQuery(baseOptions) {\n  _s29();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FindPlacesByFilterDocument, options);\n}\n\n_s29(useFindPlacesByFilterLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"names":["gql","Apollo","defaultOptions","CaseStatus","Deceased","EntryMethod","Ethnicity","EventStatus","EventType","Gender","IdentificationType","InvestigationEventDateType","InvestigationEventIdType","InvestigationStatus","LaboratoryEventIdType","LaboratoryReportEventDateType","LaboratoryReportStatus","NotificationStatus","Operator","PhoneType","PregnancyStatus","ProcessingStatus","ProviderType","Race","RecordStatus","ReportingEntityType","SortDirection","Suffix","UserType","CreatePatientDocument","useCreatePatientMutation","baseOptions","options","useMutation","FindAllCountryCodesDocument","useFindAllCountryCodesQuery","useQuery","useFindAllCountryCodesLazyQuery","useLazyQuery","FindAllJurisdictionsDocument","useFindAllJurisdictionsQuery","useFindAllJurisdictionsLazyQuery","FindAllOrganizationsDocument","useFindAllOrganizationsQuery","useFindAllOrganizationsLazyQuery","FindAllPatientsDocument","useFindAllPatientsQuery","useFindAllPatientsLazyQuery","FindAllPlacesDocument","useFindAllPlacesQuery","useFindAllPlacesLazyQuery","FindAllStateCodesDocument","useFindAllStateCodesQuery","useFindAllStateCodesLazyQuery","FindOrganizationByIdDocument","useFindOrganizationByIdQuery","useFindOrganizationByIdLazyQuery","FindOrganizationsByFilterDocument","useFindOrganizationsByFilterQuery","useFindOrganizationsByFilterLazyQuery","FindPatientByIdDocument","useFindPatientByIdQuery","useFindPatientByIdLazyQuery","FindPatientsByEventDocument","useFindPatientsByEventQuery","useFindPatientsByEventLazyQuery","FindPatientsByFilterDocument","useFindPatientsByFilterQuery","useFindPatientsByFilterLazyQuery","FindPatientsByOrganizationFilterDocument","useFindPatientsByOrganizationFilterQuery","useFindPatientsByOrganizationFilterLazyQuery","FindPlaceByIdDocument","useFindPlaceByIdQuery","useFindPlaceByIdLazyQuery","FindPlacesByFilterDocument","useFindPlacesByFilterQuery","useFindPlacesByFilterLazyQuery"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/src/generated/graphql/schema.ts"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport enum CaseStatus {\n  Confirmed = 'CONFIRMED',\n  NotACase = 'NOT_A_CASE',\n  Probable = 'PROBABLE',\n  Suspect = 'SUSPECT',\n  Unknown = 'UNKNOWN'\n}\n\nexport type CaseStatuses = {\n  includeUnassigned: Scalars['Boolean'];\n  statusList: Array<CaseStatus>;\n};\n\nexport type CountryCode = {\n  __typename?: 'CountryCode';\n  assigningAuthorityCd?: Maybe<Scalars['String']>;\n  assigningAuthorityDescTxt?: Maybe<Scalars['String']>;\n  codeDescTxt?: Maybe<Scalars['String']>;\n  codeSetNm?: Maybe<Scalars['String']>;\n  codeShortDescTxt?: Maybe<Scalars['String']>;\n  codeSystemCd?: Maybe<Scalars['String']>;\n  codeSystemDescTxt?: Maybe<Scalars['String']>;\n  effectiveFromTime?: Maybe<Scalars['Date']>;\n  effectiveToTime?: Maybe<Scalars['Date']>;\n  excludedTxt?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  indentLevelNbr?: Maybe<Scalars['Int']>;\n  isModifiableInd?: Maybe<Scalars['String']>;\n  keyInfoTxt?: Maybe<Scalars['String']>;\n  nbsUid?: Maybe<Scalars['Int']>;\n  parentIsCd?: Maybe<Scalars['String']>;\n  seqNum?: Maybe<Scalars['Int']>;\n  sourceConceptId?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n};\n\nexport enum Deceased {\n  N = 'N',\n  Unk = 'UNK',\n  Y = 'Y'\n}\n\nexport enum EntryMethod {\n  Electronic = 'ELECTRONIC',\n  Manual = 'MANUAL'\n}\n\nexport enum Ethnicity {\n  HispanicOrLatino = 'HISPANIC_OR_LATINO',\n  NotHispanicOrLatino = 'NOT_HISPANIC_OR_LATINO',\n  Unknown = 'UNKNOWN'\n}\n\nexport type EventFilter = {\n  eventType: EventType;\n  investigationFilter?: InputMaybe<InvestigationFilter>;\n  laboratoryReportFilter?: InputMaybe<LaboratoryReportFilter>;\n};\n\nexport enum EventStatus {\n  New = 'NEW',\n  Update = 'UPDATE'\n}\n\nexport enum EventType {\n  Investigation = 'INVESTIGATION',\n  LaboratoryReport = 'LABORATORY_REPORT'\n}\n\nexport enum Gender {\n  F = 'F',\n  M = 'M',\n  U = 'U'\n}\n\nexport type Identification = {\n  identificationNumber: Scalars['String'];\n  identificationType: IdentificationType;\n};\n\nexport enum IdentificationType {\n  AccountNumber = 'ACCOUNT_NUMBER',\n  AlternatePersonNumber = 'ALTERNATE_PERSON_NUMBER',\n  ChipIdentificationNumber = 'CHIP_IDENTIFICATION_NUMBER',\n  DriversLicenseNumber = 'DRIVERS_LICENSE_NUMBER',\n  ImmunizationRegistryId = 'IMMUNIZATION_REGISTRY_ID',\n  MedicaidNumber = 'MEDICAID_NUMBER',\n  MedicalRecordNumber = 'MEDICAL_RECORD_NUMBER',\n  MedicareNumber = 'MEDICARE_NUMBER',\n  MothersIdentifier = 'MOTHERS_IDENTIFIER',\n  NationalUniqueIndividualIdentifier = 'NATIONAL_UNIQUE_INDIVIDUAL_IDENTIFIER',\n  Other = 'OTHER',\n  PartnerServicesPatientNumber = 'PARTNER_SERVICES_PATIENT_NUMBER',\n  PatientExternalIdentifier = 'PATIENT_EXTERNAL_IDENTIFIER',\n  PatientInternalIdentifier = 'PATIENT_INTERNAL_IDENTIFIER',\n  PersonNumber = 'PERSON_NUMBER',\n  PrisonIdentificationNumber = 'PRISON_IDENTIFICATION_NUMBER',\n  RyanWhiteIdentifier = 'RYAN_WHITE_IDENTIFIER',\n  SocialSecurity = 'SOCIAL_SECURITY',\n  VisaPassport = 'VISA_PASSPORT',\n  WicIdentifier = 'WIC_IDENTIFIER'\n}\n\nexport type InvestigationEventDateSearch = {\n  eventDateType: InvestigationEventDateType;\n  from: Scalars['Date'];\n  to: Scalars['Date'];\n};\n\nexport enum InvestigationEventDateType {\n  DateOfReport = 'DATE_OF_REPORT',\n  InvestigationClosedDate = 'INVESTIGATION_CLOSED_DATE',\n  InvestigationCreateDate = 'INVESTIGATION_CREATE_DATE',\n  InvestigationStartDate = 'INVESTIGATION_START_DATE',\n  LastUpdateDate = 'LAST_UPDATE_DATE',\n  NotificationCreateDate = 'NOTIFICATION_CREATE_DATE'\n}\n\nexport enum InvestigationEventIdType {\n  AbcsCaseId = 'ABCS_CASE_ID',\n  CityCountyCaseId = 'CITY_COUNTY_CASE_ID',\n  InvestigationId = 'INVESTIGATION_ID',\n  NotificationId = 'NOTIFICATION_ID',\n  StateCaseId = 'STATE_CASE_ID'\n}\n\nexport type InvestigationFilter = {\n  caseStatuses?: InputMaybe<CaseStatuses>;\n  conditions?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  createdBy?: InputMaybe<Scalars['String']>;\n  eventDateSearch?: InputMaybe<InvestigationEventDateSearch>;\n  eventId?: InputMaybe<Scalars['String']>;\n  eventIdType?: InputMaybe<InvestigationEventIdType>;\n  investigationStatus?: InputMaybe<InvestigationStatus>;\n  investigatorId?: InputMaybe<Scalars['ID']>;\n  jurisdictions?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;\n  lastUpdatedBy?: InputMaybe<Scalars['String']>;\n  notificationStatuses?: InputMaybe<NotificationStatuses>;\n  outbreakNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  pregnancyStatus?: InputMaybe<PregnancyStatus>;\n  processingStatuses?: InputMaybe<ProcessingStatuses>;\n  programAreas?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  providerFacilitySearch?: InputMaybe<ProviderFacilitySearch>;\n};\n\nexport enum InvestigationStatus {\n  Closed = 'CLOSED',\n  Open = 'OPEN'\n}\n\nexport type Jurisdiction = {\n  __typename?: 'Jurisdiction';\n  assigningAuthorityCd?: Maybe<Scalars['String']>;\n  assigningAuthorityDescTxt?: Maybe<Scalars['String']>;\n  codeDescTxt?: Maybe<Scalars['String']>;\n  codeSeqNum?: Maybe<Scalars['Int']>;\n  codeSetNm?: Maybe<Scalars['String']>;\n  codeShortDescTxt?: Maybe<Scalars['String']>;\n  codeSystemCd?: Maybe<Scalars['String']>;\n  codeSystemDescTxt?: Maybe<Scalars['String']>;\n  effectiveFromTime?: Maybe<Scalars['Date']>;\n  effectiveToTime?: Maybe<Scalars['Date']>;\n  exportInd?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  indentLevelNbr?: Maybe<Scalars['Int']>;\n  isModifiableInd?: Maybe<Scalars['String']>;\n  nbsUid?: Maybe<Scalars['ID']>;\n  parentIsCd?: Maybe<Scalars['String']>;\n  sourceConceptId?: Maybe<Scalars['String']>;\n  stateDomainCd?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  typeCd: Scalars['String'];\n};\n\nexport type LabReportProviderSearch = {\n  providerId: Scalars['ID'];\n  providerType: ProviderType;\n};\n\nexport type LaboratoryEventDateSearch = {\n  eventDateType: LaboratoryReportEventDateType;\n  from: Scalars['Date'];\n  to: Scalars['Date'];\n};\n\nexport enum LaboratoryEventIdType {\n  AccessionNumber = 'ACCESSION_NUMBER',\n  LabId = 'LAB_ID'\n}\n\nexport enum LaboratoryReportEventDateType {\n  DateOfReport = 'DATE_OF_REPORT',\n  DateOfSpecimenCollection = 'DATE_OF_SPECIMEN_COLLECTION',\n  DateReceivedByPublicHealth = 'DATE_RECEIVED_BY_PUBLIC_HEALTH',\n  LabReportCreateDate = 'LAB_REPORT_CREATE_DATE',\n  LastUpdateDate = 'LAST_UPDATE_DATE'\n}\n\nexport type LaboratoryReportFilter = {\n  codedResult?: InputMaybe<Scalars['String']>;\n  createdBy?: InputMaybe<Scalars['ID']>;\n  enteredBy?: InputMaybe<Array<InputMaybe<UserType>>>;\n  entryMethods?: InputMaybe<Array<InputMaybe<EntryMethod>>>;\n  eventDateSearch?: InputMaybe<LaboratoryEventDateSearch>;\n  eventId?: InputMaybe<Scalars['String']>;\n  eventIdType?: InputMaybe<LaboratoryEventIdType>;\n  eventStatus?: InputMaybe<Array<InputMaybe<EventStatus>>>;\n  jurisdictions?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;\n  lastUpdatedBy?: InputMaybe<Scalars['ID']>;\n  pregnancyStatus?: InputMaybe<PregnancyStatus>;\n  processingStatus?: InputMaybe<Array<InputMaybe<LaboratoryReportStatus>>>;\n  programAreas?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  providerSearch?: InputMaybe<LabReportProviderSearch>;\n  resultedTest?: InputMaybe<Scalars['String']>;\n};\n\nexport enum LaboratoryReportStatus {\n  Processed = 'PROCESSED',\n  Unprocessed = 'UNPROCESSED'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createPatient: Person;\n};\n\n\nexport type MutationCreatePatientArgs = {\n  patient: PersonInput;\n};\n\nexport type Name = {\n  firstName?: InputMaybe<Scalars['String']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  middleName?: InputMaybe<Scalars['String']>;\n  suffix?: InputMaybe<Suffix>;\n};\n\nexport enum NotificationStatus {\n  Approved = 'APPROVED',\n  Completed = 'COMPLETED',\n  MessageFailed = 'MESSAGE_FAILED',\n  PendingApproval = 'PENDING_APPROVAL',\n  Rejected = 'REJECTED'\n}\n\nexport type NotificationStatuses = {\n  includeUnassigned: Scalars['Boolean'];\n  statusList: Array<NotificationStatus>;\n};\n\nexport enum Operator {\n  After = 'AFTER',\n  Before = 'BEFORE',\n  Equal = 'EQUAL'\n}\n\nexport type Organization = {\n  __typename?: 'Organization';\n  addReasonCd?: Maybe<Scalars['String']>;\n  addTime?: Maybe<Scalars['Date']>;\n  addUserId?: Maybe<Scalars['ID']>;\n  cd?: Maybe<Scalars['String']>;\n  cdDescTxt?: Maybe<Scalars['String']>;\n  cityCd?: Maybe<Scalars['String']>;\n  cityDescTxt?: Maybe<Scalars['String']>;\n  cntryCd?: Maybe<Scalars['String']>;\n  cntyCd?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  displayNm?: Maybe<Scalars['String']>;\n  durationAmt?: Maybe<Scalars['String']>;\n  durationUnitCd?: Maybe<Scalars['String']>;\n  edxInd?: Maybe<Scalars['String']>;\n  electronicInd?: Maybe<Scalars['String']>;\n  fromTime?: Maybe<Scalars['Date']>;\n  id?: Maybe<Scalars['ID']>;\n  lastChgReasonCd?: Maybe<Scalars['String']>;\n  lastChgTime?: Maybe<Scalars['Date']>;\n  lastChgUserId?: Maybe<Scalars['Int']>;\n  localId?: Maybe<Scalars['String']>;\n  phoneCntryCd?: Maybe<Scalars['String']>;\n  phoneNbr?: Maybe<Scalars['String']>;\n  recordStatusCd?: Maybe<Scalars['String']>;\n  recordStatusTime?: Maybe<Scalars['Date']>;\n  standardIndustryClassCd?: Maybe<Scalars['String']>;\n  standardIndustryDescTxt?: Maybe<Scalars['String']>;\n  stateCd?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  streetAddr1?: Maybe<Scalars['String']>;\n  streetAddr2?: Maybe<Scalars['String']>;\n  toTime?: Maybe<Scalars['Date']>;\n  userAffiliationTxt?: Maybe<Scalars['String']>;\n  versionCtrlNbr?: Maybe<Scalars['Int']>;\n  zipCd?: Maybe<Scalars['String']>;\n};\n\nexport type OrganizationFilter = {\n  cityCd?: InputMaybe<Scalars['String']>;\n  cityDescTxt?: InputMaybe<Scalars['String']>;\n  displayNm?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  stateCd?: InputMaybe<Scalars['String']>;\n  streetAddr1?: InputMaybe<Scalars['String']>;\n  streetAddr2?: InputMaybe<Scalars['String']>;\n  zipCd?: InputMaybe<Scalars['String']>;\n};\n\nexport type Page = {\n  pageNumber?: InputMaybe<Scalars['Int']>;\n  pageSize?: InputMaybe<Scalars['Int']>;\n};\n\nexport type Person = {\n  __typename?: 'Person';\n  addReasonCd?: Maybe<Scalars['String']>;\n  addTime?: Maybe<Scalars['Date']>;\n  addUserId?: Maybe<Scalars['ID']>;\n  additionalGenderCd?: Maybe<Gender>;\n  administrativeGenderCd?: Maybe<Gender>;\n  adultsInHouseNbr?: Maybe<Scalars['Int']>;\n  ageCalc?: Maybe<Scalars['Int']>;\n  ageCalcTime?: Maybe<Scalars['Date']>;\n  ageCalcUnitCd?: Maybe<Scalars['String']>;\n  ageCategoryCd?: Maybe<Scalars['String']>;\n  ageReported?: Maybe<Scalars['String']>;\n  ageReportedTime?: Maybe<Scalars['Date']>;\n  ageReportedUnitCd?: Maybe<Scalars['String']>;\n  asOfDateAdmin?: Maybe<Scalars['Date']>;\n  asOfDateEthnicity?: Maybe<Scalars['Date']>;\n  asOfDateGeneral?: Maybe<Scalars['Date']>;\n  asOfDateMorbidity?: Maybe<Scalars['Date']>;\n  asOfDateSex?: Maybe<Scalars['Date']>;\n  birthCityCd?: Maybe<Scalars['String']>;\n  birthCityDescTxt?: Maybe<Scalars['String']>;\n  birthCntryCd?: Maybe<Scalars['String']>;\n  birthGenderCd?: Maybe<Gender>;\n  birthOrderNbr?: Maybe<Scalars['Int']>;\n  birthStateCd?: Maybe<Scalars['String']>;\n  birthTime?: Maybe<Scalars['Date']>;\n  birthTimeCalc?: Maybe<Scalars['Date']>;\n  cd?: Maybe<Scalars['String']>;\n  cdDescTxt?: Maybe<Scalars['String']>;\n  cellPhoneNbr?: Maybe<Scalars['String']>;\n  childrenInHouseNbr?: Maybe<Scalars['Int']>;\n  currSexCd?: Maybe<Scalars['String']>;\n  deceasedIndCd?: Maybe<Scalars['String']>;\n  deceasedTime?: Maybe<Scalars['Date']>;\n  dedupMatchInd?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  dlNum?: Maybe<Scalars['String']>;\n  dlStateCd?: Maybe<Scalars['String']>;\n  educationLevelCd?: Maybe<Scalars['String']>;\n  educationLevelDescTxt?: Maybe<Scalars['String']>;\n  edxInd?: Maybe<Scalars['String']>;\n  eharsId?: Maybe<Scalars['String']>;\n  electronicInd?: Maybe<Scalars['String']>;\n  ethnicGroupDescTxt?: Maybe<Scalars['String']>;\n  ethnicGroupInd?: Maybe<Scalars['String']>;\n  ethnicGroupSeqNbr?: Maybe<Scalars['Int']>;\n  ethnicUnkReasonCd?: Maybe<Scalars['String']>;\n  ethnicityGroupCd?: Maybe<Scalars['String']>;\n  firstNm?: Maybe<Scalars['String']>;\n  groupNbr?: Maybe<Scalars['Int']>;\n  groupTime?: Maybe<Scalars['Date']>;\n  hmCityCd?: Maybe<Scalars['String']>;\n  hmCityDescTxt?: Maybe<Scalars['String']>;\n  hmCntryCd?: Maybe<Scalars['String']>;\n  hmCntyCd?: Maybe<Scalars['String']>;\n  hmEmailAddr?: Maybe<Scalars['String']>;\n  hmPhoneCntryCd?: Maybe<Scalars['String']>;\n  hmPhoneNbr?: Maybe<Scalars['String']>;\n  hmStateCd?: Maybe<Scalars['String']>;\n  hmStreetAddr1?: Maybe<Scalars['String']>;\n  hmStreetAddr2?: Maybe<Scalars['String']>;\n  hmZipCd?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  lastChgReasonCd?: Maybe<Scalars['String']>;\n  lastChgTime?: Maybe<Scalars['Date']>;\n  lastChgUserId?: Maybe<Scalars['ID']>;\n  lastNm?: Maybe<Scalars['String']>;\n  localId?: Maybe<Scalars['String']>;\n  maritalStatusCd?: Maybe<Scalars['String']>;\n  maritalStatusDescTxt?: Maybe<Scalars['String']>;\n  medicaidNum?: Maybe<Scalars['String']>;\n  middleNm?: Maybe<Scalars['String']>;\n  mothersMaidenNm?: Maybe<Scalars['String']>;\n  multipleBirthInd?: Maybe<Scalars['String']>;\n  nmPrefix?: Maybe<Scalars['String']>;\n  nmSuffix?: Maybe<Scalars['String']>;\n  occupationCd?: Maybe<Scalars['String']>;\n  personParentUid?: Maybe<Scalars['ID']>;\n  preferredGenderCd?: Maybe<Gender>;\n  preferredNm?: Maybe<Scalars['String']>;\n  primLangCd?: Maybe<Scalars['String']>;\n  primLangDescTxt?: Maybe<Scalars['String']>;\n  raceCategoryCd?: Maybe<Scalars['String']>;\n  raceCd?: Maybe<Scalars['String']>;\n  raceDescTxt?: Maybe<Scalars['String']>;\n  raceSeqNbr?: Maybe<Scalars['Int']>;\n  recordStatusCd?: Maybe<Scalars['String']>;\n  recordStatusTime?: Maybe<Scalars['Date']>;\n  sexUnkReasonCd?: Maybe<Scalars['String']>;\n  speaksEnglishCd?: Maybe<Scalars['String']>;\n  ssn?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  survivedIndCd?: Maybe<Scalars['String']>;\n  userAffiliationTxt?: Maybe<Scalars['String']>;\n  versionCtrlNbr?: Maybe<Scalars['Int']>;\n  wkCityCd?: Maybe<Scalars['String']>;\n  wkCityDescTxt?: Maybe<Scalars['String']>;\n  wkCntryCd?: Maybe<Scalars['String']>;\n  wkCntyCd?: Maybe<Scalars['String']>;\n  wkEmailAddr?: Maybe<Scalars['String']>;\n  wkPhoneCntryCd?: Maybe<Scalars['String']>;\n  wkPhoneNbr?: Maybe<Scalars['String']>;\n  wkStateCd?: Maybe<Scalars['String']>;\n  wkStreetAddr1?: Maybe<Scalars['String']>;\n  wkStreetAddr2?: Maybe<Scalars['String']>;\n  wkZipCd?: Maybe<Scalars['String']>;\n};\n\nexport type PersonFilter = {\n  address?: InputMaybe<Scalars['String']>;\n  city?: InputMaybe<Scalars['String']>;\n  country?: InputMaybe<Scalars['String']>;\n  dateOfBirth?: InputMaybe<Scalars['Date']>;\n  dateOfBirthOperator?: InputMaybe<Operator>;\n  deceased?: InputMaybe<Deceased>;\n  ethnicity?: InputMaybe<Ethnicity>;\n  firstName?: InputMaybe<Scalars['String']>;\n  gender?: InputMaybe<Gender>;\n  id?: InputMaybe<Scalars['ID']>;\n  identification?: InputMaybe<Identification>;\n  lastName?: InputMaybe<Scalars['String']>;\n  mortalityStatus?: InputMaybe<Scalars['String']>;\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  race?: InputMaybe<Race>;\n  recordStatus?: InputMaybe<RecordStatus>;\n  ssn?: InputMaybe<Scalars['String']>;\n  state?: InputMaybe<Scalars['String']>;\n  treatmentId?: InputMaybe<Scalars['String']>;\n  vaccinationId?: InputMaybe<Scalars['String']>;\n  zip?: InputMaybe<Scalars['String']>;\n};\n\nexport type PersonInput = {\n  DateOfBirth?: InputMaybe<Scalars['Date']>;\n  addresses?: InputMaybe<Array<InputMaybe<PostalAddress>>>;\n  birthGender?: InputMaybe<Gender>;\n  currentGender?: InputMaybe<Gender>;\n  deceased?: InputMaybe<Deceased>;\n  emailAddresses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  ethnicity?: InputMaybe<Ethnicity>;\n  name?: InputMaybe<Name>;\n  phoneNumbers?: InputMaybe<Array<InputMaybe<PhoneNumber>>>;\n  race?: InputMaybe<Race>;\n  ssn?: InputMaybe<Scalars['String']>;\n};\n\nexport type PhoneNumber = {\n  extension?: InputMaybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  phoneType: PhoneType;\n};\n\nexport enum PhoneType {\n  Cell = 'CELL',\n  Home = 'HOME',\n  Work = 'WORK'\n}\n\nexport type Place = {\n  __typename?: 'Place';\n  addReasonCd?: Maybe<Scalars['String']>;\n  addTime?: Maybe<Scalars['Date']>;\n  addUserId?: Maybe<Scalars['Int']>;\n  cd?: Maybe<Scalars['String']>;\n  cdDescTxt?: Maybe<Scalars['String']>;\n  cityCd?: Maybe<Scalars['String']>;\n  cityDescTxt?: Maybe<Scalars['String']>;\n  cntryCd?: Maybe<Scalars['String']>;\n  cntyCd?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  durationAmt?: Maybe<Scalars['String']>;\n  durationUnitCd?: Maybe<Scalars['String']>;\n  fromTime?: Maybe<Scalars['Date']>;\n  id?: Maybe<Scalars['ID']>;\n  lastChgReasonCd?: Maybe<Scalars['String']>;\n  lastChgTime?: Maybe<Scalars['Date']>;\n  lastChgUserId?: Maybe<Scalars['Int']>;\n  localId?: Maybe<Scalars['String']>;\n  nm?: Maybe<Scalars['String']>;\n  phoneCntryCd?: Maybe<Scalars['String']>;\n  phoneNbr?: Maybe<Scalars['String']>;\n  recordStatusCd?: Maybe<Scalars['String']>;\n  recordStatusTime?: Maybe<Scalars['Date']>;\n  stateCd?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  streetAddr1?: Maybe<Scalars['String']>;\n  streetAddr2?: Maybe<Scalars['String']>;\n  toTime?: Maybe<Scalars['Date']>;\n  userAffiliationTxt?: Maybe<Scalars['String']>;\n  versionCtrlNbr?: Maybe<Scalars['Int']>;\n  zipCd?: Maybe<Scalars['String']>;\n};\n\nexport type PlaceFilter = {\n  cityCd?: InputMaybe<Scalars['String']>;\n  cityDescTxt?: InputMaybe<Scalars['String']>;\n  description?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  nm?: InputMaybe<Scalars['String']>;\n  stateCd?: InputMaybe<Scalars['String']>;\n  streetAddr1?: InputMaybe<Scalars['String']>;\n  streetAddr2?: InputMaybe<Scalars['String']>;\n  zipCd?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostalAddress = {\n  censusTract?: InputMaybe<Scalars['String']>;\n  city?: InputMaybe<Scalars['String']>;\n  countryCode?: InputMaybe<Scalars['String']>;\n  countyCode?: InputMaybe<Scalars['String']>;\n  stateCode?: InputMaybe<Scalars['String']>;\n  streetAddress1?: InputMaybe<Scalars['String']>;\n  streetAddress2?: InputMaybe<Scalars['String']>;\n  zip?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PregnancyStatus {\n  No = 'NO',\n  Unknown = 'UNKNOWN',\n  Yes = 'YES'\n}\n\nexport enum ProcessingStatus {\n  AwaitingInterview = 'AWAITING_INTERVIEW',\n  ClosedCase = 'CLOSED_CASE',\n  FieldFollowUp = 'FIELD_FOLLOW_UP',\n  NoFollowUp = 'NO_FOLLOW_UP',\n  OpenCase = 'OPEN_CASE',\n  SurveillanceFollowUp = 'SURVEILLANCE_FOLLOW_UP'\n}\n\nexport type ProcessingStatuses = {\n  includeUnassigned: Scalars['Boolean'];\n  statusList: Array<ProcessingStatus>;\n};\n\nexport type ProviderFacilitySearch = {\n  entityType: ReportingEntityType;\n  id: Scalars['ID'];\n};\n\nexport enum ProviderType {\n  OrderingFacility = 'ORDERING_FACILITY',\n  OrderingProvider = 'ORDERING_PROVIDER',\n  ReportingFacility = 'REPORTING_FACILITY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  findAllCountryCodes: Array<Maybe<CountryCode>>;\n  findAllJurisdictions: Array<Maybe<Jurisdiction>>;\n  findAllOrganizations: Array<Maybe<Organization>>;\n  findAllPatients: Array<Maybe<Person>>;\n  findAllPlaces: Array<Maybe<Place>>;\n  findAllStateCodes: Array<Maybe<StateCode>>;\n  findOrganizationById?: Maybe<Organization>;\n  findOrganizationsByFilter: Array<Maybe<Organization>>;\n  findPatientById?: Maybe<Person>;\n  findPatientsByEvent: Array<Maybe<Person>>;\n  findPatientsByFilter: Array<Maybe<Person>>;\n  findPatientsByOrganizationFilter: Array<Maybe<Person>>;\n  findPlaceById?: Maybe<Place>;\n  findPlacesByFilter: Array<Maybe<Place>>;\n};\n\n\nexport type QueryFindAllCountryCodesArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllJurisdictionsArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllOrganizationsArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllPatientsArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllPlacesArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllStateCodesArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindOrganizationByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFindOrganizationsByFilterArgs = {\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPatientByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFindPatientsByEventArgs = {\n  filter: EventFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPatientsByFilterArgs = {\n  filter: PersonFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPatientsByOrganizationFilterArgs = {\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPlaceByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFindPlacesByFilterArgs = {\n  filter: PlaceFilter;\n  page?: InputMaybe<Page>;\n};\n\nexport enum Race {\n  AfricanAmerican = 'AFRICAN_AMERICAN',\n  AmericanIndianOrAlaskanNative = 'AMERICAN_INDIAN_OR_ALASKAN_NATIVE',\n  Asian = 'ASIAN',\n  NativeHawaiianOrPacificIslander = 'NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER',\n  NotAsked = 'NOT_ASKED',\n  OtherRace = 'OTHER_RACE',\n  RefusedToAnswer = 'REFUSED_TO_ANSWER',\n  Unknown = 'UNKNOWN',\n  White = 'WHITE'\n}\n\nexport enum RecordStatus {\n  Active = 'ACTIVE',\n  LogDel = 'LOG_DEL'\n}\n\nexport enum ReportingEntityType {\n  Facility = 'FACILITY',\n  Provider = 'PROVIDER'\n}\n\nexport enum SortDirection {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type StateCode = {\n  __typename?: 'StateCode';\n  assigningAuthorityCd?: Maybe<Scalars['String']>;\n  assigningAuthorityDescTxt?: Maybe<Scalars['String']>;\n  codeDescTxt?: Maybe<Scalars['String']>;\n  codeSetNm?: Maybe<Scalars['String']>;\n  codeSystemCd?: Maybe<Scalars['String']>;\n  codeSystemDescTxt?: Maybe<Scalars['String']>;\n  effectiveFromTime?: Maybe<Scalars['Date']>;\n  effectiveToTime?: Maybe<Scalars['Date']>;\n  excludedTxt?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  indentLevelNbr?: Maybe<Scalars['Int']>;\n  isModifiableInd?: Maybe<Scalars['String']>;\n  keyInfoTxt?: Maybe<Scalars['String']>;\n  nbsUid?: Maybe<Scalars['Int']>;\n  parentIsCd?: Maybe<Scalars['String']>;\n  seqNum?: Maybe<Scalars['Int']>;\n  sourceConceptId?: Maybe<Scalars['String']>;\n  stateNm?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n};\n\nexport enum Suffix {\n  Esq = 'ESQ',\n  Ii = 'II',\n  Iii = 'III',\n  Iv = 'IV',\n  Jr = 'JR',\n  Sr = 'SR',\n  V = 'V'\n}\n\nexport enum UserType {\n  External = 'EXTERNAL',\n  Internal = 'INTERNAL'\n}\n\nexport type CreatePatientMutationVariables = Exact<{\n  patient: PersonInput;\n}>;\n\n\nexport type CreatePatientMutation = { __typename?: 'Mutation', createPatient: { __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } };\n\nexport type FindAllCountryCodesQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllCountryCodesQuery = { __typename?: 'Query', findAllCountryCodes: Array<{ __typename?: 'CountryCode', id?: string | null, assigningAuthorityCd?: string | null, assigningAuthorityDescTxt?: string | null, codeDescTxt?: string | null, codeShortDescTxt?: string | null, effectiveFromTime?: any | null, effectiveToTime?: any | null, excludedTxt?: string | null, keyInfoTxt?: string | null, indentLevelNbr?: number | null, isModifiableInd?: string | null, parentIsCd?: string | null, statusCd?: string | null, statusTime?: any | null, codeSetNm?: string | null, seqNum?: number | null, nbsUid?: number | null, sourceConceptId?: string | null, codeSystemCd?: string | null, codeSystemDescTxt?: string | null } | null> };\n\nexport type FindAllJurisdictionsQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllJurisdictionsQuery = { __typename?: 'Query', findAllJurisdictions: Array<{ __typename?: 'Jurisdiction', id: string, typeCd: string, assigningAuthorityCd?: string | null, assigningAuthorityDescTxt?: string | null, codeDescTxt?: string | null, codeShortDescTxt?: string | null, effectiveFromTime?: any | null, effectiveToTime?: any | null, indentLevelNbr?: number | null, isModifiableInd?: string | null, parentIsCd?: string | null, stateDomainCd?: string | null, statusCd?: string | null, statusTime?: any | null, codeSetNm?: string | null, codeSeqNum?: number | null, nbsUid?: string | null, sourceConceptId?: string | null, codeSystemCd?: string | null, codeSystemDescTxt?: string | null, exportInd?: string | null } | null> };\n\nexport type FindAllOrganizationsQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllOrganizationsQuery = { __typename?: 'Query', findAllOrganizations: Array<{ __typename?: 'Organization', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, standardIndustryClassCd?: string | null, standardIndustryDescTxt?: string | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, displayNm?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, zipCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null, electronicInd?: string | null, edxInd?: string | null } | null> };\n\nexport type FindAllPatientsQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllPatientsQuery = { __typename?: 'Query', findAllPatients: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindAllPlacesQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllPlacesQuery = { __typename?: 'Query', findAllPlaces: Array<{ __typename?: 'Place', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: number | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, nm?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, zipCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null } | null> };\n\nexport type FindAllStateCodesQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllStateCodesQuery = { __typename?: 'Query', findAllStateCodes: Array<{ __typename?: 'StateCode', id?: string | null, assigningAuthorityCd?: string | null, assigningAuthorityDescTxt?: string | null, stateNm?: string | null, codeDescTxt?: string | null, effectiveFromTime?: any | null, effectiveToTime?: any | null, excludedTxt?: string | null, indentLevelNbr?: number | null, isModifiableInd?: string | null, keyInfoTxt?: string | null, parentIsCd?: string | null, statusCd?: string | null, statusTime?: any | null, codeSetNm?: string | null, seqNum?: number | null, nbsUid?: number | null, sourceConceptId?: string | null, codeSystemCd?: string | null, codeSystemDescTxt?: string | null } | null> };\n\nexport type FindOrganizationByIdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type FindOrganizationByIdQuery = { __typename?: 'Query', findOrganizationById?: { __typename?: 'Organization', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, standardIndustryClassCd?: string | null, standardIndustryDescTxt?: string | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, displayNm?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, zipCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null, electronicInd?: string | null, edxInd?: string | null } | null };\n\nexport type FindOrganizationsByFilterQueryVariables = Exact<{\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindOrganizationsByFilterQuery = { __typename?: 'Query', findOrganizationsByFilter: Array<{ __typename?: 'Organization', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, standardIndustryClassCd?: string | null, standardIndustryDescTxt?: string | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, displayNm?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, zipCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null, electronicInd?: string | null, edxInd?: string | null } | null> };\n\nexport type FindPatientByIdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type FindPatientByIdQuery = { __typename?: 'Query', findPatientById?: { __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null };\n\nexport type FindPatientsByEventQueryVariables = Exact<{\n  filter: EventFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPatientsByEventQuery = { __typename?: 'Query', findPatientsByEvent: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindPatientsByFilterQueryVariables = Exact<{\n  filter: PersonFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPatientsByFilterQuery = { __typename?: 'Query', findPatientsByFilter: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindPatientsByOrganizationFilterQueryVariables = Exact<{\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPatientsByOrganizationFilterQuery = { __typename?: 'Query', findPatientsByOrganizationFilter: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindPlaceByIdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type FindPlaceByIdQuery = { __typename?: 'Query', findPlaceById?: { __typename?: 'Place', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: number | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, nm?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, zipCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null } | null };\n\nexport type FindPlacesByFilterQueryVariables = Exact<{\n  filter: PlaceFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPlacesByFilterQuery = { __typename?: 'Query', findPlacesByFilter: Array<{ __typename?: 'Place', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: number | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, nm?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, zipCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null } | null> };\n\n\nexport const CreatePatientDocument = gql`\n    mutation createPatient($patient: PersonInput!) {\n  createPatient(patient: $patient) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\nexport type CreatePatientMutationFn = Apollo.MutationFunction<CreatePatientMutation, CreatePatientMutationVariables>;\n\n/**\n * __useCreatePatientMutation__\n *\n * To run a mutation, you first call `useCreatePatientMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePatientMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPatientMutation, { data, loading, error }] = useCreatePatientMutation({\n *   variables: {\n *      patient: // value for 'patient'\n *   },\n * });\n */\nexport function useCreatePatientMutation(baseOptions?: Apollo.MutationHookOptions<CreatePatientMutation, CreatePatientMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePatientMutation, CreatePatientMutationVariables>(CreatePatientDocument, options);\n      }\nexport type CreatePatientMutationHookResult = ReturnType<typeof useCreatePatientMutation>;\nexport type CreatePatientMutationResult = Apollo.MutationResult<CreatePatientMutation>;\nexport type CreatePatientMutationOptions = Apollo.BaseMutationOptions<CreatePatientMutation, CreatePatientMutationVariables>;\nexport const FindAllCountryCodesDocument = gql`\n    query findAllCountryCodes($page: Page) {\n  findAllCountryCodes(page: $page) {\n    id\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    codeDescTxt\n    codeShortDescTxt\n    effectiveFromTime\n    effectiveToTime\n    excludedTxt\n    keyInfoTxt\n    indentLevelNbr\n    isModifiableInd\n    parentIsCd\n    statusCd\n    statusTime\n    codeSetNm\n    seqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n  }\n}\n    `;\n\n/**\n * __useFindAllCountryCodesQuery__\n *\n * To run a query within a React component, call `useFindAllCountryCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllCountryCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllCountryCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllCountryCodesQuery(baseOptions?: Apollo.QueryHookOptions<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>(FindAllCountryCodesDocument, options);\n      }\nexport function useFindAllCountryCodesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>(FindAllCountryCodesDocument, options);\n        }\nexport type FindAllCountryCodesQueryHookResult = ReturnType<typeof useFindAllCountryCodesQuery>;\nexport type FindAllCountryCodesLazyQueryHookResult = ReturnType<typeof useFindAllCountryCodesLazyQuery>;\nexport type FindAllCountryCodesQueryResult = Apollo.QueryResult<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>;\nexport const FindAllJurisdictionsDocument = gql`\n    query findAllJurisdictions($page: Page) {\n  findAllJurisdictions(page: $page) {\n    id\n    typeCd\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    codeDescTxt\n    codeShortDescTxt\n    effectiveFromTime\n    effectiveToTime\n    indentLevelNbr\n    isModifiableInd\n    parentIsCd\n    stateDomainCd\n    statusCd\n    statusTime\n    codeSetNm\n    codeSeqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n    exportInd\n  }\n}\n    `;\n\n/**\n * __useFindAllJurisdictionsQuery__\n *\n * To run a query within a React component, call `useFindAllJurisdictionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllJurisdictionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllJurisdictionsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllJurisdictionsQuery(baseOptions?: Apollo.QueryHookOptions<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>(FindAllJurisdictionsDocument, options);\n      }\nexport function useFindAllJurisdictionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>(FindAllJurisdictionsDocument, options);\n        }\nexport type FindAllJurisdictionsQueryHookResult = ReturnType<typeof useFindAllJurisdictionsQuery>;\nexport type FindAllJurisdictionsLazyQueryHookResult = ReturnType<typeof useFindAllJurisdictionsLazyQuery>;\nexport type FindAllJurisdictionsQueryResult = Apollo.QueryResult<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>;\nexport const FindAllOrganizationsDocument = gql`\n    query findAllOrganizations($page: Page) {\n  findAllOrganizations(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n\n/**\n * __useFindAllOrganizationsQuery__\n *\n * To run a query within a React component, call `useFindAllOrganizationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllOrganizationsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllOrganizationsQuery(baseOptions?: Apollo.QueryHookOptions<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>(FindAllOrganizationsDocument, options);\n      }\nexport function useFindAllOrganizationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>(FindAllOrganizationsDocument, options);\n        }\nexport type FindAllOrganizationsQueryHookResult = ReturnType<typeof useFindAllOrganizationsQuery>;\nexport type FindAllOrganizationsLazyQueryHookResult = ReturnType<typeof useFindAllOrganizationsLazyQuery>;\nexport type FindAllOrganizationsQueryResult = Apollo.QueryResult<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>;\nexport const FindAllPatientsDocument = gql`\n    query findAllPatients($page: Page) {\n  findAllPatients(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindAllPatientsQuery__\n *\n * To run a query within a React component, call `useFindAllPatientsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPatientsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPatientsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllPatientsQuery(baseOptions?: Apollo.QueryHookOptions<FindAllPatientsQuery, FindAllPatientsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllPatientsQuery, FindAllPatientsQueryVariables>(FindAllPatientsDocument, options);\n      }\nexport function useFindAllPatientsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllPatientsQuery, FindAllPatientsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllPatientsQuery, FindAllPatientsQueryVariables>(FindAllPatientsDocument, options);\n        }\nexport type FindAllPatientsQueryHookResult = ReturnType<typeof useFindAllPatientsQuery>;\nexport type FindAllPatientsLazyQueryHookResult = ReturnType<typeof useFindAllPatientsLazyQuery>;\nexport type FindAllPatientsQueryResult = Apollo.QueryResult<FindAllPatientsQuery, FindAllPatientsQueryVariables>;\nexport const FindAllPlacesDocument = gql`\n    query findAllPlaces($page: Page) {\n  findAllPlaces(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n\n/**\n * __useFindAllPlacesQuery__\n *\n * To run a query within a React component, call `useFindAllPlacesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPlacesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPlacesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllPlacesQuery(baseOptions?: Apollo.QueryHookOptions<FindAllPlacesQuery, FindAllPlacesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllPlacesQuery, FindAllPlacesQueryVariables>(FindAllPlacesDocument, options);\n      }\nexport function useFindAllPlacesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllPlacesQuery, FindAllPlacesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllPlacesQuery, FindAllPlacesQueryVariables>(FindAllPlacesDocument, options);\n        }\nexport type FindAllPlacesQueryHookResult = ReturnType<typeof useFindAllPlacesQuery>;\nexport type FindAllPlacesLazyQueryHookResult = ReturnType<typeof useFindAllPlacesLazyQuery>;\nexport type FindAllPlacesQueryResult = Apollo.QueryResult<FindAllPlacesQuery, FindAllPlacesQueryVariables>;\nexport const FindAllStateCodesDocument = gql`\n    query findAllStateCodes($page: Page) {\n  findAllStateCodes(page: $page) {\n    id\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    stateNm\n    codeDescTxt\n    effectiveFromTime\n    effectiveToTime\n    excludedTxt\n    indentLevelNbr\n    isModifiableInd\n    keyInfoTxt\n    parentIsCd\n    statusCd\n    statusTime\n    codeSetNm\n    seqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n  }\n}\n    `;\n\n/**\n * __useFindAllStateCodesQuery__\n *\n * To run a query within a React component, call `useFindAllStateCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllStateCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllStateCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllStateCodesQuery(baseOptions?: Apollo.QueryHookOptions<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>(FindAllStateCodesDocument, options);\n      }\nexport function useFindAllStateCodesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>(FindAllStateCodesDocument, options);\n        }\nexport type FindAllStateCodesQueryHookResult = ReturnType<typeof useFindAllStateCodesQuery>;\nexport type FindAllStateCodesLazyQueryHookResult = ReturnType<typeof useFindAllStateCodesLazyQuery>;\nexport type FindAllStateCodesQueryResult = Apollo.QueryResult<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>;\nexport const FindOrganizationByIdDocument = gql`\n    query findOrganizationById($id: ID!) {\n  findOrganizationById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n\n/**\n * __useFindOrganizationByIdQuery__\n *\n * To run a query within a React component, call `useFindOrganizationByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindOrganizationByIdQuery(baseOptions: Apollo.QueryHookOptions<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>(FindOrganizationByIdDocument, options);\n      }\nexport function useFindOrganizationByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>(FindOrganizationByIdDocument, options);\n        }\nexport type FindOrganizationByIdQueryHookResult = ReturnType<typeof useFindOrganizationByIdQuery>;\nexport type FindOrganizationByIdLazyQueryHookResult = ReturnType<typeof useFindOrganizationByIdLazyQuery>;\nexport type FindOrganizationByIdQueryResult = Apollo.QueryResult<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>;\nexport const FindOrganizationsByFilterDocument = gql`\n    query findOrganizationsByFilter($filter: OrganizationFilter!, $page: Page) {\n  findOrganizationsByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n\n/**\n * __useFindOrganizationsByFilterQuery__\n *\n * To run a query within a React component, call `useFindOrganizationsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindOrganizationsByFilterQuery(baseOptions: Apollo.QueryHookOptions<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>(FindOrganizationsByFilterDocument, options);\n      }\nexport function useFindOrganizationsByFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>(FindOrganizationsByFilterDocument, options);\n        }\nexport type FindOrganizationsByFilterQueryHookResult = ReturnType<typeof useFindOrganizationsByFilterQuery>;\nexport type FindOrganizationsByFilterLazyQueryHookResult = ReturnType<typeof useFindOrganizationsByFilterLazyQuery>;\nexport type FindOrganizationsByFilterQueryResult = Apollo.QueryResult<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>;\nexport const FindPatientByIdDocument = gql`\n    query findPatientById($id: ID!) {\n  findPatientById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientByIdQuery__\n *\n * To run a query within a React component, call `useFindPatientByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindPatientByIdQuery(baseOptions: Apollo.QueryHookOptions<FindPatientByIdQuery, FindPatientByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientByIdQuery, FindPatientByIdQueryVariables>(FindPatientByIdDocument, options);\n      }\nexport function useFindPatientByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientByIdQuery, FindPatientByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientByIdQuery, FindPatientByIdQueryVariables>(FindPatientByIdDocument, options);\n        }\nexport type FindPatientByIdQueryHookResult = ReturnType<typeof useFindPatientByIdQuery>;\nexport type FindPatientByIdLazyQueryHookResult = ReturnType<typeof useFindPatientByIdLazyQuery>;\nexport type FindPatientByIdQueryResult = Apollo.QueryResult<FindPatientByIdQuery, FindPatientByIdQueryVariables>;\nexport const FindPatientsByEventDocument = gql`\n    query findPatientsByEvent($filter: EventFilter!, $page: Page) {\n  findPatientsByEvent(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientsByEventQuery__\n *\n * To run a query within a React component, call `useFindPatientsByEventQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByEventQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByEventQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPatientsByEventQuery(baseOptions: Apollo.QueryHookOptions<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>(FindPatientsByEventDocument, options);\n      }\nexport function useFindPatientsByEventLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>(FindPatientsByEventDocument, options);\n        }\nexport type FindPatientsByEventQueryHookResult = ReturnType<typeof useFindPatientsByEventQuery>;\nexport type FindPatientsByEventLazyQueryHookResult = ReturnType<typeof useFindPatientsByEventLazyQuery>;\nexport type FindPatientsByEventQueryResult = Apollo.QueryResult<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>;\nexport const FindPatientsByFilterDocument = gql`\n    query findPatientsByFilter($filter: PersonFilter!, $page: Page) {\n  findPatientsByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientsByFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPatientsByFilterQuery(baseOptions: Apollo.QueryHookOptions<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>(FindPatientsByFilterDocument, options);\n      }\nexport function useFindPatientsByFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>(FindPatientsByFilterDocument, options);\n        }\nexport type FindPatientsByFilterQueryHookResult = ReturnType<typeof useFindPatientsByFilterQuery>;\nexport type FindPatientsByFilterLazyQueryHookResult = ReturnType<typeof useFindPatientsByFilterLazyQuery>;\nexport type FindPatientsByFilterQueryResult = Apollo.QueryResult<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>;\nexport const FindPatientsByOrganizationFilterDocument = gql`\n    query findPatientsByOrganizationFilter($filter: OrganizationFilter!, $page: Page) {\n  findPatientsByOrganizationFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientsByOrganizationFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByOrganizationFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByOrganizationFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByOrganizationFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPatientsByOrganizationFilterQuery(baseOptions: Apollo.QueryHookOptions<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>(FindPatientsByOrganizationFilterDocument, options);\n      }\nexport function useFindPatientsByOrganizationFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>(FindPatientsByOrganizationFilterDocument, options);\n        }\nexport type FindPatientsByOrganizationFilterQueryHookResult = ReturnType<typeof useFindPatientsByOrganizationFilterQuery>;\nexport type FindPatientsByOrganizationFilterLazyQueryHookResult = ReturnType<typeof useFindPatientsByOrganizationFilterLazyQuery>;\nexport type FindPatientsByOrganizationFilterQueryResult = Apollo.QueryResult<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>;\nexport const FindPlaceByIdDocument = gql`\n    query findPlaceById($id: ID!) {\n  findPlaceById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n\n/**\n * __useFindPlaceByIdQuery__\n *\n * To run a query within a React component, call `useFindPlaceByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlaceByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlaceByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindPlaceByIdQuery(baseOptions: Apollo.QueryHookOptions<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>(FindPlaceByIdDocument, options);\n      }\nexport function useFindPlaceByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>(FindPlaceByIdDocument, options);\n        }\nexport type FindPlaceByIdQueryHookResult = ReturnType<typeof useFindPlaceByIdQuery>;\nexport type FindPlaceByIdLazyQueryHookResult = ReturnType<typeof useFindPlaceByIdLazyQuery>;\nexport type FindPlaceByIdQueryResult = Apollo.QueryResult<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>;\nexport const FindPlacesByFilterDocument = gql`\n    query findPlacesByFilter($filter: PlaceFilter!, $page: Page) {\n  findPlacesByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n\n/**\n * __useFindPlacesByFilterQuery__\n *\n * To run a query within a React component, call `useFindPlacesByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlacesByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlacesByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPlacesByFilterQuery(baseOptions: Apollo.QueryHookOptions<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>(FindPlacesByFilterDocument, options);\n      }\nexport function useFindPlacesByFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>(FindPlacesByFilterDocument, options);\n        }\nexport type FindPlacesByFilterQueryHookResult = ReturnType<typeof useFindPlacesByFilterQuery>;\nexport type FindPlacesByFilterLazyQueryHookResult = ReturnType<typeof useFindPlacesByFilterLazyQuery>;\nexport type FindPlacesByFilterQueryResult = Apollo.QueryResult<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAMA,MAAMC,cAAc,GAAG,EAAvB;AACA;;AAUA,WAAYC,UAAZ;;WAAYA,U;EAAAA,U;EAAAA,U;EAAAA,U;EAAAA,U;EAAAA,U;GAAAA,U,KAAAA,U;;AAqCZ,WAAYC,QAAZ;;WAAYA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAMZ,WAAYC,WAAZ;;WAAYA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAKZ,WAAYC,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAYZ,WAAYC,WAAZ;;WAAYA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAKZ,WAAYC,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAKZ,WAAYC,MAAZ;;WAAYA,M;EAAAA,M;EAAAA,M;EAAAA,M;GAAAA,M,KAAAA,M;;AAWZ,WAAYC,kBAAZ;;WAAYA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB;;AA6BZ,WAAYC,0BAAZ;;WAAYA,0B;EAAAA,0B;EAAAA,0B;EAAAA,0B;EAAAA,0B;EAAAA,0B;EAAAA,0B;GAAAA,0B,KAAAA,0B;;AASZ,WAAYC,wBAAZ;;WAAYA,wB;EAAAA,wB;EAAAA,wB;EAAAA,wB;EAAAA,wB;EAAAA,wB;GAAAA,wB,KAAAA,wB;;AA2BZ,WAAYC,mBAAZ;;WAAYA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAyCZ,WAAYC,qBAAZ;;WAAYA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB;;AAKZ,WAAYC,6BAAZ;;WAAYA,6B;EAAAA,6B;EAAAA,6B;EAAAA,6B;EAAAA,6B;EAAAA,6B;GAAAA,6B,KAAAA,6B;;AA0BZ,WAAYC,sBAAZ;;WAAYA,sB;EAAAA,sB;EAAAA,sB;GAAAA,sB,KAAAA,sB;;AAsBZ,WAAYC,kBAAZ;;WAAYA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAaZ,WAAYC,QAAZ;;WAAYA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAwNZ,WAAYC,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAiEZ,WAAYC,eAAZ;;WAAYA,e;EAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e;;AAMZ,WAAYC,gBAAZ;;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAmBZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAmGZ,WAAYC,IAAZ;;WAAYA,I;EAAAA,I;EAAAA,I;EAAAA,I;EAAAA,I;EAAAA,I;EAAAA,I;EAAAA,I;EAAAA,I;EAAAA,I;GAAAA,I,KAAAA,I;;AAYZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAKZ,WAAYC,mBAAZ;;WAAYA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAKZ,WAAYC,aAAZ;;WAAYA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a;;AA6BZ,WAAYC,MAAZ;;WAAYA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;GAAAA,M,KAAAA,M;;AAUZ,WAAYC,QAAZ;;WAAYA,Q;EAAAA,Q;EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAoHZ,OAAO,MAAMC,qBAAqB,GAAG7B,GAAI;AACzkHP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS8B,wBAAT,CAAkCC,WAAlC,EAAmI;EAAA;;EAClI,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACgC,WAAP,CAA0EJ,qBAA1E,EAAiGG,OAAjG,CAAP;AACD;;GAHSF,wB;UAED7B,MAAM,CAACgC,W;;;AAKtB,OAAO,MAAMC,2BAA2B,GAAGlC,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzBO;AA2BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmC,2BAAT,CAAqCJ,WAArC,EAAyI;EAAA;;EACxI,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAA6EF,2BAA7E,EAA0GF,OAA1G,CAAP;AACD;;IAHSG,2B;UAEDlC,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASC,+BAAT,CAAyCN,WAAzC,EAAiJ;EAAA;;EAC9I,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAAiFJ,2BAAjF,EAA8GF,OAA9G,CAAP;AACD;;IAHOK,+B;UAECpC,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMC,4BAA4B,GAAGvC,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA1BO;AA4BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwC,4BAAT,CAAsCT,WAAtC,EAA4I;EAAA;;EAC3I,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAA+EG,4BAA/E,EAA6GP,OAA7G,CAAP;AACD;;IAHSQ,4B;UAEDvC,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASK,gCAAT,CAA0CV,WAA1C,EAAoJ;EAAA;;EACjJ,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAAmFC,4BAAnF,EAAiHP,OAAjH,CAAP;AACD;;IAHOS,gC;UAECxC,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMI,4BAA4B,GAAG1C,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzCO;AA2CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2C,4BAAT,CAAsCZ,WAAtC,EAA4I;EAAA;;EAC3I,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAA+EM,4BAA/E,EAA6GV,OAA7G,CAAP;AACD;;IAHSW,4B;UAED1C,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASQ,gCAAT,CAA0Cb,WAA1C,EAAoJ;EAAA;;EACjJ,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAAmFI,4BAAnF,EAAiHV,OAAjH,CAAP;AACD;;IAHOY,gC;UAEC3C,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMO,uBAAuiHP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8C,uBAAT,CAAiCf,WAAjC,EAA6H;EAAA;;EAC5H,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAAqES,uBAArE,EAA8Fb,OAA9F,CAAP;AACD;;IAHSc,uB;UAED7C,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASW,2BAAT,CAAqChB,WAArC,EAAqI;EAAA;;EAClI,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAAyEO,uBAAzE,EAAkGb,OAAlG,CAAP;AACD;;IAHOe,2B;UAEC9C,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMU,qBAAqB,GAAGhD,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArCO;AAuCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiD,qBAAT,CAA+BlB,WAA/B,EAAuH;EAAA;;EACtH,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAAiEY,qBAAjE,EAAwFhB,OAAxF,CAAP;AACD;;KAHSiB,qB;UAEDhD,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASc,yBAAT,CAAmCnB,WAAnC,EAA+H;EAAA;;EAC5H,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAAqEU,qBAArE,EAA4FhB,OAA5F,CAAP;AACD;;KAHOkB,yB;UAECjD,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMa,yBAAyB,GAAGnD,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzBO;AA2BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoD,yBAAT,CAAmCrB,WAAnC,EAAmI;EAAA;;EAClI,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAAyEe,yBAAzE,EAAoGnB,OAApG,CAAP;AACD;;KAHSoB,yB;UAEDnD,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASiB,6BAAT,CAAuCtB,WAAvC,EAA2I;EAAA;;EACxI,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAA6Ea,yBAA7E,EAAwGnB,OAAxG,CAAP;AACD;;KAHOqB,6B;UAECpD,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMgB,4BAA4B,GAAGtD,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzCO;AA2CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuD,4BAAT,CAAsCxB,WAAtC,EAA2I;EAAA;;EAC1I,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAA+EkB,4BAA/E,EAA6GtB,OAA7G,CAAP;AACD;;KAHSuB,4B;UAEDtD,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASoB,gCAAT,CAA0CzB,WAA1C,EAAoJ;EAAA;;EACjJ,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAAmFgB,4BAAnF,EAAiHtB,OAAjH,CAAP;AACD;;KAHOwB,gC;UAECvD,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMmB,iCAAiC,GAAGzD,GAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzCO;AA2CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS0D,iCAAT,CAA2C3B,WAA3C,EAA0J;EAAA;;EACzJ,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAAyFqB,iCAAzF,EAA4HzB,OAA5H,CAAP;AACD;;KAHS0B,iC;UAEDzD,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAASuB,qCAAT,CAA+C5B,WAA/C,EAAmK;EAAA;;EAChK,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAA6FmB,iCAA7F,EAAgIzB,OAAhI,CAAP;AACD;;KAHO2B,qC;UAEC1D,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMsB,uBAAuiHP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6D,uBAAT,CAAiC9B,WAAjC,EAA4H;EAAA;;EAC3H,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAAqEwB,uBAArE,EAA8F5B,OAA9F,CAAP;AACD;;KAHS6B,uB;UAED5D,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAAS0B,2BAAT,CAAqC/B,WAArC,EAAqI;EAAA;;EAClI,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACqC,YAAP,CAAyEsB,uBAAzE,EAAkG5B,OAAlG,CAAP;AACD;;KAHO8B,2B;UAEC7D,MAAM,CAACqC,Y;;;AAKxB,OAAO,MAAMyB,2BAA2B,GAAG/D,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA/GO;AAiHP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgE,2BAAT,CAAqCjC,WAArC,EAAwI;EAAA;;EACvI,MAAMC,OAAO,GAAG,EAAC,GAAG9B,cAAJ;IAAoB,GAAG6B;EAAvB,CAAhB;EACA,OAAO9B,MAAM,CAACmC,QAAP,CAA6E2B,2BAA7E,EAA0G/B,OAA1G,CAAP;AACD;;KAHSgC,2B;UAED/D,MAAM,CAACmC,Q;;;AAEtB,OAAO,SAAS6B,+BAAT,CAAyClC,WAAzC,EAAiJ;EAAA;;EAC9I,MAAMC,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"},"metadata":{},"sourceType":"module"}