{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes; // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    var _iterator = _createForOfIteratorHelper(operationTypesNodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var operationType = _step.value;\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), {\n            nodes: operationType\n          }));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), {\n            nodes: [alreadyDefinedOperationType, operationType]\n          }));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","UniqueOperationTypesRule","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","_node$operationTypes","operationTypesNodes","operationTypes","operationType","operation","alreadyDefinedOperationType","reportError","nodes"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;EAChD,IAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;EACA,IAAMC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA9B;EACA,IAAMC,sBAAsB,GAAGL,MAAM,GACjC;IACEM,KAAK,EAAEN,MAAM,CAACO,YAAP,EADT;IAEEC,QAAQ,EAAER,MAAM,CAACS,eAAP,EAFZ;IAGEC,YAAY,EAAEV,MAAM,CAACW,mBAAP;EAHhB,CADiC,GAMjC,EANJ;EAOA,OAAO;IACLC,gBAAgB,EAAEC,mBADb;IAELC,eAAe,EAAED;EAFZ,CAAP;;EAKA,SAASA,mBAAT,CAA6BE,IAA7B,EAAmC;IACjC,IAAIC,oBAAJ,CADiC,CAGjC;;IAEA;;;IACA,IAAMC,mBAAmB,GACvB,CAACD,oBAAoB,GAAGD,IAAI,CAACG,cAA7B,MAAiD,IAAjD,IACAF,oBAAoB,KAAK,KAAK,CAD9B,GAEIA,oBAFJ,GAGI,EAJN;;IANiC,2CAYLC,mBAZK;IAAA;;IAAA;MAYjC,oDAAiD;QAAA,IAAtCE,aAAsC;QAC/C,IAAMC,SAAS,GAAGD,aAAa,CAACC,SAAhC;QACA,IAAMC,2BAA2B,GAAGnB,qBAAqB,CAACkB,SAAD,CAAzD;;QAEA,IAAIf,sBAAsB,CAACe,SAAD,CAA1B,EAAuC;UACrCrB,OAAO,CAACuB,WAAR,CACE,IAAIzB,YAAJ,oBACcuB,SADd,8DAEE;YACEG,KAAK,EAAEJ;UADT,CAFF,CADF;QAQD,CATD,MASO,IAAIE,2BAAJ,EAAiC;UACtCtB,OAAO,CAACuB,WAAR,CACE,IAAIzB,YAAJ,iCAC2BuB,SAD3B,uBAEE;YACEG,KAAK,EAAE,CAACF,2BAAD,EAA8BF,aAA9B;UADT,CAFF,CADF;QAQD,CATM,MASA;UACLjB,qBAAqB,CAACkB,SAAD,CAArB,GAAmCD,aAAnC;QACD;MACF;IArCgC;MAAA;IAAA;MAAA;IAAA;;IAuCjC,OAAO,KAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}