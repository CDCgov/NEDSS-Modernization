{"ast":null,"code":"import _toConsumableArray from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\n\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        var schema = context.getSchema();\n        var subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          var operationName = node.name ? node.name.value : null;\n          var variableValues = Object.create(null);\n          var document = context.getDocument();\n          var fragments = Object.create(null);\n\n          var _iterator = _createForOfIteratorHelper(document.definitions),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var definition = _step.value;\n\n              if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n                fragments[definition.name.value] = definition;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var fields = collectFields(schema, fragments, variableValues, subscriptionType, node.selectionSet);\n\n          if (fields.size > 1) {\n            var fieldSelectionLists = _toConsumableArray(fields.values());\n\n            var extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            var extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(new GraphQLError(operationName != null ? \"Subscription \\\"\".concat(operationName, \"\\\" must select only one top level field.\") : 'Anonymous Subscription must select only one top level field.', {\n              nodes: extraFieldSelections\n            }));\n          }\n\n          var _iterator2 = _createForOfIteratorHelper(fields.values()),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var fieldNodes = _step2.value;\n              var field = fieldNodes[0];\n              var fieldName = field.name.value;\n\n              if (fieldName.startsWith('__')) {\n                context.reportError(new GraphQLError(operationName != null ? \"Subscription \\\"\".concat(operationName, \"\\\" must not select an introspection top level field.\") : 'Anonymous Subscription must not select an introspection top level field.', {\n                  nodes: fieldNodes\n                }));\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","collectFields","SingleFieldSubscriptionsRule","context","OperationDefinition","node","operation","schema","getSchema","subscriptionType","getSubscriptionType","operationName","name","value","variableValues","Object","create","document","getDocument","fragments","definitions","definition","kind","FRAGMENT_DEFINITION","fields","selectionSet","size","fieldSelectionLists","values","extraFieldSelectionLists","slice","extraFieldSelections","flat","reportError","nodes","fieldNodes","field","fieldName","startsWith"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,4BAAT,CAAsCC,OAAtC,EAA+C;EACpD,OAAO;IACLC,mBADK,+BACeC,IADf,EACqB;MACxB,IAAIA,IAAI,CAACC,SAAL,KAAmB,cAAvB,EAAuC;QACrC,IAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAf;QACA,IAAMC,gBAAgB,GAAGF,MAAM,CAACG,mBAAP,EAAzB;;QAEA,IAAID,gBAAJ,EAAsB;UACpB,IAAME,aAAa,GAAGN,IAAI,CAACO,IAAL,GAAYP,IAAI,CAACO,IAAL,CAAUC,KAAtB,GAA8B,IAApD;UACA,IAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;UACA,IAAMC,QAAQ,GAAGd,OAAO,CAACe,WAAR,EAAjB;UACA,IAAMC,SAAS,GAAGJ,MAAM,CAACC,MAAP,CAAc,IAAd,CAAlB;;UAJoB,2CAMKC,QAAQ,CAACG,WANd;UAAA;;UAAA;YAMpB,oDAA+C;cAAA,IAApCC,UAAoC;;cAC7C,IAAIA,UAAU,CAACC,IAAX,KAAoBtB,IAAI,CAACuB,mBAA7B,EAAkD;gBAChDJ,SAAS,CAACE,UAAU,CAACT,IAAX,CAAgBC,KAAjB,CAAT,GAAmCQ,UAAnC;cACD;YACF;UAVmB;YAAA;UAAA;YAAA;UAAA;;UAYpB,IAAMG,MAAM,GAAGvB,aAAa,CAC1BM,MAD0B,EAE1BY,SAF0B,EAG1BL,cAH0B,EAI1BL,gBAJ0B,EAK1BJ,IAAI,CAACoB,YALqB,CAA5B;;UAQA,IAAID,MAAM,CAACE,IAAP,GAAc,CAAlB,EAAqB;YACnB,IAAMC,mBAAmB,sBAAOH,MAAM,CAACI,MAAP,EAAP,CAAzB;;YACA,IAAMC,wBAAwB,GAAGF,mBAAmB,CAACG,KAApB,CAA0B,CAA1B,CAAjC;YACA,IAAMC,oBAAoB,GAAGF,wBAAwB,CAACG,IAAzB,EAA7B;YACA7B,OAAO,CAAC8B,WAAR,CACE,IAAIlC,YAAJ,CACEY,aAAa,IAAI,IAAjB,4BACqBA,aADrB,gDAEI,8DAHN,EAIE;cACEuB,KAAK,EAAEH;YADT,CAJF,CADF;UAUD;;UAlCmB,4CAoCKP,MAAM,CAACI,MAAP,EApCL;UAAA;;UAAA;YAoCpB,uDAA0C;cAAA,IAA/BO,UAA+B;cACxC,IAAMC,KAAK,GAAGD,UAAU,CAAC,CAAD,CAAxB;cACA,IAAME,SAAS,GAAGD,KAAK,CAACxB,IAAN,CAAWC,KAA7B;;cAEA,IAAIwB,SAAS,CAACC,UAAV,CAAqB,IAArB,CAAJ,EAAgC;gBAC9BnC,OAAO,CAAC8B,WAAR,CACE,IAAIlC,YAAJ,CACEY,aAAa,IAAI,IAAjB,4BACqBA,aADrB,4DAEI,0EAHN,EAIE;kBACEuB,KAAK,EAAEC;gBADT,CAJF,CADF;cAUD;YACF;UApDmB;YAAA;UAAA;YAAA;UAAA;QAqDrB;MACF;IACF;EA7DI,CAAP;AA+DD"},"metadata":{},"sourceType":"module"}