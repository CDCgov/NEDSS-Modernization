{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\n\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\n\nvar Concast = function (_super) {\n  __extends(Concast, _super);\n\n  function Concast(sources) {\n    var _this = _super.call(this, function (observer) {\n      _this.addObserver(observer);\n\n      return function () {\n        return _this.removeObserver(observer);\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.addCount = 0;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    _this.handlers = {\n      next: function next(result) {\n        if (_this.sub !== null) {\n          _this.latest = [\"next\", result];\n          iterateObserversSafely(_this.observers, \"next\", result);\n        }\n      },\n      error: function error(_error) {\n        var sub = _this.sub;\n\n        if (sub !== null) {\n          if (sub) setTimeout(function () {\n            return sub.unsubscribe();\n          });\n          _this.sub = null;\n          _this.latest = [\"error\", _error];\n\n          _this.reject(_error);\n\n          iterateObserversSafely(_this.observers, \"error\", _error);\n        }\n      },\n      complete: function complete() {\n        var sub = _this.sub;\n\n        if (sub !== null) {\n          var value = _this.sources.shift();\n\n          if (!value) {\n            if (sub) setTimeout(function () {\n              return sub.unsubscribe();\n            });\n            _this.sub = null;\n\n            if (_this.latest && _this.latest[0] === \"next\") {\n              _this.resolve(_this.latest[1]);\n            } else {\n              _this.resolve();\n            }\n\n            iterateObserversSafely(_this.observers, \"complete\");\n          } else if (isPromiseLike(value)) {\n            value.then(function (obs) {\n              return _this.sub = obs.subscribe(_this.handlers);\n            });\n          } else {\n            _this.sub = value.subscribe(_this.handlers);\n          }\n        }\n      }\n    };\n\n    _this.cancel = function (reason) {\n      _this.reject(reason);\n\n      _this.sources = [];\n\n      _this.handlers.complete();\n    };\n\n    _this.promise.catch(function (_) {});\n\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(function (iterable) {\n        return _this.start(iterable);\n      }, _this.handlers.error);\n    } else {\n      _this.start(sources);\n    }\n\n    return _this;\n  }\n\n  Concast.prototype.start = function (sources) {\n    if (this.sub !== void 0) return;\n    this.sources = Array.from(sources);\n    this.handlers.complete();\n  };\n\n  Concast.prototype.deliverLastMessage = function (observer) {\n    if (this.latest) {\n      var nextOrError = this.latest[0];\n      var method = observer[nextOrError];\n\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n\n  Concast.prototype.addObserver = function (observer) {\n    if (!this.observers.has(observer)) {\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  };\n\n  Concast.prototype.removeObserver = function (observer, quietly) {\n    if (this.observers.delete(observer) && --this.addCount < 1 && !quietly) {\n      this.handlers.complete();\n    }\n  };\n\n  Concast.prototype.cleanup = function (callback) {\n    var _this = this;\n\n    var called = false;\n\n    var once = function once() {\n      if (!called) {\n        called = true;\n\n        _this.observers.delete(observer);\n\n        callback();\n      }\n    };\n\n    var observer = {\n      next: once,\n      error: once,\n      complete: once\n    };\n    var count = this.addCount;\n    this.addObserver(observer);\n    this.addCount = count;\n  };\n\n  return Concast;\n}(Observable);\n\nexport { Concast };\nfixObservableSubclass(Concast);","map":{"version":3,"mappings":"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","names":["Observable","iterateObserversSafely","fixObservableSubclass","isPromiseLike","value","then","__extends","sources","_super","_this","addObserver","observer","removeObserver","Set","Promise","resolve","reject","next","result","sub","latest","observers","error","setTimeout","unsubscribe","complete","shift","obs","subscribe","handlers","reason","promise","catch","start","iterable","Concast","Array","from","nextOrError","method","call","has","deliverLastMessage","add","addCount","quietly","delete","callback","called","once","count"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/utilities/observables/Concast.ts"],"sourcesContent":["import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\nexport type ConcastSourcesArray<T> = Array<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed\n  // each time this.handlers.complete is called.\n  private sources: Source<T>[];\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  // Note: cleanup observers do not count towards this total.\n  private addCount = 0;\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  }\n\n  public removeObserver(\n    observer: Observer<T>,\n    quietly?: boolean,\n  ) {\n    if (this.observers.delete(observer) &&\n        --this.addCount < 1 &&\n        !quietly) {\n      // In case there are still any cleanup observers in this.observers, and no\n      // error or completion has been broadcast yet, make sure those observers\n      // have a chance to run and then remove themselves from this.observers.\n      this.handlers.complete();\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\" | \"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) setTimeout(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      const { sub } = this;\n      if (sub !== null) {\n        const value = this.sources.shift();\n        if (!value) {\n          if (sub) setTimeout(() => sub.unsubscribe());\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  public cleanup(callback: () => any) {\n    let called = false;\n    const once = () => {\n      if (!called) {\n        called = true;\n        // Removing a cleanup observer should not unsubscribe from the\n        // underlying Observable, so the only removeObserver behavior we\n        // need here is to delete observer from this.observers.\n        this.observers.delete(observer);\n        callback();\n      }\n    }\n    const observer = {\n      next: once,\n      error: once,\n      complete: once,\n    };\n    const count = this.addCount;\n    this.addObserver(observer);\n    // Normally addObserver increments this.addCount, but we can \"hide\"\n    // cleanup observers by restoring this.addCount to its previous value\n    // after adding any cleanup observer.\n    this.addCount = count;\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n"]},"metadata":{},"sourceType":"module"}