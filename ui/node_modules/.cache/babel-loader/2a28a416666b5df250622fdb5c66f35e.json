{"ast":null,"code":"import { validateFieldsNatively as e, toNestError as t } from \"@hookform/resolvers\";\nimport { appendErrors as r } from \"react-hook-form\";\n\nvar o = function o(_o, n, a) {\n  return void 0 === n && (n = {}), void 0 === a && (a = {}), function (s, i, c) {\n    try {\n      return Promise.resolve(function (t, r) {\n        try {\n          var u = (n.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(_o[\"sync\" === a.mode ? \"validateSync\" : \"validate\"](s, Object.assign({\n            abortEarly: !1\n          }, n, {\n            context: i\n          }))).then(function (t) {\n            return c.shouldUseNativeValidation && e({}, c), {\n              values: a.rawValues ? s : t,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return r(e);\n        }\n\n        return u && u.then ? u.then(void 0, r) : u;\n      }(0, function (e) {\n        if (!e.inner) throw e;\n        return {\n          values: {},\n          errors: t((o = e, n = !c.shouldUseNativeValidation && \"all\" === c.criteriaMode, (o.inner || []).reduce(function (e, t) {\n            if (e[t.path] || (e[t.path] = {\n              message: t.message,\n              type: t.type\n            }), n) {\n              var o = e[t.path].types,\n                  a = o && o[t.type];\n              e[t.path] = r(t.path, n, e, t.type, a ? [].concat(a, t.message) : t.message);\n            }\n\n            return e;\n          }, {})), c)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\n\nexport { o as yupResolver };","map":{"version":3,"mappings":";;;AASA,IA+BaA,IACX,WAACC,EAAD,EAASC,CAAT,EAA6BC,CAA7B,EAA6BA;EAAAA,kBAApBD,CAAoBC,KAApBD,IAAgB,EAAIC,GAAJ,WAAIA,CAAJ,KAAIA,IAAkB,EAAtB,CAAIA,EAAkB,UACxCC,CADwC,EAChCC,CADgC,EACvBC,CADuB,EACvBA;IAAAA;MAAAA;QAAAA;UAAAA,SAEhBJ,EAAcG,OAAdH,IAAkD,kBAAzBK,QAAQC,GAARD,CAAYE,QAArCP,IAEFQ,QAAQC,IAARD,CACE,+FADFA,CAFER,EAGAU,gBAIiBX,GACM,WAAzBE,EAAgBU,IAAS,GAAS,cAAT,GAA0B,UADhCZ,EAGnBG,CAHmBH,EAInBa,OAAOC,MAAPD,CAAc;YAAEE,aAAY;UAAd,CAAdF,EAAqCZ,CAArCY,EAAoD;YAAET;UAAF,CAApDS,CAJmBb,CAJjB,EAQoDI,IARpD,CAQoDA,UAJlDY,CAIkDZ,EAJlDY;YASN,OAFAX,EAAQY,yBAARZ,IAAqCa,EAAuB,EAAvBA,EAA2Bb,CAA3Ba,CAArCb,EAEO;cACLF,QAAQD,EAAgBiB,SAAhBjB,GAA4BC,CAA5BD,GAAqCc,CADxC;cAELI,QAAQ;YAFH,CAAP;UAEU,CAfN,CALgBf;QAoBV,CApBUA,CAoBV;UAAA;QAAA;;QAAA;MAAA,CApBUA,CAoBV,CApBUA,EAoBV,UAEHgB,CAFG,EAEHA;QACP,KAAKA,EAAEC,KAAP,EACE,MAAMD,CAAN;QAGF,OAAO;UACLlB,QAAQ,EADH;UAELiB,QAAQG,GA7DdC,IA+DUH,CA/DVG,EACAC,KA+DWpB,EAAQY,yBA/DnBQ,IAgEqC,UAAzBpB,EAAQqB,YAjEpBF,EAiEoBE,CA9DZF,EAAMF,KAANE,IAAe,EA8DHE,EA9DOC,MA8DPD,CA7DlB,UAACE,CAAD,EAAWJ,CAAX,EAAWA;YAKT,IAJKI,EAASJ,EAAMK,IAAfD,MACHA,EAASJ,EAAMK,IAAfD,IAAwB;cAAEE,SAASN,EAAMM,OAAjB;cAA0BC,MAAMP,EAAMO;YAAtC,CADrBH,GAIDH,CAAJ,EAA8B;cAC5B,IAAMO,IAAQJ,EAASJ,EAAMK,IAAfD,EAAsBI,KAApC;cAAA,IACMC,IAAWD,KAASA,EAAMR,EAAMO,IAAZC,CAD1B;cAGAJ,EAASJ,EAAMK,IAAfD,IAAwBM,EACtBV,EAAMK,IADgBK,EAEtBT,CAFsBS,EAGtBN,CAHsBM,EAItBV,EAAMO,IAJgBG,EAKtBD,IACK,GAAgBE,MAAhB,CAAuBF,CAAvB,EAA6CT,EAAMM,OAAnD,CADLG,GAEIT,EAAMM,OAPYI,CAAxBN;YAWF;;YAAA,OAAOA,CAAP;UAAOA,CAyCSF,EAvClB,EAuCkBA,CAJNH,GAMNlB,CANMkB;QAFH,CAAP;QA5DmB,IACvBC,CADuB,EAEvBC,CAFuB;MAEvBA,CA+BwBpB;IADxB,CACwBA,CADxB;MAAA;IAAA;EAAA,CAA6BH;AAA7B,CAhCF;;AAgCE","names":["yupResolver","schema","schemaOptions","resolverOptions","values","context","options","process","env","NODE_ENV","console","warn","Promise","mode","Object","assign","abortEarly","result","shouldUseNativeValidation","validateFieldsNatively","rawValues","errors","e","inner","toNestError","error","validateAllFieldCriteria","criteriaMode","reduce","previous","path","message","type","types","messages","appendErrors","concat"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}