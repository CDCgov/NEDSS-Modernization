{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(new GraphQLError(`Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`, {\n              nodes: selectionSet\n            }));\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(new GraphQLError(`Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`, {\n            nodes: node\n          }));\n        }\n      }\n    }\n\n  };\n}","map":{"version":3,"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError","nodes"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,2BAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;EACvC,OAAO;IACLC,KAAK,CAACC,IAAD,EAAO;MACV,MAAMC,IAAI,GAAGH,OAAO,CAACI,OAAR,EAAb;MACA,MAAMC,YAAY,GAAGH,IAAI,CAACG,YAA1B;;MAEA,IAAIF,IAAJ,EAAU;QACR,IAAIL,UAAU,CAACD,YAAY,CAACM,IAAD,CAAb,CAAd,EAAoC;UAClC,IAAIE,YAAJ,EAAkB;YAChB,MAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA5B;YACA,MAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAD,CAAvB;YACAH,OAAO,CAACU,WAAR,CACE,IAAId,YAAJ,CACG,UAASU,SAAU,2CAA0CG,OAAQ,qBADxE,EAEE;cACEE,KAAK,EAAEN;YADT,CAFF,CADF;UAQD;QACF,CAbD,MAaO,IAAI,CAACA,YAAL,EAAmB;UACxB,MAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA5B;UACA,MAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAD,CAAvB;UACAH,OAAO,CAACU,WAAR,CACE,IAAId,YAAJ,CACG,UAASU,SAAU,cAAaG,OAAQ,uDAAsDH,SAAU,YAD3G,EAEE;YACEK,KAAK,EAAET;UADT,CAFF,CADF;QAQD;MACF;IACF;;EAhCI,CAAP;AAkCD"},"metadata":{},"sourceType":"module"}