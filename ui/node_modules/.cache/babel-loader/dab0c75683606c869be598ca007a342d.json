{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { isInputObjectType, isLeafType, isListType, isNonNullType } from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n\n      var _iterator = _createForOfIteratorHelper(valueNode.values),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var itemNode = _step.value;\n\n          if (isMissingVariable(itemNode, variables)) {\n            // If an array contains a missing variable, it is either coerced to\n            // null or if the item type is non-null, it considered invalid.\n            if (isNonNullType(itemType)) {\n              return; // Invalid: intentionally return no value.\n            }\n\n            coercedValues.push(null);\n          } else {\n            var itemValue = valueFromAST(itemNode, itemType, variables);\n\n            if (itemValue === undefined) {\n              return; // Invalid: intentionally return no value.\n            }\n\n            coercedValues.push(itemValue);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n\n    for (var _i = 0, _Object$values = Object.values(type.getFields()); _i < _Object$values.length; _i++) {\n      var field = _Object$values[_i];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}","map":{"version":3,"names":["inspect","invariant","keyMap","Kind","isInputObjectType","isLeafType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","VARIABLE","variableName","name","value","undefined","variableValue","NULL","ofType","itemType","LIST","coercedValues","values","itemNode","isMissingVariable","push","itemValue","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","getFields","fieldNode","defaultValue","fieldValue","result","parseLiteral","_error"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/valueFromAST.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}