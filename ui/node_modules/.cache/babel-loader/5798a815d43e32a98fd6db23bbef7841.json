{"ast":null,"code":"import global from \"./global.js\";\nimport { maybe } from \"./maybe.js\";\nvar __ = \"__\";\nvar GLOBAL_KEY = [__, __].join(\"DEV\");\n\nfunction getDEV() {\n  try {\n    return Boolean(__DEV__);\n  } catch (_a) {\n    Object.defineProperty(global, GLOBAL_KEY, {\n      value: maybe(function () {\n        return process.env.NODE_ENV;\n      }) !== \"production\",\n      enumerable: false,\n      configurable: true,\n      writable: true\n    });\n    return global[GLOBAL_KEY];\n  }\n}\n\nexport default getDEV();","map":{"version":3,"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,KAAT,QAAsB,YAAtB;AAKA,IAAMC,EAAE,GAAG,IAAX;AACA,IAAMC,UAAU,GAAG,CAACD,EAAD,EAAKA,EAAL,EAASE,IAAT,CAAc,KAAd,CAAnB;;AAEA,SAASC,MAAT,GAAe;EACb,IAAI;IACF,OAAOC,OAAO,CAACC,OAAD,CAAd;EACD,CAFD,CAEE,WAAM;IACNC,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BG,UAA9B,EAA0C;MAIxCO,KAAK,EAAET,KAAK,CAAC;QAAM,cAAO,CAACU,GAAR,CAAYC,QAAZ;MAAoB,CAA3B,CAAL,KAAsC,YAJL;MAKxCC,UAAU,EAAE,KAL4B;MAMxCC,YAAY,EAAE,IAN0B;MAOxCC,QAAQ,EAAE;IAP8B,CAA1C;IAWA,OAAQf,MAAc,CAACG,UAAD,CAAtB;EACD;AACF;;AAED,eAAeE,MAAM,EAArB","names":["global","maybe","__","GLOBAL_KEY","join","getDEV","Boolean","__DEV__","Object","defineProperty","value","env","NODE_ENV","enumerable","configurable","writable"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/utilities/globals/DEV.ts"],"sourcesContent":["import global from \"./global\";\nimport { maybe } from \"./maybe\";\n\n// To keep string-based find/replace minifiers from messing with __DEV__ inside\n// string literals or properties like global.__DEV__, we construct the \"__DEV__\"\n// string in a roundabout way that won't be altered by find/replace strategies.\nconst __ = \"__\";\nconst GLOBAL_KEY = [__, __].join(\"DEV\");\n\nfunction getDEV() {\n  try {\n    return Boolean(__DEV__);\n  } catch {\n    Object.defineProperty(global, GLOBAL_KEY, {\n      // In a buildless browser environment, maybe(() => process.env.NODE_ENV)\n      // evaluates as undefined, so __DEV__ becomes true by default, but can be\n      // initialized to false instead by a script/module that runs earlier.\n      value: maybe(() => process.env.NODE_ENV) !== \"production\",\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    });\n    // Using computed property access rather than global.__DEV__ here prevents\n    // string-based find/replace strategies from munging this to global.false:\n    return (global as any)[GLOBAL_KEY];\n  }\n}\n\nexport default getDEV();\n"]},"metadata":{},"sourceType":"module"}