{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\n\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      var _iterator = _createForOfIteratorHelper(node.definitions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var definition = _step.value;\n\n          if (!isExecutableDefinitionNode(definition)) {\n            var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n            context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), {\n              nodes: definition\n            }));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","isExecutableDefinitionNode","ExecutableDefinitionsRule","context","Document","node","definitions","definition","defName","kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","name","value","reportError","nodes"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,OAAnC,EAA4C;EACjD,OAAO;IACLC,QADK,oBACIC,IADJ,EACU;MAAA,2CACYA,IAAI,CAACC,WADjB;MAAA;;MAAA;QACb,oDAA2C;UAAA,IAAhCC,UAAgC;;UACzC,IAAI,CAACN,0BAA0B,CAACM,UAAD,CAA/B,EAA6C;YAC3C,IAAMC,OAAO,GACXD,UAAU,CAACE,IAAX,KAAoBT,IAAI,CAACU,iBAAzB,IACAH,UAAU,CAACE,IAAX,KAAoBT,IAAI,CAACW,gBADzB,GAEI,QAFJ,GAGI,MAAMJ,UAAU,CAACK,IAAX,CAAgBC,KAAtB,GAA8B,GAJpC;YAKAV,OAAO,CAACW,WAAR,CACE,IAAIf,YAAJ,eAAwBS,OAAxB,qCAAiE;cAC/DO,KAAK,EAAER;YADwD,CAAjE,CADF;UAKD;QACF;MAdY;QAAA;MAAA;QAAA;MAAA;;MAgBb,OAAO,KAAP;IACD;EAlBI,CAAP;AAoBD"},"metadata":{},"sourceType":"module"}