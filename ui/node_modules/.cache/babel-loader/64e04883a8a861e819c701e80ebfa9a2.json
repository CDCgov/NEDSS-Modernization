{"ast":null,"code":"import _toConsumableArray from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isAbstractType, isInterfaceType, isObjectType } from '../../type/definition.mjs';\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\n\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n\n          context.reportError(new GraphQLError(\"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type.name, \"\\\".\") + suggestion, {\n            nodes: node\n          }));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  var suggestedTypes = new Set();\n  var usageCount = Object.create(null);\n\n  var _iterator = _createForOfIteratorHelper(schema.getPossibleTypes(type)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var possibleType = _step.value;\n\n      if (!possibleType.getFields()[fieldName]) {\n        continue;\n      } // This object type defines this field.\n\n\n      suggestedTypes.add(possibleType);\n      usageCount[possibleType.name] = 1;\n\n      var _iterator2 = _createForOfIteratorHelper(possibleType.getInterfaces()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var possibleInterface = _step2.value;\n\n          var _usageCount$possibleI;\n\n          if (!possibleInterface.getFields()[fieldName]) {\n            continue;\n          } // This interface type defines this field.\n\n\n          suggestedTypes.add(possibleInterface);\n          usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return _toConsumableArray(suggestedTypes).sort(function (typeA, typeB) {\n    // Suggest both interface and object types based on how common they are.\n    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n\n    return naturalCompare(typeA.name, typeB.name);\n  }).map(function (x) {\n    return x.name;\n  });\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}","map":{"version":3,"names":["didYouMean","naturalCompare","suggestionList","GraphQLError","isAbstractType","isInterfaceType","isObjectType","FieldsOnCorrectTypeRule","context","Field","node","type","getParentType","fieldDef","getFieldDef","schema","getSchema","fieldName","name","value","suggestion","getSuggestedTypeNames","getSuggestedFieldNames","reportError","nodes","suggestedTypes","Set","usageCount","Object","create","getPossibleTypes","possibleType","getFields","add","getInterfaces","possibleInterface","_usageCount$possibleI","sort","typeA","typeB","usageCountDiff","isSubType","map","x","possibleFieldNames","keys"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}