{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { storeKeyNameFromField, argumentsObjectFromField, isReference, getStoreKeyName, isNonNullObject, stringifyForDisplay } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName, storeValueIsStoreObject, selectionSetMatchesResult, TypeOrFieldNameRegExp, defaultDataIdFromObject, isArray } from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier } from \"./key-extractor.js\";\ngetStoreKeyName.setStringify(canonicalStringify);\n\nfunction argsFromFieldSpecifier(spec) {\n  return spec.args !== void 0 ? spec.args : spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nvar nullKeyFieldsFn = function () {\n  return void 0;\n};\n\nvar simpleKeyArgsFn = function (_args, context) {\n  return context.fieldName;\n};\n\nvar mergeTrueFn = function (existing, incoming, _a) {\n  var mergeObjects = _a.mergeObjects;\n  return mergeObjects(existing, incoming);\n};\n\nvar mergeFalseFn = function (_, incoming) {\n  return incoming;\n};\n\nvar Policies = function () {\n  function Policies(config) {\n    this.config = config;\n    this.typePolicies = Object.create(null);\n    this.toBeAdded = Object.create(null);\n    this.supertypeMap = new Map();\n    this.fuzzySubtypes = new Map();\n    this.rootIdsByTypename = Object.create(null);\n    this.rootTypenamesById = Object.create(null);\n    this.usingPossibleTypes = false;\n    this.config = __assign({\n      dataIdFromObject: defaultDataIdFromObject\n    }, config);\n    this.cache = this.config.cache;\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  Policies.prototype.identify = function (object, partialContext) {\n    var _a;\n\n    var policies = this;\n    var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    var storeObject = partialContext && partialContext.storeObject || object;\n\n    var context = __assign(__assign({}, partialContext), {\n      typename: typename,\n      storeObject: storeObject,\n      readField: partialContext && partialContext.readField || function () {\n        var options = normalizeReadFieldOptions(arguments, storeObject);\n        return policies.readField(options, {\n          store: policies.cache[\"data\"],\n          variables: options.variables\n        });\n      }\n    });\n\n    var id;\n    var policy = typename && this.getTypePolicy(typename);\n    var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n\n    while (keyFn) {\n      var specifierOrId = keyFn(object, context);\n\n      if (isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  };\n\n  Policies.prototype.addTypePolicies = function (typePolicies) {\n    var _this = this;\n\n    Object.keys(typePolicies).forEach(function (typename) {\n      var _a = typePolicies[typename],\n          queryType = _a.queryType,\n          mutationType = _a.mutationType,\n          subscriptionType = _a.subscriptionType,\n          incoming = __rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n\n      if (queryType) _this.setRootTypename(\"Query\", typename);\n      if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(_this.toBeAdded, typename)) {\n        _this.toBeAdded[typename].push(incoming);\n      } else {\n        _this.toBeAdded[typename] = [incoming];\n      }\n    });\n  };\n\n  Policies.prototype.updateTypePolicy = function (typename, incoming) {\n    var _this = this;\n\n    var existing = this.getTypePolicy(typename);\n    var keyFields = incoming.keyFields,\n        fields = incoming.fields;\n\n    function setMerge(existing, merge) {\n      existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n    }\n\n    setMerge(existing, incoming.merge);\n    existing.keyFn = keyFields === false ? nullKeyFieldsFn : isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(function (fieldName) {\n        var existing = _this.getFieldPolicy(typename, fieldName, true);\n\n        var incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          var keyArgs = incoming.keyArgs,\n              read = incoming.read,\n              merge = incoming.merge;\n          existing.keyFn = keyArgs === false ? simpleKeyArgsFn : isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  };\n\n  Policies.prototype.setRootTypename = function (which, typename) {\n    if (typename === void 0) {\n      typename = which;\n    }\n\n    var rootId = \"ROOT_\" + which.toUpperCase();\n    var old = this.rootTypenamesById[rootId];\n\n    if (typename !== old) {\n      __DEV__ ? invariant(!old || old === which, \"Cannot change root \".concat(which, \" __typename more than once\")) : invariant(!old || old === which, 3);\n      if (old) delete this.rootIdsByTypename[old];\n      this.rootIdsByTypename[typename] = rootId;\n      this.rootTypenamesById[rootId] = typename;\n    }\n  };\n\n  Policies.prototype.addPossibleTypes = function (possibleTypes) {\n    var _this = this;\n\n    this.usingPossibleTypes = true;\n    Object.keys(possibleTypes).forEach(function (supertype) {\n      _this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(function (subtype) {\n        _this.getSupertypeSet(subtype, true).add(supertype);\n\n        var match = subtype.match(TypeOrFieldNameRegExp);\n\n        if (!match || match[0] !== subtype) {\n          _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  };\n\n  Policies.prototype.getTypePolicy = function (typename) {\n    var _this = this;\n\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      var policy_1 = this.typePolicies[typename] = Object.create(null);\n      policy_1.fields = Object.create(null);\n      var supertypes = this.supertypeMap.get(typename);\n\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(function (supertype) {\n          var _a = _this.getTypePolicy(supertype),\n              fields = _a.fields,\n              rest = __rest(_a, [\"fields\"]);\n\n          Object.assign(policy_1, rest);\n          Object.assign(policy_1.fields, fields);\n        });\n      }\n    }\n\n    var inbox = this.toBeAdded[typename];\n\n    if (inbox && inbox.length) {\n      inbox.splice(0).forEach(function (policy) {\n        _this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  };\n\n  Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n    if (typename) {\n      var fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n    }\n  };\n\n  Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n    var supertypeSet = this.supertypeMap.get(subtype);\n\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set());\n    }\n\n    return supertypeSet;\n  };\n\n  Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n    var _this = this;\n\n    if (!fragment.typeCondition) return true;\n    if (!typename) return false;\n    var supertype = fragment.typeCondition.name.value;\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n      var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n      var workQueue_1 = [typenameSupertypeSet];\n\n      var maybeEnqueue_1 = function (subtype) {\n        var supertypeSet = _this.getSupertypeSet(subtype, false);\n\n        if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n          workQueue_1.push(supertypeSet);\n        }\n      };\n\n      var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      var checkingFuzzySubtypes = false;\n\n      for (var i = 0; i < workQueue_1.length; ++i) {\n        var supertypeSet = workQueue_1[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              __DEV__ && invariant.warn(\"Inferring subtype \".concat(typename, \" of supertype \").concat(supertype));\n            }\n\n            typenameSupertypeSet.add(supertype);\n          }\n\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue_1);\n\n        if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n          this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n            var match = typename.match(regExp);\n\n            if (match && match[0] === typename) {\n              maybeEnqueue_1(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  };\n\n  Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  };\n\n  Policies.prototype.getStoreFieldName = function (fieldSpec) {\n    var typename = fieldSpec.typename,\n        fieldName = fieldSpec.fieldName;\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    var storeFieldName;\n    var keyFn = policy && policy.keyFn;\n\n    if (keyFn && typename) {\n      var context = {\n        typename: typename,\n        fieldName: fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables\n      };\n      var args = argsFromFieldSpecifier(fieldSpec);\n\n      while (keyFn) {\n        var specifierOrString = keyFn(args, context);\n\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n  };\n\n  Policies.prototype.readField = function (options, context) {\n    var objectOrReference = options.from;\n    if (!objectOrReference) return;\n    var nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    var storeFieldName = this.getStoreFieldName(options);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n    var policy = this.getFieldPolicy(options.typename, fieldName, false);\n    var read = policy && policy.read;\n\n    if (read) {\n      var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n      return cacheSlot.withValue(this.cache, read, [existing, readOptions]);\n    }\n\n    return existing;\n  };\n\n  Policies.prototype.getReadFunction = function (typename, fieldName) {\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    return policy && policy.read;\n  };\n\n  Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n    var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n    var merge = policy && policy.merge;\n\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n\n    return merge;\n  };\n\n  Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n    var field = _a.field,\n        typename = _a.typename,\n        merge = _a.merge;\n\n    if (merge === mergeTrueFn) {\n      return makeMergeObjectsFunction(context.store)(existing, incoming);\n    }\n\n    if (merge === mergeFalseFn) {\n      return incoming;\n    }\n\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, {\n      typename: typename,\n      fieldName: field.name.value,\n      field: field,\n      variables: context.variables\n    }, context, storage || Object.create(null)));\n  };\n\n  return Policies;\n}();\n\nexport { Policies };\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n  var storeFieldName = policies.getStoreFieldName(fieldSpec);\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var variables = fieldSpec.variables || context.variables;\n  var _a = context.store,\n      toReference = _a.toReference,\n      canRead = _a.canRead;\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName: fieldName,\n    storeFieldName: storeFieldName,\n    variables: variables,\n    isReference: isReference,\n    toReference: toReference,\n    storage: storage,\n    cache: policies.cache,\n    canRead: canRead,\n    readField: function () {\n      return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store)\n  };\n}\n\nexport function normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n  var fieldNameOrOptions = readFieldArgs[0],\n      from = readFieldArgs[1],\n      argc = readFieldArgs.length;\n  var options;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      from: argc > 1 ? from : objectOrReference\n    };\n  } else {\n    options = __assign({}, fieldNameOrOptions);\n\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    __DEV__ && invariant.warn(\"Undefined 'from' passed to readField with arguments \".concat(stringifyForDisplay(Array.from(readFieldArgs))));\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(store) {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw __DEV__ ? new InvariantError(\"Cannot automatically merge arrays\") : new InvariantError(4);\n    }\n\n    if (isNonNullObject(existing) && isNonNullObject(incoming)) {\n      var eType = store.getFieldValue(existing, \"__typename\");\n      var iType = store.getFieldValue(incoming, \"__typename\");\n      var typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) && storeValueIsStoreObject(incoming)) {\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) && isReference(incoming)) {\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) && storeValueIsStoreObject(incoming)) {\n        return __assign(__assign({}, existing), incoming);\n      }\n    }\n\n    return incoming;\n  };\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","storeKeyNameFromField","argumentsObjectFromField","isReference","getStoreKeyName","isNonNullObject","stringifyForDisplay","hasOwn","fieldNameFromStoreName","storeValueIsStoreObject","selectionSetMatchesResult","TypeOrFieldNameRegExp","defaultDataIdFromObject","isArray","cacheSlot","canonicalStringify","keyArgsFnFromSpecifier","keyFieldsFnFromSpecifier","setStringify","argsFromFieldSpecifier","spec","args","field","variables","nullKeyFieldsFn","simpleKeyArgsFn","_args","context","fieldName","mergeTrueFn","existing","incoming","_a","mergeObjects","mergeFalseFn","_","config","Object","create","Map","__assign","dataIdFromObject","cache","setRootTypename","possibleTypes","addPossibleTypes","typePolicies","addTypePolicies","Policies","object","partialContext","policies","typename","storeObject","__typename","rootTypenamesById","ROOT_QUERY","readField","options","normalizeReadFieldOptions","arguments","store","id","policy","getTypePolicy","keyFn","specifierOrId","String","keyObject","keys","forEach","queryType","mutationType","subscriptionType","_this","call","toBeAdded","push","fields","setMerge","merge","keyFields","getFieldPolicy","read","keyArgs","which","rootId","toUpperCase","old","__DEV__","concat","rootIdsByTypename","usingPossibleTypes","getSupertypeSet","supertype","subtype","add","match","fuzzySubtypes","set","RegExp","policy_1","supertypes","supertypeMap","get","size","rest","assign","inbox","length","splice","updateTypePolicy","createIfMissing","fieldPolicies","supertypeSet","Set","fragment","result","typeCondition","name","value","has","typenameSupertypeSet","workQueue_1","maybeEnqueue_1","indexOf","needToCheckFuzzySubtypes","checkingFuzzySubtypes","i","selectionSet","regExp","fuzzyString","fieldSpec","storeFieldName","specifierOrString","objectOrReference","from","nameOrField","getFieldValue","getStoreFieldName","readOptions","makeFieldFunctionOptions","getStorage","__ref","withValue","parentTypename","childTypename","storage","makeMergeObjectsFunction","overwrite","toReference","canRead","readFieldArgs","fieldNameOrOptions","argc","Array","eType","iType","typesDiffer"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/cache/inmemory/policies.ts"],"sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport {\n  FragmentMap,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  isNonNullObject,\n  stringifyForDisplay,\n} from '../../utilities';\nimport {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n  defaultDataIdFromObject,\n  isArray,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { WriteContext } from './writeToStore';\n\n// Upgrade to a faster version of the default stable JSON.stringify function\n// used by getStoreKeyName. This function is used when computing storeFieldName\n// strings (when no keyArgs has been configured for a field).\nimport { canonicalStringify } from './object-canon';\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier } from './key-extractor';\n\ngetStoreKeyName.setStringify(canonicalStringify);\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\nexport type KeySpecifier = ReadonlyArray<string | KeySpecifier>;\n\nexport type KeyFieldsContext = {\n  // The __typename of the incoming object, even if the __typename field was\n  // aliased to another name in the raw result object. May be undefined when\n  // dataIdFromObject is called for objects without __typename fields.\n  typename: string | undefined;\n\n  // The object to be identified, after processing to remove aliases and\n  // normalize identifiable child objects with references.\n  storeObject: StoreObject;\n\n  // Handy tool for reading additional fields from context.storeObject, either\n  // readField(\"fieldName\") to read storeObject[fieldName], or readField(\"name\",\n  // objectOrReference) to read from another object or Reference. If you read a\n  // field with a read function, that function will be invoked.\n  readField: ReadFieldFunction;\n\n  // If you are writing a custom keyFields function, and you plan to use the raw\n  // result object passed as the first argument, you may also need access to the\n  // selection set and available fragments for this object, just in case any\n  // fields have aliases. Since this logic is tricky to get right, and these\n  // context properties are not even always provided (for example, they are\n  // omitted when calling cache.identify(object), where object is assumed to be\n  // a StoreObject), we recommend you use context.storeObject (which has already\n  // been de-aliased) and context.readField (which can read from references as\n  // well as objects) instead of the raw result object in your keyFields\n  // functions, or just rely on the internal implementation of keyFields:[...]\n  // syntax to get these details right for you.\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n\n  // Internal. May be set by the KeyFieldsFunction to report fields that were\n  // involved in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions,\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    partialContext?: Partial<KeyFieldsContext>,\n  ): [string?, StoreObject?] {\n    const policies = this;\n\n    const typename = partialContext && (\n      partialContext.typename ||\n      partialContext.storeObject?.__typename\n    ) || object.__typename;\n\n    // It should be possible to write root Query fields with writeFragment,\n    // using { __typename: \"Query\", ... } as the data, but it does not make\n    // sense to allow the same identification behavior for the Mutation and\n    // Subscription types, since application code should never be writing\n    // directly to (or reading directly from) those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    // Default context.storeObject to object if not otherwise provided.\n    const storeObject = partialContext && partialContext.storeObject || object;\n\n    const context: KeyFieldsContext = {\n      ...partialContext,\n      typename,\n      storeObject,\n      readField: partialContext && partialContext.readField || function () {\n        const options = normalizeReadFieldOptions(arguments, storeObject);\n        return policies.readField(options, {\n          store: policies.cache[\"data\"],\n          variables: options.variables,\n        });\n      },\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach(policy => {\n        this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getReadFunction(\n    typename: string | undefined,\n    fieldName: string,\n  ): FieldReadFunction | undefined {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return policy && policy.read;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store,\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n    readField<T>() {\n      return policies.readField<T>(\n        normalizeReadFieldOptions(arguments, objectOrReference, variables),\n        context,\n      );\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nexport function normalizeReadFieldOptions(\n  readFieldArgs: IArguments,\n  objectOrReference: StoreObject | Reference | undefined,\n  variables?: ReadMergeModifyContext[\"variables\"],\n): ReadFieldOptions {\n  const {\n    0: fieldNameOrOptions,\n    1: from,\n    length: argc,\n  } = readFieldArgs;\n\n  let options: ReadFieldOptions;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      // Default to objectOrReference only when no second argument was\n      // passed for the from parameter, not when undefined is explicitly\n      // passed as the second argument.\n      from: argc > 1 ? from : objectOrReference,\n    };\n  } else {\n    options = { ...fieldNameOrOptions };\n    // Default to objectOrReference only when fieldNameOrOptions.from is\n    // actually omitted, rather than just undefined.\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    invariant.warn(`Undefined 'from' passed to readField with arguments ${\n      stringifyForDisplay(Array.from(readFieldArgs))\n    }`);\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) &&\n        isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}