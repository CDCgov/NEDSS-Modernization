{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\n\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node,\n          type,\n          defaultValue\n        } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(new GraphQLError(`Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`, {\n                nodes: [varDef, node]\n              }));\n            }\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","map":{"version":3,"names":["inspect","GraphQLError","Kind","isNonNullType","isTypeSubTypeOf","typeFromAST","VariablesInAllowedPositionRule","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","type","defaultValue","varName","name","value","varDef","schema","getSchema","varType","allowedVariableUsage","varTypeStr","typeStr","reportError","nodes","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","undefined","nullableLocationType","ofType"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,eAAT,QAAgC,qCAAhC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;EACtD,IAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;EACA,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAK,GAAG;QACNJ,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;MACD,CAHkB;;MAKnBG,KAAK,CAACC,SAAD,EAAY;QACf,MAAMC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCF,SAAnC,CAAf;;QAEA,KAAK,MAAM;UAAEG,IAAF;UAAQC,IAAR;UAAcC;QAAd,CAAX,IAA2CJ,MAA3C,EAAmD;UACjD,MAAMK,OAAO,GAAGH,IAAI,CAACI,IAAL,CAAUC,KAA1B;UACA,MAAMC,MAAM,GAAGf,SAAS,CAACY,OAAD,CAAxB;;UAEA,IAAIG,MAAM,IAAIL,IAAd,EAAoB;YAClB;YACA;YACA;YACA;YACA;YACA,MAAMM,MAAM,GAAGjB,OAAO,CAACkB,SAAR,EAAf;YACA,MAAMC,OAAO,GAAGrB,WAAW,CAACmB,MAAD,EAASD,MAAM,CAACL,IAAhB,CAA3B;;YAEA,IACEQ,OAAO,IACP,CAACC,oBAAoB,CACnBH,MADmB,EAEnBE,OAFmB,EAGnBH,MAAM,CAACJ,YAHY,EAInBD,IAJmB,EAKnBC,YALmB,CAFvB,EASE;cACA,MAAMS,UAAU,GAAG5B,OAAO,CAAC0B,OAAD,CAA1B;cACA,MAAMG,OAAO,GAAG7B,OAAO,CAACkB,IAAD,CAAvB;cACAX,OAAO,CAACuB,WAAR,CACE,IAAI7B,YAAJ,CACG,cAAamB,OAAQ,cAAaQ,UAAW,sCAAqCC,OAAQ,IAD7F,EAEE;gBACEE,KAAK,EAAE,CAACR,MAAD,EAASN,IAAT;cADT,CAFF,CADF;YAQD;UACF;QACF;MACF;;IA5CkB,CADhB;;IAgDLe,kBAAkB,CAACf,IAAD,EAAO;MACvBT,SAAS,CAACS,IAAI,CAACgB,QAAL,CAAcZ,IAAd,CAAmBC,KAApB,CAAT,GAAsCL,IAAtC;IACD;;EAlDI,CAAP;AAoDD;AACD;AACA;AACA;AACA;AACA;;AAEA,SAASU,oBAAT,CACEH,MADF,EAEEE,OAFF,EAGEQ,eAHF,EAIEC,YAJF,EAKEC,oBALF,EAME;EACA,IAAIjC,aAAa,CAACgC,YAAD,CAAb,IAA+B,CAAChC,aAAa,CAACuB,OAAD,CAAjD,EAA4D;IAC1D,MAAMW,8BAA8B,GAClCH,eAAe,IAAI,IAAnB,IAA2BA,eAAe,CAACI,IAAhB,KAAyBpC,IAAI,CAACqC,IAD3D;IAEA,MAAMC,uBAAuB,GAAGJ,oBAAoB,KAAKK,SAAzD;;IAEA,IAAI,CAACJ,8BAAD,IAAmC,CAACG,uBAAxC,EAAiE;MAC/D,OAAO,KAAP;IACD;;IAED,MAAME,oBAAoB,GAAGP,YAAY,CAACQ,MAA1C;IACA,OAAOvC,eAAe,CAACoB,MAAD,EAASE,OAAT,EAAkBgB,oBAAlB,CAAtB;EACD;;EAED,OAAOtC,eAAe,CAACoB,MAAD,EAASE,OAAT,EAAkBS,YAAlB,CAAtB;AACD"},"metadata":{},"sourceType":"module"}