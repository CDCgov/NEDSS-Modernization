{"ast":null,"code":"import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\n\nexport function KnownArgumentNamesRule(context) {\n  return { // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map(arg => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(new GraphQLError(`Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` + didYouMean(suggestions), {\n          nodes: argNode\n        }));\n      }\n    }\n\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map(arg => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n\n      const argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      directiveArgs[def.name.value] = argsNodes.map(arg => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(new GraphQLError(`Unknown argument \"${argName}\" on directive \"@${directiveName}\".` + didYouMean(suggestions), {\n              nodes: argNode\n            }));\n          }\n        }\n      }\n\n      return false;\n    }\n\n  };\n}","map":{"version":3,"names":["didYouMean","suggestionList","GraphQLError","Kind","specifiedDirectives","KnownArgumentNamesRule","context","KnownArgumentNamesOnDirectivesRule","Argument","argNode","argDef","getArgument","fieldDef","getFieldDef","parentType","getParentType","argName","name","value","knownArgsNames","args","map","arg","suggestions","reportError","nodes","directiveArgs","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","_def$arguments","argsNodes","arguments","Directive","directiveNode","directiveName","knownArgs","includes"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}