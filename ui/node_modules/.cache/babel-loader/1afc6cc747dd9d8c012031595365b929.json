{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n        error = observer.error,\n        _complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n    var promiseQueue = {\n      then: function then(callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n\n          var both = function both() {\n            return examiner(arg);\n          };\n\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n\n            if (completed) {\n              handler.complete();\n            }\n          }, function (error) {\n            --activeCallbackCount;\n            throw error;\n          }).catch(function (caught) {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function complete() {\n        completed = true;\n\n        if (!activeCallbackCount) {\n          _complete && _complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAAqC,iBAArC;AAIA,OAAM,SAAUC,QAAV,CACJC,UADI,EAEJC,KAFI,EAGJC,OAHI,EAGwC;EAE5C,OAAO,IAAIJ,UAAJ,CAAkB,oBAAQ;IACvB,QAAI,GAAsBK,QAAQ,KAAlC;IAAA,IAAMC,KAAK,GAAeD,QAAQ,MAAlC;IAAA,IAAaE,SAAQ,GAAKF,QAAQ,SAAlC;IACR,IAAIG,mBAAmB,GAAG,CAA1B;IACA,IAAIC,SAAS,GAAG,KAAhB;IACA,IAAIC,YAAY,GAAG;MAIjBC,IAAI,EAAJ,cAAKC,QAAL,EAAwB;QACtB,OAAO,IAAIC,OAAJ,CAAY,mBAAO;UAAI,cAAO,CAACD,QAAQ,EAAT,CAAP;QAAmB,CAA1C,CAAP;MACD;IANgB,CAAnB;;IASA,SAASE,YAAT,CACEC,QADF,EAEEC,QAFF,EAEsC;MAEpC,IAAID,QAAJ,EAAc;QACZ,OAAO,eAAG;UACR,EAAEP,mBAAF;;UACA,IAAMS,IAAI,GAAG,SAAPA,IAAO;YAAM,eAAQ,CAACC,GAAD,CAAR;UAAa,CAAhC;;UACAR,YAAY,GAAGA,YAAY,CAACC,IAAb,CAAkBM,IAAlB,EAAwBA,IAAxB,EAA8BN,IAA9B,CACb,kBAAM;YACJ,EAAEH,mBAAF;YACAW,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUf,QAAV,EAAoBgB,MAApB,CAAR;;YACA,IAAIZ,SAAJ,EAAe;cACba,OAAO,CAACf,QAAR;YACD;UACF,CAPY,EAQb,iBAAK;YACH,EAAEC,mBAAF;YACA,MAAMF,KAAN;UACD,CAXY,EAYbiB,KAZa,CAYP,kBAAM;YACZjB,KAAK,IAAIA,KAAK,CAACc,IAAN,CAAWf,QAAX,EAAqBmB,MAArB,CAAT;UACD,CAdc,CAAf;QAeD,CAlBD;MAmBD,CApBD,MAoBO;QACL,OAAO,eAAG;UAAI,eAAQ,IAAIR,QAAQ,CAACI,IAAT,CAAcf,QAAd,EAAwBa,GAAxB,CAAZ;QAAwC,CAAtD;MACD;IACF;;IAED,IAAMI,OAAO,GAAgB;MAC3BH,IAAI,EAAEL,YAAY,CAACX,KAAD,EAAQgB,IAAR,CADS;MAE3Bb,KAAK,EAAEQ,YAAY,CAACV,OAAD,EAAUE,KAAV,CAFQ;MAG3BC,QAAQ;QACNE,SAAS,GAAG,IAAZ;;QACA,IAAI,CAACD,mBAAL,EAA0B;UACxBD,SAAQ,IAAIA,SAAQ,CAACa,IAAT,CAAcf,QAAd,CAAZ;QACD;MACF;IAR0B,CAA7B;IAWA,IAAMoB,GAAG,GAAGvB,UAAU,CAACwB,SAAX,CAAqBJ,OAArB,CAAZ;IACA,OAAO;MAAM,UAAG,CAACK,WAAJ;IAAiB,CAA9B;EACD,CAvDM,CAAP;AAwDD","names":["Observable","asyncMap","observable","mapFn","catchFn","observer","error","complete","activeCallbackCount","completed","promiseQueue","then","callback","Promise","makeCallback","examiner","delegate","both","arg","next","call","result","handler","catch","caught","sub","subscribe","unsubscribe"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/utilities/observables/asyncMap.ts"],"sourcesContent":["import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}