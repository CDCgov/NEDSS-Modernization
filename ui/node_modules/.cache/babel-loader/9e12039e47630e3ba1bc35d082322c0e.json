{"ast":null,"code":"export default function symbolObservablePonyfill(root) {\n  var result;\n  var Symbol = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      result = Symbol.observable;\n    } else {\n      if (typeof Symbol.for === 'function') {\n        // This just needs to be something that won't trample other user's Symbol.for use\n        // It also will guide people to the source of their issues, if this is problematic.\n        // META: It's a resource locator!\n        result = Symbol.for('https://github.com/benlesh/symbol-observable');\n      } else {\n        // Symbol.for didn't exist! The best we can do at this point is a totally \n        // unique symbol. Note that the string argument here is a descriptor, not\n        // an identifier. This symbol is unique.\n        result = Symbol('https://github.com/benlesh/symbol-observable');\n      }\n\n      try {\n        Symbol.observable = result;\n      } catch (err) {// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n        // if it is frozen assigning to it will throw. In this case, we don't care, because\n        // they will need to use the returned value from the ponyfill.\n      }\n    }\n  } else {\n    result = '@@observable';\n  }\n\n  return result;\n}\n;","map":{"version":3,"names":["symbolObservablePonyfill","root","result","Symbol","observable","for","err"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/symbol-observable/es/ponyfill.js"],"sourcesContent":["export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\n\t\t\tif (typeof Symbol.for === 'function') {\n\t\t\t\t// This just needs to be something that won't trample other user's Symbol.for use\n\t\t\t\t// It also will guide people to the source of their issues, if this is problematic.\n\t\t\t\t// META: It's a resource locator!\n\t\t\t\tresult = Symbol.for('https://github.com/benlesh/symbol-observable');\n\t\t\t} else {\n\t\t\t\t// Symbol.for didn't exist! The best we can do at this point is a totally \n\t\t\t\t// unique symbol. Note that the string argument here is a descriptor, not\n\t\t\t\t// an identifier. This symbol is unique.\n\t\t\t\tresult = Symbol('https://github.com/benlesh/symbol-observable');\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tSymbol.observable = result;\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n\t\t\t\t// if it is frozen assigning to it will throw. In this case, we don't care, because\n\t\t\t\t// they will need to use the returned value from the ponyfill.\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n"],"mappings":"AAAA,eAAe,SAASA,wBAAT,CAAkCC,IAAlC,EAAwC;EACtD,IAAIC,MAAJ;EACA,IAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;;EAEA,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;IACjC,IAAIA,MAAM,CAACC,UAAX,EAAuB;MACtBF,MAAM,GAAGC,MAAM,CAACC,UAAhB;IACA,CAFD,MAEO;MAEN,IAAI,OAAOD,MAAM,CAACE,GAAd,KAAsB,UAA1B,EAAsC;QACrC;QACA;QACA;QACAH,MAAM,GAAGC,MAAM,CAACE,GAAP,CAAW,8CAAX,CAAT;MACA,CALD,MAKO;QACN;QACA;QACA;QACAH,MAAM,GAAGC,MAAM,CAAC,8CAAD,CAAf;MACA;;MACD,IAAI;QACHA,MAAM,CAACC,UAAP,GAAoBF,MAApB;MACA,CAFD,CAEE,OAAOI,GAAP,EAAY,CACb;QACA;QACA;MACA;IACD;EACD,CAxBD,MAwBO;IACNJ,MAAM,GAAG,cAAT;EACA;;EAED,OAAOA,MAAP;AACA;AAAA"},"metadata":{},"sourceType":"module"}