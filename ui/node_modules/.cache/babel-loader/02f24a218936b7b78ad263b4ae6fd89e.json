{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\n\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(`Fragment cannot condition on non composite type \"${typeStr}\".`, {\n            nodes: typeCondition\n          }));\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(`Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`, {\n          nodes: node.typeCondition\n        }));\n      }\n    }\n\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isCompositeType","typeFromAST","FragmentsOnCompositeTypesRule","context","InlineFragment","node","typeCondition","type","getSchema","typeStr","reportError","nodes","FragmentDefinition","name","value"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,6BAAT,CAAuCC,OAAvC,EAAgD;EACrD,OAAO;IACLC,cAAc,CAACC,IAAD,EAAO;MACnB,MAAMC,aAAa,GAAGD,IAAI,CAACC,aAA3B;;MAEA,IAAIA,aAAJ,EAAmB;QACjB,MAAMC,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,EAAsBF,aAAtB,CAAxB;;QAEA,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,EAAoC;UAClC,MAAME,OAAO,GAAGV,KAAK,CAACO,aAAD,CAArB;UACAH,OAAO,CAACO,WAAR,CACE,IAAIZ,YAAJ,CACG,oDAAmDW,OAAQ,IAD9D,EAEE;YACEE,KAAK,EAAEL;UADT,CAFF,CADF;QAQD;MACF;IACF,CAnBI;;IAqBLM,kBAAkB,CAACP,IAAD,EAAO;MACvB,MAAME,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,EAAsBH,IAAI,CAACC,aAA3B,CAAxB;;MAEA,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,EAAoC;QAClC,MAAME,OAAO,GAAGV,KAAK,CAACM,IAAI,CAACC,aAAN,CAArB;QACAH,OAAO,CAACO,WAAR,CACE,IAAIZ,YAAJ,CACG,aAAYO,IAAI,CAACQ,IAAL,CAAUC,KAAM,6CAA4CL,OAAQ,IADnF,EAEE;UACEE,KAAK,EAAEN,IAAI,CAACC;QADd,CAFF,CADF;MAQD;IACF;;EAnCI,CAAP;AAqCD"},"metadata":{},"sourceType":"module"}