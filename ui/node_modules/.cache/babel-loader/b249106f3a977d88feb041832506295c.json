{"ast":null,"code":"import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isInputObjectType, isLeafType, isListType, isNonNullType } from '../type/definition.mjs';\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\n\nexport function coerceInputValue(inputValue, type) {\n  let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(pathToArray(path), inputValue, new GraphQLError(`Expected non-nullable type \"${inspect(type)}\" not to be null.`));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(`Expected type \"${type.name}\" to be an object.`));\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(`Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`));\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(`Field \"${fieldName}\" is not defined by type \"${type.name}\".` + didYouMean(suggestions)));\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(pathToArray(path), inputValue, new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n          originalError: error\n        }));\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(`Expected type \"${type.name}\".`));\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}","map":{"version":3,"names":["didYouMean","inspect","invariant","isIterableObject","isObjectLike","addPath","pathToArray","printPathArray","suggestionList","GraphQLError","isInputObjectType","isLeafType","isListType","isNonNullType","coerceInputValue","inputValue","type","onError","defaultOnError","coerceInputValueImpl","undefined","path","invalidValue","error","errorPrefix","length","message","ofType","itemType","Array","from","itemValue","index","itemPath","name","coercedValue","fieldDefs","getFields","field","Object","values","fieldValue","defaultValue","typeStr","fieldName","keys","suggestions","parseResult","parseValue","originalError"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/coerceInputValue.mjs"],"sourcesContent":["import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}