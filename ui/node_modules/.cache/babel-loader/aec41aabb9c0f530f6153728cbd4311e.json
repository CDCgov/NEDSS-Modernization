{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        defaultOptions = _a.defaultOptions,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        onBroadcast = _a.onBroadcast,\n        _c = _a.ssrMode,\n        ssrMode = _c === void 0 ? false : _c,\n        _d = _a.clientAwareness,\n        clientAwareness = _d === void 0 ? {} : _d,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(11));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueries = _a.updateQueries,\n        _d = _a.refetchQueries,\n        refetchQueries = _d === void 0 ? [] : _d,\n        _e = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _e === void 0 ? false : _e,\n        updateWithProxyFn = _a.update,\n        onQueryUpdated = _a.onQueryUpdated,\n        _f = _a.fetchPolicy,\n        fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n        _g = _a.errorPolicy,\n        errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n        keepRootFields = _a.keepRootFields,\n        context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, mutationStoreValue, self;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 12);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 13);\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _h.sent();\n            _h.label = 2;\n\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: result.errors\n                  });\n                }\n\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n\n                var storeResult = __assign({}, result);\n\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function next(storeResult) {\n                  self.broadcastQueries();\n                  resolve(storeResult);\n                },\n                error: function error(err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n\n          var updater = updateQueries_1[queryName];\n\n          var _b = _this.queries.get(queryId),\n              document = _b.document,\n              variables = _b.variables;\n\n          var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _c.result,\n              complete = _c.complete;\n\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function updateCache(cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n\n          var update = mutation.update;\n\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables\n            });\n          }\n\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function fields(value, _a) {\n                var fieldName = _a.fieldName,\n                    DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n\n    return Promise.resolve(result);\n  };\n\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n\n            return def;\n          })\n        })\n      };\n\n      var add = function add(doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 14);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 15);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 16);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 17);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(18));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    return this.cache.reset(options);\n  };\n\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n\n    if (include === void 0) {\n      include = \"active\";\n    }\n\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n          document = _a.document;\n\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        var queryName = oq.queryName,\n            fetchPolicy = oq.options.fetchPolicy;\n\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n\n    return queries;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy,\n        variables = _a.variables,\n        _b = _a.context,\n        context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function makeObservable(variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _b = this,\n          inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n          link = _b.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        queryInfo.markResult(result, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function fromVariables(variables) {\n      normalized.variables = variables;\n\n      var concastSources = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n\n      if (normalized.fetchPolicy !== \"standby\" && concastSources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n\n      return concastSources;\n    };\n\n    var cleanupCancelFn = function cleanupCancelFn() {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return concast;\n  };\n\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n\n    var updateCache = _a.updateCache,\n        include = _a.include,\n        _b = _a.optimistic,\n        optimistic = _b === void 0 ? false : _b,\n        _c = _a.removeOptimistic,\n        removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n        onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n\n    var results = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function onWatchUpdated(watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                result = oq.refetch();\n              }\n\n              if (result !== false) {\n                results.set(oq, result);\n              }\n\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n            lastDiff = _a.lastDiff,\n            diff = _a.diff;\n        var result;\n\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n\n    var query = _a.query,\n        variables = _a.variables,\n        fetchPolicy = _a.fetchPolicy,\n        refetchWritePolicy = _a.refetchWritePolicy,\n        errorPolicy = _a.errorPolicy,\n        returnPartialData = _a.returnPartialData,\n        context = _a.context,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n\n    var readCache = function readCache() {\n      return queryInfo.getDiff(variables);\n    };\n\n    var resultsFromCache = function resultsFromCache(diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      var fromData = function fromData(data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n\n    var resultsFromLink = function resultsFromLink() {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","equal","execute","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","removeConnectionDirectiveFromDocument","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","ApolloError","isApolloError","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","Object","prototype","hasOwnProperty","_a","cache","link","defaultOptions","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","assumeImmutableResults","Map","WeakMap","create","mutationStore","QueryManager","queries","forEach","_info","queryId","_this","stopQueryNoBroadcast","cancelPendingFetches","__DEV__","error","fetchCancelFns","clear","mutation","variables","optimisticResponse","updateQueries","refetchQueries","_e","awaitRefetchQueries","updateWithProxyFn","onQueryUpdated","_f","fetchPolicy","mutate","_g","errorPolicy","keepRootFields","context","mutationId","generateMutationId","transform","document","loading","markMutationOptimistic","update","broadcastQueries","self","Promise","resolve","reject","__assign","result","graphQLErrors","mutationStoreValue","storeResult","removeOptimistic","err","networkError","markMutationResult","cacheWrites","skipCache","push","dataId","query","updateQueries_1","observableQuery","queryName","get","returnPartialData","optimistic","currentQueryResult","complete","nextQueryResult","updater","mutationResult","queryVariables","results_1","diff","id","asQuery","data","modify","value","DELETE","include","recordOptimisticTransaction","fetchQuery","options","networkStatus","getQueryStore","store","info","resetErrors","queryInfo","undefined","transformCache","transformed","forLink","transformForLink","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","defaultVars","definitions","def","kind","operation","add","doc","observable","queryManager","set","generateQueryId","generateRequestId","stopQueryInStoreNoBroadcast","discardWatches","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","desc","oq","size","getQuery","init","reFetchObservableQueries","includeStandby","observableQueryPromises","setObservableQuery","startGraphQLSubscription","makeObservable","map","write","addExportedVariables","then","observablePromise_1","sub","observer","removeQuery","delete","has","stop","getLocalState","getObservableFromLink","deduplication","inFlightLinkObservables_1","operationName","forceFetch","byVariables_1","varJson_1","concast","cleanup","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","hasErrors","requestId","markResult","aqr","errors","fetchQueryObservable","getVariables","watchQuery","notifyOnNetworkStatusChange","normalized","fromVariables","concastSources","cleanupCancelFn","setTimeout","updateCache","includedQueriesById","lastDiff","results","batch","watch","fetchQueryByPolicy","refetchWritePolicy","readCache","resultsFromCache","fromData","partial","onlyRunForcedResolvers","resultsFromLink","shouldNotify","oldNetworkStatus","prepareContext"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/core/QueryManager.ts"],"sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesArray,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\ntype DefaultOptions = import(\"./ApolloClient\").DefaultOptions;\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n    mutation = this.transform(mutation).document;\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: result.errors,\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // At the moment, a mutation can have only one result, so we can\n          // immediately resolve upon receiving the first result. In the future,\n          // mutations containing @defer or @stream directives might receive\n          // multiple FetchResult payloads from the ApolloLink chain, so we will\n          // probably need to collect those results in this next method and call\n          // resolve only later, in an observer.complete function.\n          resolve(storeResult);\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...result, data: diff.result };\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables,\n            });\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        this.cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = forLink && this.localState.serverQuery(forLink);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.cleanup(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    return asyncMap(\n      this.getObservableFromLink(\n        queryInfo.document!,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const hasErrors = isNonEmptyArray(result.errors);\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors: result.errors,\n            }));\n          }\n          queryInfo.markResult(result, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = result.errors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = defaults && defaults.fetchPolicy || \"cache-first\",\n      errorPolicy = defaults && defaults.errorPolicy || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const concastSources = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        concastSources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n\n      return concastSources;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, reason => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesArray<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () => this.getResultsFromLink<TData, TVars>(\n      queryInfo,\n      cacheWriteBehavior,\n      {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      },\n    );\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}