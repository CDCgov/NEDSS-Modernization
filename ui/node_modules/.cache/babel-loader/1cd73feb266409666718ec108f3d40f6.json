{"ast":null,"code":"import _slicedToArray from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isEnumType, isInputObjectType, isInterfaceType, isListType, isNamedType, isNonNullType, isObjectType, isRequiredArgument, isRequiredInputField, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] = 'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] = 'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] = 'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] = 'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] = 'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] = 'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] = 'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\n\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(_toConsumableArray(findTypeChanges(oldSchema, newSchema)), _toConsumableArray(findDirectiveChanges(oldSchema, newSchema)));\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n\n  var _iterator = _createForOfIteratorHelper(directivesDiff.removed),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var oldDirective = _step.value;\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REMOVED,\n        description: \"\".concat(oldDirective.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(directivesDiff.persisted),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          _oldDirective = _step2$value[0],\n          newDirective = _step2$value[1];\n\n      var argsDiff = diff(_oldDirective.args, newDirective.args);\n\n      var _iterator3 = _createForOfIteratorHelper(argsDiff.added),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var newArg = _step3.value;\n\n          if (isRequiredArgument(newArg)) {\n            schemaChanges.push({\n              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n              description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n            });\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(argsDiff.removed),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var oldArg = _step4.value;\n          schemaChanges.push({\n            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n            description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n          description: \"Repeatable flag was removed from \".concat(_oldDirective.name, \".\")\n        });\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(_oldDirective.locations),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var location = _step5.value;\n\n          if (!newDirective.locations.includes(location)) {\n            schemaChanges.push({\n              type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n              description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n            });\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(Object.values(oldSchema.getTypeMap()), Object.values(newSchema.getTypeMap()));\n\n  var _iterator6 = _createForOfIteratorHelper(typesDiff.removed),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var oldType = _step6.value;\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: isSpecifiedScalarType(oldType) ? \"Standard scalar \".concat(oldType.name, \" was removed because it is not referenced anymore.\") : \"\".concat(oldType.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  var _iterator7 = _createForOfIteratorHelper(typesDiff.persisted),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n          _oldType = _step7$value[0],\n          newType = _step7$value[1];\n\n      if (isEnumType(_oldType) && isEnumType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findEnumTypeChanges(_oldType, newType)));\n      } else if (isUnionType(_oldType) && isUnionType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findUnionTypeChanges(_oldType, newType)));\n      } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findInputObjectTypeChanges(_oldType, newType)));\n      } else if (isObjectType(_oldType) && isObjectType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));\n      } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));\n      } else if (_oldType.constructor !== newType.constructor) {\n        schemaChanges.push({\n          type: BreakingChangeType.TYPE_CHANGED_KIND,\n          description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n\n  var _iterator8 = _createForOfIteratorHelper(fieldsDiff.added),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var newField = _step8.value;\n\n      if (isRequiredInputField(newField)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n          description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n        });\n      } else {\n        schemaChanges.push({\n          type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n          description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  var _iterator9 = _createForOfIteratorHelper(fieldsDiff.removed),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var oldField = _step9.value;\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  var _iterator10 = _createForOfIteratorHelper(fieldsDiff.persisted),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var _step10$value = _slicedToArray(_step10.value, 2),\n          _oldField = _step10$value[0],\n          _newField = _step10$value[1];\n\n      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.FIELD_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  var _iterator11 = _createForOfIteratorHelper(possibleTypesDiff.added),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var newPossibleType = _step11.value;\n      schemaChanges.push({\n        type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n        description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n\n  var _iterator12 = _createForOfIteratorHelper(possibleTypesDiff.removed),\n      _step12;\n\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var oldPossibleType = _step12.value;\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n        description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  var _iterator13 = _createForOfIteratorHelper(valuesDiff.added),\n      _step13;\n\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var newValue = _step13.value;\n      schemaChanges.push({\n        type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n        description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n\n  var _iterator14 = _createForOfIteratorHelper(valuesDiff.removed),\n      _step14;\n\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var oldValue = _step14.value;\n      schemaChanges.push({\n        type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n        description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  var schemaChanges = [];\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  var _iterator15 = _createForOfIteratorHelper(interfacesDiff.added),\n      _step15;\n\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var newInterface = _step15.value;\n      schemaChanges.push({\n        type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n        description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n\n  var _iterator16 = _createForOfIteratorHelper(interfacesDiff.removed),\n      _step16;\n\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var oldInterface = _step16.value;\n      schemaChanges.push({\n        type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n        description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n\n  var _iterator17 = _createForOfIteratorHelper(fieldsDiff.removed),\n      _step17;\n\n  try {\n    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n      var oldField = _step17.value;\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator17.e(err);\n  } finally {\n    _iterator17.f();\n  }\n\n  var _iterator18 = _createForOfIteratorHelper(fieldsDiff.persisted),\n      _step18;\n\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var _step18$value = _slicedToArray(_step18.value, 2),\n          _oldField2 = _step18$value[0],\n          newField = _step18$value[1];\n\n      schemaChanges.push.apply(schemaChanges, _toConsumableArray(findArgChanges(oldType, _oldField2, newField)));\n      var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.FIELD_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n\n  var _iterator19 = _createForOfIteratorHelper(argsDiff.removed),\n      _step19;\n\n  try {\n    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n      var oldArg = _step19.value;\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator19.e(err);\n  } finally {\n    _iterator19.f();\n  }\n\n  var _iterator20 = _createForOfIteratorHelper(argsDiff.persisted),\n      _step20;\n\n  try {\n    for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n      var _step20$value = _slicedToArray(_step20.value, 2),\n          _oldArg = _step20$value[0],\n          newArg = _step20$value[1];\n\n      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.ARG_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n        });\n      } else if (_oldArg.defaultValue !== undefined) {\n        if (newArg.defaultValue === undefined) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n          });\n        } else {\n          // Since we looking only for client's observable changes we should\n          // compare default values in the same representation as they are\n          // represented inside introspection.\n          var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n          var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n          if (oldValueStr !== newValueStr) {\n            schemaChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n            });\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator20.e(err);\n  } finally {\n    _iterator20.f();\n  }\n\n  var _iterator21 = _createForOfIteratorHelper(argsDiff.added),\n      _step21;\n\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var _newArg = _step21.value;\n\n      if (isRequiredArgument(_newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_ARG_ADDED,\n          description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n        });\n      } else {\n        schemaChanges.push({\n          type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n          description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return (// if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref) {\n    var name = _ref.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref2) {\n    var name = _ref2.name;\n    return name;\n  });\n\n  var _iterator22 = _createForOfIteratorHelper(oldArray),\n      _step22;\n\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var oldItem = _step22.value;\n      var newItem = newMap[oldItem.name];\n\n      if (newItem === undefined) {\n        removed.push(oldItem);\n      } else {\n        persisted.push([oldItem, newItem]);\n      }\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n\n  var _iterator23 = _createForOfIteratorHelper(newArray),\n      _step23;\n\n  try {\n    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n      var _newItem = _step23.value;\n\n      if (oldMap[_newItem.name] === undefined) {\n        added.push(_newItem);\n      }\n    }\n  } catch (err) {\n    _iterator23.e(err);\n  } finally {\n    _iterator23.f();\n  }\n\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}","map":{"version":3,"names":["inspect","invariant","keyMap","print","isEnumType","isInputObjectType","isInterfaceType","isListType","isNamedType","isNonNullType","isObjectType","isRequiredArgument","isRequiredInputField","isScalarType","isUnionType","isSpecifiedScalarType","astFromValue","sortValueNode","BreakingChangeType","DangerousChangeType","findBreakingChanges","oldSchema","newSchema","findSchemaChanges","filter","change","type","findDangerousChanges","findTypeChanges","findDirectiveChanges","schemaChanges","directivesDiff","diff","getDirectives","removed","oldDirective","push","DIRECTIVE_REMOVED","description","name","persisted","newDirective","argsDiff","args","added","newArg","REQUIRED_DIRECTIVE_ARG_ADDED","oldArg","DIRECTIVE_ARG_REMOVED","isRepeatable","DIRECTIVE_REPEATABLE_REMOVED","locations","location","includes","DIRECTIVE_LOCATION_REMOVED","typesDiff","Object","values","getTypeMap","oldType","TYPE_REMOVED","newType","findEnumTypeChanges","findUnionTypeChanges","findInputObjectTypeChanges","findFieldChanges","findImplementedInterfacesChanges","constructor","TYPE_CHANGED_KIND","typeKindName","fieldsDiff","getFields","newField","REQUIRED_INPUT_FIELD_ADDED","OPTIONAL_INPUT_FIELD_ADDED","oldField","FIELD_REMOVED","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","FIELD_CHANGED_KIND","String","possibleTypesDiff","getTypes","newPossibleType","TYPE_ADDED_TO_UNION","oldPossibleType","TYPE_REMOVED_FROM_UNION","valuesDiff","getValues","newValue","VALUE_ADDED_TO_ENUM","oldValue","VALUE_REMOVED_FROM_ENUM","interfacesDiff","getInterfaces","newInterface","IMPLEMENTED_INTERFACE_ADDED","oldInterface","IMPLEMENTED_INTERFACE_REMOVED","findArgChanges","isChangeSafeForObjectOrInterfaceField","ARG_REMOVED","ARG_CHANGED_KIND","defaultValue","undefined","ARG_DEFAULT_VALUE_CHANGE","oldValueStr","stringifyValue","newValueStr","REQUIRED_ARG_ADDED","OPTIONAL_ARG_ADDED","ofType","value","ast","oldArray","newArray","oldMap","newMap","oldItem","newItem"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/findBreakingChanges.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (isListType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      (isNonNullType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    (isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      isListType(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, ({ name }) => name);\n  const newMap = keyMap(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}