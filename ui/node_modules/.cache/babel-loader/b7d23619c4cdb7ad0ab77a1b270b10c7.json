{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { InvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\n\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n\n    _this.link = link;\n    return _this;\n  }\n\n  return LinkError;\n}(Error);\n\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n\n    if (isTerminating(firstLink)) {\n      __DEV__ && invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n      return firstLink;\n    }\n\n    var nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw __DEV__ ? new InvariantError('request is not implemented') : new InvariantError(19);\n  };\n\n  ApolloLink.prototype.onError = function (error, observer) {\n    if (observer && observer.error) {\n      observer.error(error);\n      return false;\n    }\n\n    throw error;\n  };\n\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n\n  return ApolloLink;\n}();\n\nexport { ApolloLink };","map":{"version":3,"mappings":"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","names":["InvariantError","invariant","Observable","validateOperation","createOperation","transformOperation","passthrough","op","forward","of","toLink","handler","ApolloLink","isTerminating","link","request","length","__extends","message","_super","_this","Error","links","empty","map","reduce","x","y","concat","test","left","right","leftLink","rightLink","operation","context","first","second","firstLink","__DEV__","LinkError","nextLink","split","next","error","observer","fn","onError"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/link/core/ApolloLink.ts"],"sourcesContent":["import { InvariantError, invariant } from '../../utilities/globals';\n\nimport { Observable, Observer } from '../../utilities';\nimport {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest\n} from './types';\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from '../utils';\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nclass LinkError extends Error {\n  public link?: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(operation => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest,\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation)),\n        ),\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler,\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        new LinkError(\n          `You are calling concat on a terminating link, which will have no effect`,\n          firstLink,\n        ),\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        operation =>\n          firstLink.request(\n            operation,\n            op => nextLink.request(op) || Observable.of(),\n          ) || Observable.of(),\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, op => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>,\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}