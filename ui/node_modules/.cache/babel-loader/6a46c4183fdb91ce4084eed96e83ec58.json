{"ast":null,"code":"import { number as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport BaseSchema from './schema';\n\nlet isNaN = value => value != +value;\n\nexport function create() {\n  return new NumberSchema();\n}\nexport default class NumberSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'number'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        let parsed = value;\n\n        if (typeof parsed === 'string') {\n          parsed = parsed.replace(/\\s/g, '');\n          if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n          parsed = +parsed;\n        }\n\n        if (this.isType(parsed)) return parsed;\n        return parseFloat(parsed);\n      });\n    });\n  }\n\n  _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  }\n\n  min(min) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.min;\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min\n      },\n\n      test(value) {\n        return isAbsent(value) || value >= this.resolve(min);\n      }\n\n    });\n  }\n\n  max(max) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.max;\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max\n      },\n\n      test(value) {\n        return isAbsent(value) || value <= this.resolve(max);\n      }\n\n    });\n  }\n\n  lessThan(less) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.lessThan;\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less\n      },\n\n      test(value) {\n        return isAbsent(value) || value < this.resolve(less);\n      }\n\n    });\n  }\n\n  moreThan(more) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.moreThan;\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more\n      },\n\n      test(value) {\n        return isAbsent(value) || value > this.resolve(more);\n      }\n\n    });\n  }\n\n  positive() {\n    let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.positive;\n    return this.moreThan(0, msg);\n  }\n\n  negative() {\n    let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.negative;\n    return this.lessThan(0, msg);\n  }\n\n  integer() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.integer;\n    return this.test({\n      name: 'integer',\n      message,\n      test: val => isAbsent(val) || Number.isInteger(val)\n    });\n  }\n\n  truncate() {\n    return this.transform(value => !isAbsent(value) ? value | 0 : value);\n  }\n\n  round(method) {\n    var _method;\n\n    let avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(value => !isAbsent(value) ? Math[method](value) : value);\n  }\n\n}\ncreate.prototype = NumberSchema.prototype; //\n// Number Interfaces\n//","map":{"version":3,"names":["number","locale","isAbsent","BaseSchema","isNaN","value","create","NumberSchema","constructor","type","withMutation","transform","parsed","replace","NaN","isType","parseFloat","_typeCheck","Number","valueOf","min","message","test","name","exclusive","params","resolve","max","lessThan","less","moreThan","more","positive","msg","negative","integer","val","isInteger","truncate","round","method","_method","avail","toLowerCase","indexOf","TypeError","join","Math","prototype"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/yup/es/number.js"],"sourcesContent":["import { number as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport BaseSchema from './schema';\n\nlet isNaN = value => value != +value;\n\nexport function create() {\n  return new NumberSchema();\n}\nexport default class NumberSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'number'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        let parsed = value;\n\n        if (typeof parsed === 'string') {\n          parsed = parsed.replace(/\\s/g, '');\n          if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n          parsed = +parsed;\n        }\n\n        if (this.isType(parsed)) return parsed;\n        return parseFloat(parsed);\n      });\n    });\n  }\n\n  _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  }\n\n  min(min, message = locale.min) {\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min\n      },\n\n      test(value) {\n        return isAbsent(value) || value >= this.resolve(min);\n      }\n\n    });\n  }\n\n  max(max, message = locale.max) {\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max\n      },\n\n      test(value) {\n        return isAbsent(value) || value <= this.resolve(max);\n      }\n\n    });\n  }\n\n  lessThan(less, message = locale.lessThan) {\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less\n      },\n\n      test(value) {\n        return isAbsent(value) || value < this.resolve(less);\n      }\n\n    });\n  }\n\n  moreThan(more, message = locale.moreThan) {\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more\n      },\n\n      test(value) {\n        return isAbsent(value) || value > this.resolve(more);\n      }\n\n    });\n  }\n\n  positive(msg = locale.positive) {\n    return this.moreThan(0, msg);\n  }\n\n  negative(msg = locale.negative) {\n    return this.lessThan(0, msg);\n  }\n\n  integer(message = locale.integer) {\n    return this.test({\n      name: 'integer',\n      message,\n      test: val => isAbsent(val) || Number.isInteger(val)\n    });\n  }\n\n  truncate() {\n    return this.transform(value => !isAbsent(value) ? value | 0 : value);\n  }\n\n  round(method) {\n    var _method;\n\n    let avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(value => !isAbsent(value) ? Math[method](value) : value);\n  }\n\n}\ncreate.prototype = NumberSchema.prototype; //\n// Number Interfaces\n//"],"mappings":"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"},"metadata":{},"sourceType":"module"}