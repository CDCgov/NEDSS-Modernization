{"ast":null,"code":"import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  const operations = [];\n  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (const definitionNode of documentAST.definitions) {\n    switch (definitionNode.kind) {\n      case Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);\n        break;\n\n      default: // ignore non-executable definitions\n\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n\n  const separatedDocumentASTs = Object.create(null);\n\n  for (const operation of operations) {\n    const dependencies = new Set();\n\n    for (const fragmentName of collectDependencies(operation.selectionSet)) {\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n\n    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(node => node === operation || node.kind === Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value))\n    };\n  }\n\n  return separatedDocumentASTs;\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    const immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (const toName of immediateDeps) {\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  const dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    }\n\n  });\n  return dependencies;\n}","map":{"version":3,"names":["Kind","visit","separateOperations","documentAST","operations","depGraph","Object","create","definitionNode","definitions","kind","OPERATION_DEFINITION","push","FRAGMENT_DEFINITION","name","value","collectDependencies","selectionSet","separatedDocumentASTs","operation","dependencies","Set","fragmentName","collectTransitiveDependencies","operationName","DOCUMENT","filter","node","has","collected","fromName","add","immediateDeps","undefined","toName","FragmentSpread"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/separateOperations.mjs"],"sourcesContent":["import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  const operations = [];\n  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (const definitionNode of documentAST.definitions) {\n    switch (definitionNode.kind) {\n      case Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(\n          definitionNode.selectionSet,\n        );\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  const separatedDocumentASTs = Object.create(null);\n\n  for (const operation of operations) {\n    const dependencies = new Set();\n\n    for (const fragmentName of collectDependencies(operation.selectionSet)) {\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(\n        (node) =>\n          node === operation ||\n          (node.kind === Kind.FRAGMENT_DEFINITION &&\n            dependencies.has(node.name.value)),\n      ),\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    const immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (const toName of immediateDeps) {\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  const dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    },\n  });\n  return dependencies;\n}\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,WAA5B,EAAyC;EAC9C,MAAMC,UAAU,GAAG,EAAnB;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB,CAF8C,CAER;;EAEtC,KAAK,MAAMC,cAAX,IAA6BL,WAAW,CAACM,WAAzC,EAAsD;IACpD,QAAQD,cAAc,CAACE,IAAvB;MACE,KAAKV,IAAI,CAACW,oBAAV;QACEP,UAAU,CAACQ,IAAX,CAAgBJ,cAAhB;QACA;;MAEF,KAAKR,IAAI,CAACa,mBAAV;QACER,QAAQ,CAACG,cAAc,CAACM,IAAf,CAAoBC,KAArB,CAAR,GAAsCC,mBAAmB,CACvDR,cAAc,CAACS,YADwC,CAAzD;QAGA;;MAEF,QAXF,CAWW;;IAXX;EAaD,CAlB6C,CAkB5C;EACF;;;EAEA,MAAMC,qBAAqB,GAAGZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA9B;;EAEA,KAAK,MAAMY,SAAX,IAAwBf,UAAxB,EAAoC;IAClC,MAAMgB,YAAY,GAAG,IAAIC,GAAJ,EAArB;;IAEA,KAAK,MAAMC,YAAX,IAA2BN,mBAAmB,CAACG,SAAS,CAACF,YAAX,CAA9C,EAAwE;MACtEM,6BAA6B,CAACH,YAAD,EAAef,QAAf,EAAyBiB,YAAzB,CAA7B;IACD,CALiC,CAKhC;;;IAEF,MAAME,aAAa,GAAGL,SAAS,CAACL,IAAV,GAAiBK,SAAS,CAACL,IAAV,CAAeC,KAAhC,GAAwC,EAA9D,CAPkC,CAOgC;IAClE;;IAEAG,qBAAqB,CAACM,aAAD,CAArB,GAAuC;MACrCd,IAAI,EAAEV,IAAI,CAACyB,QAD0B;MAErChB,WAAW,EAAEN,WAAW,CAACM,WAAZ,CAAwBiB,MAAxB,CACVC,IAAD,IACEA,IAAI,KAAKR,SAAT,IACCQ,IAAI,CAACjB,IAAL,KAAcV,IAAI,CAACa,mBAAnB,IACCO,YAAY,CAACQ,GAAb,CAAiBD,IAAI,CAACb,IAAL,CAAUC,KAA3B,CAJO;IAFwB,CAAvC;EASD;;EAED,OAAOG,qBAAP;AACD,C,CAED;AACA;;AACA,SAASK,6BAAT,CAAuCM,SAAvC,EAAkDxB,QAAlD,EAA4DyB,QAA5D,EAAsE;EACpE,IAAI,CAACD,SAAS,CAACD,GAAV,CAAcE,QAAd,CAAL,EAA8B;IAC5BD,SAAS,CAACE,GAAV,CAAcD,QAAd;IACA,MAAME,aAAa,GAAG3B,QAAQ,CAACyB,QAAD,CAA9B;;IAEA,IAAIE,aAAa,KAAKC,SAAtB,EAAiC;MAC/B,KAAK,MAAMC,MAAX,IAAqBF,aAArB,EAAoC;QAClCT,6BAA6B,CAACM,SAAD,EAAYxB,QAAZ,EAAsB6B,MAAtB,CAA7B;MACD;IACF;EACF;AACF;;AAED,SAASlB,mBAAT,CAA6BC,YAA7B,EAA2C;EACzC,MAAMG,YAAY,GAAG,EAArB;EACAnB,KAAK,CAACgB,YAAD,EAAe;IAClBkB,cAAc,CAACR,IAAD,EAAO;MACnBP,YAAY,CAACR,IAAb,CAAkBe,IAAI,CAACb,IAAL,CAAUC,KAA5B;IACD;;EAHiB,CAAf,CAAL;EAKA,OAAOK,YAAP;AACD"},"metadata":{},"sourceType":"module"}