{"ast":null,"code":"import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (var i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\"Names must only contain [_a-zA-Z0-9] but \\\"\".concat(name, \"\\\" does not.\"));\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\"Names must start with [_a-zA-Z] but \\\"\".concat(name, \"\\\" does not.\"));\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(\"Enum values cannot be named: \".concat(name));\n  }\n\n  return assertName(name);\n}","map":{"version":3,"names":["devAssert","GraphQLError","isNameContinue","isNameStart","assertName","name","length","i","charCodeAt","assertEnumValueName"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/type/assertName.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,kCAA5C;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;EAC/BA,IAAI,IAAI,IAAR,IAAgBL,SAAS,CAAC,KAAD,EAAQ,oBAAR,CAAzB;EACA,OAAOK,IAAP,KAAgB,QAAhB,IAA4BL,SAAS,CAAC,KAAD,EAAQ,+BAAR,CAArC;;EAEA,IAAIK,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;IACrB,MAAM,IAAIL,YAAJ,CAAiB,yCAAjB,CAAN;EACD;;EAED,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACC,MAAzB,EAAiC,EAAEC,CAAnC,EAAsC;IACpC,IAAI,CAACL,cAAc,CAACG,IAAI,CAACG,UAAL,CAAgBD,CAAhB,CAAD,CAAnB,EAAyC;MACvC,MAAM,IAAIN,YAAJ,sDACyCI,IADzC,kBAAN;IAGD;EACF;;EAED,IAAI,CAACF,WAAW,CAACE,IAAI,CAACG,UAAL,CAAgB,CAAhB,CAAD,CAAhB,EAAsC;IACpC,MAAM,IAAIP,YAAJ,iDACoCI,IADpC,kBAAN;EAGD;;EAED,OAAOA,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,mBAAT,CAA6BJ,IAA7B,EAAmC;EACxC,IAAIA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,OAA5B,IAAuCA,IAAI,KAAK,MAApD,EAA4D;IAC1D,MAAM,IAAIJ,YAAJ,wCAAiDI,IAAjD,EAAN;EACD;;EAED,OAAOD,UAAU,CAACC,IAAD,CAAjB;AACD"},"metadata":{},"sourceType":"module"}