{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\n\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map(name => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(`Unknown directive \"@${name}\".`, {\n          nodes: node\n        }));\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(new GraphQLError(`Directive \"@${name}\" may not be used on ${candidateLocation}.`, {\n          nodes: node\n        }));\n      }\n    }\n\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION:\n      {\n        const parentNode = ancestors[ancestors.length - 3];\n        'kind' in parentNode || invariant(false);\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n      }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}","map":{"version":3,"names":["inspect","invariant","GraphQLError","OperationTypeNode","DirectiveLocation","Kind","specifiedDirectives","KnownDirectivesRule","context","locationsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","name","locations","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","value","map","Directive","node","_key","_parent","_path","ancestors","reportError","nodes","candidateLocation","getDirectiveLocationForASTPath","includes","appliedTo","length","OPERATION_DEFINITION","getDirectiveLocationForOperation","operation","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE_DEFINITION","SCHEMA_DEFINITION","SCHEMA_EXTENSION","SCHEMA","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","SCALAR","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","OBJECT","FIELD_DEFINITION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","INTERFACE","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","UNION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","ENUM","ENUM_VALUE_DEFINITION","ENUM_VALUE","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","INPUT_OBJECT","INPUT_VALUE_DEFINITION","parentNode","INPUT_FIELD_DEFINITION","ARGUMENT_DEFINITION","QUERY","MUTATION","SUBSCRIPTION"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}