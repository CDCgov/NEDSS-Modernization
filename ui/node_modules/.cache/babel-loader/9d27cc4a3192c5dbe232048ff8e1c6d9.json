{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\n\nvar delModifier = function () {\n  return DELETE;\n};\n\nvar INVALIDATE = Object.create(null);\n\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n\n      if (id) {\n        var ref = makeReference(id);\n\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n\n        return ref;\n      }\n    };\n  }\n\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n\n    var dataId;\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    if (!incoming) return;\n    __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n\n    return evicted;\n  };\n\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n\n    return obj;\n  };\n\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n\n    if (newData) {\n      var __META = newData.__META,\n          rest_1 = __rest(newData, [\"__META\"]);\n\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n\n    return 0;\n  };\n\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n\n    return ids;\n  };\n\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n\n    if (idsToRemove.length) {\n      var root_1 = this;\n\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n\n    return idsToRemove;\n  };\n\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        }\n\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n\n    return this.refs[dataId];\n  };\n\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n\n  return EntityStore;\n}();\n\nexport { EntityStore };\n\nvar CacheGroup = function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n\n  return CacheGroup;\n}();\n\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n\n    function Root(_a) {\n      var policies = _a.policies,\n          _b = _a.resultCaching,\n          resultCaching = _b === void 0 ? true : _b,\n          seed = _a.seed;\n\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n\n    Root.prototype.addLayer = function (layerId, replay) {\n      return this.stump.addLayer(layerId, replay);\n    };\n\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n\n    return Root;\n  }(EntityStore);\n\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n\n    var parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n\n          if (!parentStoreObject) {\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            _this.group.dirty(dataId, \"__exists\");\n\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n\n    while (p.parent) p = p.parent;\n\n    return p.getStorage.apply(p, arguments);\n  };\n\n  return Layer;\n}(EntityStore);\n\nvar Stump = function (_super) {\n  __extends(Stump, _super);\n\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n\n  Stump.prototype.removeLayer = function () {\n    return this;\n  };\n\n  Stump.prototype.merge = function () {\n    return this.parent.merge.apply(this.parent, arguments);\n  };\n\n  return Stump;\n}(Layer);\n\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"mappings":"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","names":["invariant","dep","equal","Trie","isReference","makeReference","DeepMerger","maybeDeepFreeze","canUseWeakMap","isNonNullObject","hasOwn","fieldNameFromStoreName","DELETE","Object","create","delModifier","INVALIDATE","policies","group","objectOrReference","storeFieldName","_this","get","__ref","objOrRef","has","objOrIdOrRef","mergeIntoStore","identify","id","ref","merge","EntityStore","data","dataId","lookup","fieldName","depend","call","storeObject","rootTypenamesById","Layer","parent","dependOnExistence","older","newer","existing","incoming","__DEV__","merged","storeObjectReconciler","refs","caching","fieldsToDirty_1","__exists","keys","forEach","hasKeyArgs","__typename","dirty","fields","changedFields_1","needToMerge_1","allDeleted_1","sharedDetails_1","toReference","canRead","readField","fieldNameOrOptions","from","store","fieldValue","modify","newValue","__assign","storage","getStorage","args","typename","getFieldValue","getStoreFieldName","_a","options","limit","evicted","delete","evict","replace","obj","toObject","extraRootIds","getRootIdSet","push","length","__META","sort","newData","rest_1","retain","rootId","rootIds","count","ids","Set","add","snapshot","findChildRefIds","idsToRemove","root_1","found_1","root","workSet_1","child","key","keyMaker","lookupArray","arguments","resetCaching","CacheGroup","d","makeDepKey","maybeDependOnExistenceOfEntity","entityId","supportsResultCaching","__extends","_b","resultCaching","seed","_super","Stump","Root","layerId","replay","stump","addLayer","storageTrie","removeLayer","ownStoreObject","parentStoreObject","fromParent","p","apply","existingObject","incomingObject","property","existingValue","incomingValue"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/cache/inmemory/entityStore.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { dep, OptimisticDependencyFunction } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(\n    older: string | StoreObject,\n    newer: StoreObject | string,\n  ): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\"\n        ? this.lookup(dataId = older)\n        : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\"\n        ? this.lookup(dataId = newer)\n        : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(\n      typeof dataId === \"string\",\n      \"store.merge expects a string ID\",\n    );\n\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty.__typename &&\n            !(existing && existing.__typename) &&\n            // Since we return default root __typename strings\n            // automatically from store.get, we don't need to dirty the\n            // ROOT_QUERY.__typename field if merged.__typename is equal\n            // to the default string (usually \"Query\").\n            this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId as string, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(\n    options: Cache.EvictOptions,\n    limit: EntityStore,\n  ): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(key => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null,\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\",\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string,\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(dataId => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(storeFieldName => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(storeFieldName => {\n              if (!equal(ownStoreObject[storeFieldName],\n                         parentStoreObject[storeFieldName])) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group),\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge() {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge.apply(this.parent, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n"]},"metadata":{},"sourceType":"module"}