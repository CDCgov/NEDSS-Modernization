{"ast":null,"code":"import _objectSpread from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return _objectSpread(_objectSpread({}, valueNode), {}, {\n        fields: sortFields(valueNode.fields)\n      });\n\n    case Kind.LIST:\n      return _objectSpread(_objectSpread({}, valueNode), {}, {\n        values: valueNode.values.map(sortValueNode)\n      });\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields.map(function (fieldNode) {\n    return _objectSpread(_objectSpread({}, fieldNode), {}, {\n      value: sortValueNode(fieldNode.value)\n    });\n  }).sort(function (fieldA, fieldB) {\n    return naturalCompare(fieldA.name.value, fieldB.name.value);\n  });\n}","map":{"version":3,"names":["naturalCompare","Kind","sortValueNode","valueNode","kind","OBJECT","fields","sortFields","LIST","values","map","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","VARIABLE","fieldNode","value","sort","fieldA","fieldB","name"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/sortValueNode.mjs"],"sourcesContent":["import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n"],"mappings":";AAAA,SAASA,cAAT,QAA+B,+BAA/B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;EACvC,QAAQA,SAAS,CAACC,IAAlB;IACE,KAAKH,IAAI,CAACI,MAAV;MACE,uCAAYF,SAAZ;QAAuBG,MAAM,EAAEC,UAAU,CAACJ,SAAS,CAACG,MAAX;MAAzC;;IAEF,KAAKL,IAAI,CAACO,IAAV;MACE,uCAAYL,SAAZ;QAAuBM,MAAM,EAAEN,SAAS,CAACM,MAAV,CAAiBC,GAAjB,CAAqBR,aAArB;MAA/B;;IAEF,KAAKD,IAAI,CAACU,GAAV;IACA,KAAKV,IAAI,CAACW,KAAV;IACA,KAAKX,IAAI,CAACY,MAAV;IACA,KAAKZ,IAAI,CAACa,OAAV;IACA,KAAKb,IAAI,CAACc,IAAV;IACA,KAAKd,IAAI,CAACe,IAAV;IACA,KAAKf,IAAI,CAACgB,QAAV;MACE,OAAOd,SAAP;EAdJ;AAgBD;;AAED,SAASI,UAAT,CAAoBD,MAApB,EAA4B;EAC1B,OAAOA,MAAM,CACVI,GADI,CACA,UAACQ,SAAD;IAAA,uCACAA,SADA;MAEHC,KAAK,EAAEjB,aAAa,CAACgB,SAAS,CAACC,KAAX;IAFjB;EAAA,CADA,EAKJC,IALI,CAKC,UAACC,MAAD,EAASC,MAAT;IAAA,OACJtB,cAAc,CAACqB,MAAM,CAACE,IAAP,CAAYJ,KAAb,EAAoBG,MAAM,CAACC,IAAP,CAAYJ,KAAhC,CADV;EAAA,CALD,CAAP;AAQD"},"metadata":{},"sourceType":"module"}