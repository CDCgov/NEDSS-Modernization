{"ast":null,"code":"import { isPromise } from './isPromise.mjs';\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\n\nexport function promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = isPromise(accumulator) ? accumulator.then(resolved => callbackFn(resolved, value)) : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}","map":{"version":3,"names":["isPromise","promiseReduce","values","callbackFn","initialValue","accumulator","value","then","resolved"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/jsutils/promiseReduce.mjs"],"sourcesContent":["import { isPromise } from './isPromise.mjs';\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nexport function promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = isPromise(accumulator)\n      ? accumulator.then((resolved) => callbackFn(resolved, value))\n      : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,UAA/B,EAA2CC,YAA3C,EAAyD;EAC9D,IAAIC,WAAW,GAAGD,YAAlB;;EAEA,KAAK,MAAME,KAAX,IAAoBJ,MAApB,EAA4B;IAC1BG,WAAW,GAAGL,SAAS,CAACK,WAAD,CAAT,GACVA,WAAW,CAACE,IAAZ,CAAkBC,QAAD,IAAcL,UAAU,CAACK,QAAD,EAAWF,KAAX,CAAzC,CADU,GAEVH,UAAU,CAACE,WAAD,EAAcC,KAAd,CAFd;EAGD;;EAED,OAAOD,WAAP;AACD"},"metadata":{},"sourceType":"module"}