{"ast":null,"code":"import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { getNamedType, getNullableType, isInputObjectType, isLeafType, isListType, isNonNullType, isRequiredInputField } from '../../type/definition.mjs';\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\n\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      const fieldNodeMap = keyMap(node.fields, field => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(`Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`, {\n            nodes: node\n          }));\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(`Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` + didYouMean(suggestions), {\n          nodes: node\n        }));\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(`Expected value of type \"${inspect(type)}\", found ${print(node)}.`, {\n          nodes: node\n        }));\n      }\n    },\n\n    EnumValue: node => isValidValueNode(context, node),\n    IntValue: node => isValidValueNode(context, node),\n    FloatValue: node => isValidValueNode(context, node),\n    StringValue: node => isValidValueNode(context, node),\n    BooleanValue: node => isValidValueNode(context, node)\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(`Expected value of type \"${typeStr}\", found ${print(node)}.`, {\n      nodes: node\n    }));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    const parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(new GraphQLError(`Expected value of type \"${typeStr}\", found ${print(node)}.`, {\n        nodes: node\n      }));\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(`Expected value of type \"${typeStr}\", found ${print(node)}; ` + error.message, {\n        nodes: node,\n        originalError: error\n      }));\n    }\n  }\n}","map":{"version":3,"names":["didYouMean","inspect","keyMap","suggestionList","GraphQLError","print","getNamedType","getNullableType","isInputObjectType","isLeafType","isListType","isNonNullType","isRequiredInputField","ValuesOfCorrectTypeRule","context","ListValue","node","type","getParentInputType","isValidValueNode","ObjectValue","getInputType","fieldNodeMap","fields","field","name","value","fieldDef","Object","values","getFields","fieldNode","typeStr","reportError","nodes","ObjectField","parentType","fieldType","suggestions","keys","NullValue","EnumValue","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","undefined","error","message","originalError"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,8BAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SACEC,YADF,EAEEC,eAFF,EAGEC,iBAHF,EAIEC,UAJF,EAKEC,UALF,EAMEC,aANF,EAOEC,oBAPF,QAQO,2BARP;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;EAC/C,OAAO;IACLC,SAAS,CAACC,IAAD,EAAO;MACd;MACA;MACA,MAAMC,IAAI,GAAGV,eAAe,CAACO,OAAO,CAACI,kBAAR,EAAD,CAA5B;;MAEA,IAAI,CAACR,UAAU,CAACO,IAAD,CAAf,EAAuB;QACrBE,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAhB;QACA,OAAO,KAAP,CAFqB,CAEP;MACf;IACF,CAVI;;IAYLI,WAAW,CAACJ,IAAD,EAAO;MAChB,MAAMC,IAAI,GAAGX,YAAY,CAACQ,OAAO,CAACO,YAAR,EAAD,CAAzB;;MAEA,IAAI,CAACb,iBAAiB,CAACS,IAAD,CAAtB,EAA8B;QAC5BE,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAhB;QACA,OAAO,KAAP,CAF4B,CAEd;MACf,CANe,CAMd;;;MAEF,MAAMM,YAAY,GAAGpB,MAAM,CAACc,IAAI,CAACO,MAAN,EAAeC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,KAApC,CAA3B;;MAEA,KAAK,MAAMC,QAAX,IAAuBC,MAAM,CAACC,MAAP,CAAcZ,IAAI,CAACa,SAAL,EAAd,CAAvB,EAAwD;QACtD,MAAMC,SAAS,GAAGT,YAAY,CAACK,QAAQ,CAACF,IAAV,CAA9B;;QAEA,IAAI,CAACM,SAAD,IAAcnB,oBAAoB,CAACe,QAAD,CAAtC,EAAkD;UAChD,MAAMK,OAAO,GAAG/B,OAAO,CAAC0B,QAAQ,CAACV,IAAV,CAAvB;UACAH,OAAO,CAACmB,WAAR,CACE,IAAI7B,YAAJ,CACG,UAASa,IAAI,CAACQ,IAAK,IAAGE,QAAQ,CAACF,IAAK,uBAAsBO,OAAQ,qBADrE,EAEE;YACEE,KAAK,EAAElB;UADT,CAFF,CADF;QAQD;MACF;IACF,CArCI;;IAuCLmB,WAAW,CAACnB,IAAD,EAAO;MAChB,MAAMoB,UAAU,GAAG9B,YAAY,CAACQ,OAAO,CAACI,kBAAR,EAAD,CAA/B;MACA,MAAMmB,SAAS,GAAGvB,OAAO,CAACO,YAAR,EAAlB;;MAEA,IAAI,CAACgB,SAAD,IAAc7B,iBAAiB,CAAC4B,UAAD,CAAnC,EAAiD;QAC/C,MAAME,WAAW,GAAGnC,cAAc,CAChCa,IAAI,CAACS,IAAL,CAAUC,KADsB,EAEhCE,MAAM,CAACW,IAAP,CAAYH,UAAU,CAACN,SAAX,EAAZ,CAFgC,CAAlC;QAIAhB,OAAO,CAACmB,WAAR,CACE,IAAI7B,YAAJ,CACG,UAASY,IAAI,CAACS,IAAL,CAAUC,KAAM,6BAA4BU,UAAU,CAACX,IAAK,IAAtE,GACEzB,UAAU,CAACsC,WAAD,CAFd,EAGE;UACEJ,KAAK,EAAElB;QADT,CAHF,CADF;MASD;IACF,CA1DI;;IA4DLwB,SAAS,CAACxB,IAAD,EAAO;MACd,MAAMC,IAAI,GAAGH,OAAO,CAACO,YAAR,EAAb;;MAEA,IAAIV,aAAa,CAACM,IAAD,CAAjB,EAAyB;QACvBH,OAAO,CAACmB,WAAR,CACE,IAAI7B,YAAJ,CACG,2BAA0BH,OAAO,CAACgB,IAAD,CAAO,YAAWZ,KAAK,CAACW,IAAD,CAAO,GADlE,EAEE;UACEkB,KAAK,EAAElB;QADT,CAFF,CADF;MAQD;IACF,CAzEI;;IA2ELyB,SAAS,EAAGzB,IAAD,IAAUG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CA3EhC;IA4EL0B,QAAQ,EAAG1B,IAAD,IAAUG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CA5E/B;IA6EL2B,UAAU,EAAG3B,IAAD,IAAUG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CA7EjC;IA8EL4B,WAAW,EAAG5B,IAAD,IAAUG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CA9ElC;IA+EL6B,YAAY,EAAG7B,IAAD,IAAUG,gBAAgB,CAACL,OAAD,EAAUE,IAAV;EA/EnC,CAAP;AAiFD;AACD;AACA;AACA;AACA;;AAEA,SAASG,gBAAT,CAA0BL,OAA1B,EAAmCE,IAAnC,EAAyC;EACvC;EACA,MAAM8B,YAAY,GAAGhC,OAAO,CAACO,YAAR,EAArB;;EAEA,IAAI,CAACyB,YAAL,EAAmB;IACjB;EACD;;EAED,MAAM7B,IAAI,GAAGX,YAAY,CAACwC,YAAD,CAAzB;;EAEA,IAAI,CAACrC,UAAU,CAACQ,IAAD,CAAf,EAAuB;IACrB,MAAMe,OAAO,GAAG/B,OAAO,CAAC6C,YAAD,CAAvB;IACAhC,OAAO,CAACmB,WAAR,CACE,IAAI7B,YAAJ,CACG,2BAA0B4B,OAAQ,YAAW3B,KAAK,CAACW,IAAD,CAAO,GAD5D,EAEE;MACEkB,KAAK,EAAElB;IADT,CAFF,CADF;IAQA;EACD,CArBsC,CAqBrC;EACF;;;EAEA,IAAI;IACF,MAAM+B,WAAW,GAAG9B,IAAI,CAAC+B,YAAL,CAClBhC,IADkB,EAElBiC;IACA;IAHkB,CAApB;;IAMA,IAAIF,WAAW,KAAKE,SAApB,EAA+B;MAC7B,MAAMjB,OAAO,GAAG/B,OAAO,CAAC6C,YAAD,CAAvB;MACAhC,OAAO,CAACmB,WAAR,CACE,IAAI7B,YAAJ,CACG,2BAA0B4B,OAAQ,YAAW3B,KAAK,CAACW,IAAD,CAAO,GAD5D,EAEE;QACEkB,KAAK,EAAElB;MADT,CAFF,CADF;IAQD;EACF,CAlBD,CAkBE,OAAOkC,KAAP,EAAc;IACd,MAAMlB,OAAO,GAAG/B,OAAO,CAAC6C,YAAD,CAAvB;;IAEA,IAAII,KAAK,YAAY9C,YAArB,EAAmC;MACjCU,OAAO,CAACmB,WAAR,CAAoBiB,KAApB;IACD,CAFD,MAEO;MACLpC,OAAO,CAACmB,WAAR,CACE,IAAI7B,YAAJ,CACG,2BAA0B4B,OAAQ,YAAW3B,KAAK,CAACW,IAAD,CAAO,IAA1D,GACEkC,KAAK,CAACC,OAFV,EAGE;QACEjB,KAAK,EAAElB,IADT;QAEEoC,aAAa,EAAEF;MAFjB,CAHF,CADF;IAUD;EACF;AACF"},"metadata":{},"sourceType":"module"}