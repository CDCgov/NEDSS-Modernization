{"ast":null,"code":"import _objectSpread from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\n\nexport function buildASTSchema(documentAST, options) {\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDL(documentAST);\n  }\n\n  var emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false\n  };\n  var config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    var _iterator = _createForOfIteratorHelper(config.types),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var type = _step.value;\n\n        switch (type.name) {\n          // Note: While this could make early assertions to get the correctly\n          // typed values below, that would throw immediately while type system\n          // validation with validateSchema() will produce more actionable results.\n          case 'Query':\n            // @ts-expect-error validated in `validateSchema`\n            config.query = type;\n            break;\n\n          case 'Mutation':\n            // @ts-expect-error validated in `validateSchema`\n            config.mutation = type;\n            break;\n\n          case 'Subscription':\n            // @ts-expect-error validated in `validateSchema`\n            config.subscription = type;\n            break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  var directives = [].concat(_toConsumableArray(config.directives), _toConsumableArray(specifiedDirectives.filter(function (stdDirective) {\n    return config.directives.every(function (directive) {\n      return directive.name !== stdDirective.name;\n    });\n  })));\n  return new GraphQLSchema(_objectSpread(_objectSpread({}, config), {}, {\n    directives: directives\n  }));\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  var document = parse(source, {\n    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  });\n}","map":{"version":3,"names":["devAssert","Kind","parse","specifiedDirectives","GraphQLSchema","assertValidSDL","extendSchemaImpl","buildASTSchema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","emptySchemaConfig","description","undefined","types","directives","extensions","Object","create","extensionASTNodes","config","astNode","type","name","query","mutation","subscription","filter","stdDirective","every","directive","buildSchema","source","document","noLocation","allowLegacyFragmentVariables"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/buildASTSchema.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ...specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}