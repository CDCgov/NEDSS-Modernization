{"ast":null,"code":"import _classCallCheck from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Parser);\n\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  _createClass(Parser, [{\n    key: \"parseName\",\n    value: function parseName() {\n      var token = this.expectToken(TokenKind.NAME);\n      return this.node(token, {\n        kind: Kind.NAME,\n        value: token.value\n      });\n    } // Implements the parsing rules in the Document section.\n\n    /**\n     * Document : Definition+\n     */\n\n  }, {\n    key: \"parseDocument\",\n    value: function parseDocument() {\n      return this.node(this._lexer.token, {\n        kind: Kind.DOCUMENT,\n        definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF)\n      });\n    }\n    /**\n     * Definition :\n     *   - ExecutableDefinition\n     *   - TypeSystemDefinition\n     *   - TypeSystemExtension\n     *\n     * ExecutableDefinition :\n     *   - OperationDefinition\n     *   - FragmentDefinition\n     *\n     * TypeSystemDefinition :\n     *   - SchemaDefinition\n     *   - TypeDefinition\n     *   - DirectiveDefinition\n     *\n     * TypeDefinition :\n     *   - ScalarTypeDefinition\n     *   - ObjectTypeDefinition\n     *   - InterfaceTypeDefinition\n     *   - UnionTypeDefinition\n     *   - EnumTypeDefinition\n     *   - InputObjectTypeDefinition\n     */\n\n  }, {\n    key: \"parseDefinition\",\n    value: function parseDefinition() {\n      if (this.peek(TokenKind.BRACE_L)) {\n        return this.parseOperationDefinition();\n      } // Many definitions begin with a description and require a lookahead.\n\n\n      var hasDescription = this.peekDescription();\n      var keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;\n\n      if (keywordToken.kind === TokenKind.NAME) {\n        switch (keywordToken.value) {\n          case 'schema':\n            return this.parseSchemaDefinition();\n\n          case 'scalar':\n            return this.parseScalarTypeDefinition();\n\n          case 'type':\n            return this.parseObjectTypeDefinition();\n\n          case 'interface':\n            return this.parseInterfaceTypeDefinition();\n\n          case 'union':\n            return this.parseUnionTypeDefinition();\n\n          case 'enum':\n            return this.parseEnumTypeDefinition();\n\n          case 'input':\n            return this.parseInputObjectTypeDefinition();\n\n          case 'directive':\n            return this.parseDirectiveDefinition();\n        }\n\n        if (hasDescription) {\n          throw syntaxError(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');\n        }\n\n        switch (keywordToken.value) {\n          case 'query':\n          case 'mutation':\n          case 'subscription':\n            return this.parseOperationDefinition();\n\n          case 'fragment':\n            return this.parseFragmentDefinition();\n\n          case 'extend':\n            return this.parseTypeSystemExtension();\n        }\n      }\n\n      throw this.unexpected(keywordToken);\n    } // Implements the parsing rules in the Operations section.\n\n    /**\n     * OperationDefinition :\n     *  - SelectionSet\n     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n     */\n\n  }, {\n    key: \"parseOperationDefinition\",\n    value: function parseOperationDefinition() {\n      var start = this._lexer.token;\n\n      if (this.peek(TokenKind.BRACE_L)) {\n        return this.node(start, {\n          kind: Kind.OPERATION_DEFINITION,\n          operation: OperationTypeNode.QUERY,\n          name: undefined,\n          variableDefinitions: [],\n          directives: [],\n          selectionSet: this.parseSelectionSet()\n        });\n      }\n\n      var operation = this.parseOperationType();\n      var name;\n\n      if (this.peek(TokenKind.NAME)) {\n        name = this.parseName();\n      }\n\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: operation,\n        name: name,\n        variableDefinitions: this.parseVariableDefinitions(),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * OperationType : one of query mutation subscription\n     */\n\n  }, {\n    key: \"parseOperationType\",\n    value: function parseOperationType() {\n      var operationToken = this.expectToken(TokenKind.NAME);\n\n      switch (operationToken.value) {\n        case 'query':\n          return OperationTypeNode.QUERY;\n\n        case 'mutation':\n          return OperationTypeNode.MUTATION;\n\n        case 'subscription':\n          return OperationTypeNode.SUBSCRIPTION;\n      }\n\n      throw this.unexpected(operationToken);\n    }\n    /**\n     * VariableDefinitions : ( VariableDefinition+ )\n     */\n\n  }, {\n    key: \"parseVariableDefinitions\",\n    value: function parseVariableDefinitions() {\n      return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n    }\n    /**\n     * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n     */\n\n  }, {\n    key: \"parseVariableDefinition\",\n    value: function parseVariableDefinition() {\n      return this.node(this._lexer.token, {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: this.parseVariable(),\n        type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n        defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,\n        directives: this.parseConstDirectives()\n      });\n    }\n    /**\n     * Variable : $ Name\n     */\n\n  }, {\n    key: \"parseVariable\",\n    value: function parseVariable() {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.DOLLAR);\n      return this.node(start, {\n        kind: Kind.VARIABLE,\n        name: this.parseName()\n      });\n    }\n    /**\n     * ```\n     * SelectionSet : { Selection+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseSelectionSet\",\n    value: function parseSelectionSet() {\n      return this.node(this._lexer.token, {\n        kind: Kind.SELECTION_SET,\n        selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R)\n      });\n    }\n    /**\n     * Selection :\n     *   - Field\n     *   - FragmentSpread\n     *   - InlineFragment\n     */\n\n  }, {\n    key: \"parseSelection\",\n    value: function parseSelection() {\n      return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n    }\n    /**\n     * Field : Alias? Name Arguments? Directives? SelectionSet?\n     *\n     * Alias : Name :\n     */\n\n  }, {\n    key: \"parseField\",\n    value: function parseField() {\n      var start = this._lexer.token;\n      var nameOrAlias = this.parseName();\n      var alias;\n      var name;\n\n      if (this.expectOptionalToken(TokenKind.COLON)) {\n        alias = nameOrAlias;\n        name = this.parseName();\n      } else {\n        name = nameOrAlias;\n      }\n\n      return this.node(start, {\n        kind: Kind.FIELD,\n        alias: alias,\n        name: name,\n        arguments: this.parseArguments(false),\n        directives: this.parseDirectives(false),\n        selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined\n      });\n    }\n    /**\n     * Arguments[Const] : ( Argument[?Const]+ )\n     */\n\n  }, {\n    key: \"parseArguments\",\n    value: function parseArguments(isConst) {\n      var item = isConst ? this.parseConstArgument : this.parseArgument;\n      return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n    }\n    /**\n     * Argument[Const] : Name : Value[?Const]\n     */\n\n  }, {\n    key: \"parseArgument\",\n    value: function parseArgument() {\n      var isConst = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var start = this._lexer.token;\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      return this.node(start, {\n        kind: Kind.ARGUMENT,\n        name: name,\n        value: this.parseValueLiteral(isConst)\n      });\n    }\n  }, {\n    key: \"parseConstArgument\",\n    value: function parseConstArgument() {\n      return this.parseArgument(true);\n    } // Implements the parsing rules in the Fragments section.\n\n    /**\n     * Corresponds to both FragmentSpread and InlineFragment in the spec.\n     *\n     * FragmentSpread : ... FragmentName Directives?\n     *\n     * InlineFragment : ... TypeCondition? Directives? SelectionSet\n     */\n\n  }, {\n    key: \"parseFragment\",\n    value: function parseFragment() {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.SPREAD);\n      var hasTypeCondition = this.expectOptionalKeyword('on');\n\n      if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n        return this.node(start, {\n          kind: Kind.FRAGMENT_SPREAD,\n          name: this.parseFragmentName(),\n          directives: this.parseDirectives(false)\n        });\n      }\n\n      return this.node(start, {\n        kind: Kind.INLINE_FRAGMENT,\n        typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * FragmentDefinition :\n     *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n     *\n     * TypeCondition : NamedType\n     */\n\n  }, {\n    key: \"parseFragmentDefinition\",\n    value: function parseFragmentDefinition() {\n      var start = this._lexer.token;\n      this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n      // the grammar of FragmentDefinition:\n      //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n      if (this._options.allowLegacyFragmentVariables === true) {\n        return this.node(start, {\n          kind: Kind.FRAGMENT_DEFINITION,\n          name: this.parseFragmentName(),\n          variableDefinitions: this.parseVariableDefinitions(),\n          typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n          directives: this.parseDirectives(false),\n          selectionSet: this.parseSelectionSet()\n        });\n      }\n\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * FragmentName : Name but not `on`\n     */\n\n  }, {\n    key: \"parseFragmentName\",\n    value: function parseFragmentName() {\n      if (this._lexer.token.value === 'on') {\n        throw this.unexpected();\n      }\n\n      return this.parseName();\n    } // Implements the parsing rules in the Values section.\n\n    /**\n     * Value[Const] :\n     *   - [~Const] Variable\n     *   - IntValue\n     *   - FloatValue\n     *   - StringValue\n     *   - BooleanValue\n     *   - NullValue\n     *   - EnumValue\n     *   - ListValue[?Const]\n     *   - ObjectValue[?Const]\n     *\n     * BooleanValue : one of `true` `false`\n     *\n     * NullValue : `null`\n     *\n     * EnumValue : Name but not `true`, `false` or `null`\n     */\n\n  }, {\n    key: \"parseValueLiteral\",\n    value: function parseValueLiteral(isConst) {\n      var token = this._lexer.token;\n\n      switch (token.kind) {\n        case TokenKind.BRACKET_L:\n          return this.parseList(isConst);\n\n        case TokenKind.BRACE_L:\n          return this.parseObject(isConst);\n\n        case TokenKind.INT:\n          this.advanceLexer();\n          return this.node(token, {\n            kind: Kind.INT,\n            value: token.value\n          });\n\n        case TokenKind.FLOAT:\n          this.advanceLexer();\n          return this.node(token, {\n            kind: Kind.FLOAT,\n            value: token.value\n          });\n\n        case TokenKind.STRING:\n        case TokenKind.BLOCK_STRING:\n          return this.parseStringLiteral();\n\n        case TokenKind.NAME:\n          this.advanceLexer();\n\n          switch (token.value) {\n            case 'true':\n              return this.node(token, {\n                kind: Kind.BOOLEAN,\n                value: true\n              });\n\n            case 'false':\n              return this.node(token, {\n                kind: Kind.BOOLEAN,\n                value: false\n              });\n\n            case 'null':\n              return this.node(token, {\n                kind: Kind.NULL\n              });\n\n            default:\n              return this.node(token, {\n                kind: Kind.ENUM,\n                value: token.value\n              });\n          }\n\n        case TokenKind.DOLLAR:\n          if (isConst) {\n            this.expectToken(TokenKind.DOLLAR);\n\n            if (this._lexer.token.kind === TokenKind.NAME) {\n              var varName = this._lexer.token.value;\n              throw syntaxError(this._lexer.source, token.start, \"Unexpected variable \\\"$\".concat(varName, \"\\\" in constant value.\"));\n            } else {\n              throw this.unexpected(token);\n            }\n          }\n\n          return this.parseVariable();\n\n        default:\n          throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseConstValueLiteral\",\n    value: function parseConstValueLiteral() {\n      return this.parseValueLiteral(true);\n    }\n  }, {\n    key: \"parseStringLiteral\",\n    value: function parseStringLiteral() {\n      var token = this._lexer.token;\n      this.advanceLexer();\n      return this.node(token, {\n        kind: Kind.STRING,\n        value: token.value,\n        block: token.kind === TokenKind.BLOCK_STRING\n      });\n    }\n    /**\n     * ListValue[Const] :\n     *   - [ ]\n     *   - [ Value[?Const]+ ]\n     */\n\n  }, {\n    key: \"parseList\",\n    value: function parseList(isConst) {\n      var _this = this;\n\n      var item = function item() {\n        return _this.parseValueLiteral(isConst);\n      };\n\n      return this.node(this._lexer.token, {\n        kind: Kind.LIST,\n        values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)\n      });\n    }\n    /**\n     * ```\n     * ObjectValue[Const] :\n     *   - { }\n     *   - { ObjectField[?Const]+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseObject\",\n    value: function parseObject(isConst) {\n      var _this2 = this;\n\n      var item = function item() {\n        return _this2.parseObjectField(isConst);\n      };\n\n      return this.node(this._lexer.token, {\n        kind: Kind.OBJECT,\n        fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)\n      });\n    }\n    /**\n     * ObjectField[Const] : Name : Value[?Const]\n     */\n\n  }, {\n    key: \"parseObjectField\",\n    value: function parseObjectField(isConst) {\n      var start = this._lexer.token;\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      return this.node(start, {\n        kind: Kind.OBJECT_FIELD,\n        name: name,\n        value: this.parseValueLiteral(isConst)\n      });\n    } // Implements the parsing rules in the Directives section.\n\n    /**\n     * Directives[Const] : Directive[?Const]+\n     */\n\n  }, {\n    key: \"parseDirectives\",\n    value: function parseDirectives(isConst) {\n      var directives = [];\n\n      while (this.peek(TokenKind.AT)) {\n        directives.push(this.parseDirective(isConst));\n      }\n\n      return directives;\n    }\n  }, {\n    key: \"parseConstDirectives\",\n    value: function parseConstDirectives() {\n      return this.parseDirectives(true);\n    }\n    /**\n     * ```\n     * Directive[Const] : @ Name Arguments[?Const]?\n     * ```\n     */\n\n  }, {\n    key: \"parseDirective\",\n    value: function parseDirective(isConst) {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.AT);\n      return this.node(start, {\n        kind: Kind.DIRECTIVE,\n        name: this.parseName(),\n        arguments: this.parseArguments(isConst)\n      });\n    } // Implements the parsing rules in the Types section.\n\n    /**\n     * Type :\n     *   - NamedType\n     *   - ListType\n     *   - NonNullType\n     */\n\n  }, {\n    key: \"parseTypeReference\",\n    value: function parseTypeReference() {\n      var start = this._lexer.token;\n      var type;\n\n      if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n        var innerType = this.parseTypeReference();\n        this.expectToken(TokenKind.BRACKET_R);\n        type = this.node(start, {\n          kind: Kind.LIST_TYPE,\n          type: innerType\n        });\n      } else {\n        type = this.parseNamedType();\n      }\n\n      if (this.expectOptionalToken(TokenKind.BANG)) {\n        return this.node(start, {\n          kind: Kind.NON_NULL_TYPE,\n          type: type\n        });\n      }\n\n      return type;\n    }\n    /**\n     * NamedType : Name\n     */\n\n  }, {\n    key: \"parseNamedType\",\n    value: function parseNamedType() {\n      return this.node(this._lexer.token, {\n        kind: Kind.NAMED_TYPE,\n        name: this.parseName()\n      });\n    } // Implements the parsing rules in the Type Definition section.\n\n  }, {\n    key: \"peekDescription\",\n    value: function peekDescription() {\n      return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n    }\n    /**\n     * Description : StringValue\n     */\n\n  }, {\n    key: \"parseDescription\",\n    value: function parseDescription() {\n      if (this.peekDescription()) {\n        return this.parseStringLiteral();\n      }\n    }\n    /**\n     * ```\n     * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseSchemaDefinition\",\n    value: function parseSchemaDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('schema');\n      var directives = this.parseConstDirectives();\n      var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n      return this.node(start, {\n        kind: Kind.SCHEMA_DEFINITION,\n        description: description,\n        directives: directives,\n        operationTypes: operationTypes\n      });\n    }\n    /**\n     * OperationTypeDefinition : OperationType : NamedType\n     */\n\n  }, {\n    key: \"parseOperationTypeDefinition\",\n    value: function parseOperationTypeDefinition() {\n      var start = this._lexer.token;\n      var operation = this.parseOperationType();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseNamedType();\n      return this.node(start, {\n        kind: Kind.OPERATION_TYPE_DEFINITION,\n        operation: operation,\n        type: type\n      });\n    }\n    /**\n     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n     */\n\n  }, {\n    key: \"parseScalarTypeDefinition\",\n    value: function parseScalarTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('scalar');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.SCALAR_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * ObjectTypeDefinition :\n     *   Description?\n     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n     */\n\n  }, {\n    key: \"parseObjectTypeDefinition\",\n    value: function parseObjectTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('type');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.OBJECT_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ImplementsInterfaces :\n     *   - implements `&`? NamedType\n     *   - ImplementsInterfaces & NamedType\n     */\n\n  }, {\n    key: \"parseImplementsInterfaces\",\n    value: function parseImplementsInterfaces() {\n      return this.expectOptionalKeyword('implements') ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];\n    }\n    /**\n     * ```\n     * FieldsDefinition : { FieldDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseFieldsDefinition\",\n    value: function parseFieldsDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n    }\n    /**\n     * FieldDefinition :\n     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n     */\n\n  }, {\n    key: \"parseFieldDefinition\",\n    value: function parseFieldDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseName();\n      var args = this.parseArgumentDefs();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseTypeReference();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.FIELD_DEFINITION,\n        description: description,\n        name: name,\n        arguments: args,\n        type: type,\n        directives: directives\n      });\n    }\n    /**\n     * ArgumentsDefinition : ( InputValueDefinition+ )\n     */\n\n  }, {\n    key: \"parseArgumentDefs\",\n    value: function parseArgumentDefs() {\n      return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n    }\n    /**\n     * InputValueDefinition :\n     *   - Description? Name : Type DefaultValue? Directives[Const]?\n     */\n\n  }, {\n    key: \"parseInputValueDef\",\n    value: function parseInputValueDef() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseTypeReference();\n      var defaultValue;\n\n      if (this.expectOptionalToken(TokenKind.EQUALS)) {\n        defaultValue = this.parseConstValueLiteral();\n      }\n\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: description,\n        name: name,\n        type: type,\n        defaultValue: defaultValue,\n        directives: directives\n      });\n    }\n    /**\n     * InterfaceTypeDefinition :\n     *   - Description? interface Name Directives[Const]? FieldsDefinition?\n     */\n\n  }, {\n    key: \"parseInterfaceTypeDefinition\",\n    value: function parseInterfaceTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('interface');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.INTERFACE_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * UnionTypeDefinition :\n     *   - Description? union Name Directives[Const]? UnionMemberTypes?\n     */\n\n  }, {\n    key: \"parseUnionTypeDefinition\",\n    value: function parseUnionTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('union');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var types = this.parseUnionMemberTypes();\n      return this.node(start, {\n        kind: Kind.UNION_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        types: types\n      });\n    }\n    /**\n     * UnionMemberTypes :\n     *   - = `|`? NamedType\n     *   - UnionMemberTypes | NamedType\n     */\n\n  }, {\n    key: \"parseUnionMemberTypes\",\n    value: function parseUnionMemberTypes() {\n      return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n    }\n    /**\n     * EnumTypeDefinition :\n     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n     */\n\n  }, {\n    key: \"parseEnumTypeDefinition\",\n    value: function parseEnumTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('enum');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var values = this.parseEnumValuesDefinition();\n      return this.node(start, {\n        kind: Kind.ENUM_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        values: values\n      });\n    }\n    /**\n     * ```\n     * EnumValuesDefinition : { EnumValueDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseEnumValuesDefinition\",\n    value: function parseEnumValuesDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n    }\n    /**\n     * EnumValueDefinition : Description? EnumValue Directives[Const]?\n     */\n\n  }, {\n    key: \"parseEnumValueDefinition\",\n    value: function parseEnumValueDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseEnumValueName();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * EnumValue : Name but not `true`, `false` or `null`\n     */\n\n  }, {\n    key: \"parseEnumValueName\",\n    value: function parseEnumValueName() {\n      if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {\n        throw syntaxError(this._lexer.source, this._lexer.token.start, \"\".concat(getTokenDesc(this._lexer.token), \" is reserved and cannot be used for an enum value.\"));\n      }\n\n      return this.parseName();\n    }\n    /**\n     * InputObjectTypeDefinition :\n     *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n     */\n\n  }, {\n    key: \"parseInputObjectTypeDefinition\",\n    value: function parseInputObjectTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('input');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseInputFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ```\n     * InputFieldsDefinition : { InputValueDefinition+ }\n     * ```\n     */\n\n  }, {\n    key: \"parseInputFieldsDefinition\",\n    value: function parseInputFieldsDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n    }\n    /**\n     * TypeSystemExtension :\n     *   - SchemaExtension\n     *   - TypeExtension\n     *\n     * TypeExtension :\n     *   - ScalarTypeExtension\n     *   - ObjectTypeExtension\n     *   - InterfaceTypeExtension\n     *   - UnionTypeExtension\n     *   - EnumTypeExtension\n     *   - InputObjectTypeDefinition\n     */\n\n  }, {\n    key: \"parseTypeSystemExtension\",\n    value: function parseTypeSystemExtension() {\n      var keywordToken = this._lexer.lookahead();\n\n      if (keywordToken.kind === TokenKind.NAME) {\n        switch (keywordToken.value) {\n          case 'schema':\n            return this.parseSchemaExtension();\n\n          case 'scalar':\n            return this.parseScalarTypeExtension();\n\n          case 'type':\n            return this.parseObjectTypeExtension();\n\n          case 'interface':\n            return this.parseInterfaceTypeExtension();\n\n          case 'union':\n            return this.parseUnionTypeExtension();\n\n          case 'enum':\n            return this.parseEnumTypeExtension();\n\n          case 'input':\n            return this.parseInputObjectTypeExtension();\n        }\n      }\n\n      throw this.unexpected(keywordToken);\n    }\n    /**\n     * ```\n     * SchemaExtension :\n     *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n     *  - extend schema Directives[Const]\n     * ```\n     */\n\n  }, {\n    key: \"parseSchemaExtension\",\n    value: function parseSchemaExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('schema');\n      var directives = this.parseConstDirectives();\n      var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n      if (directives.length === 0 && operationTypes.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.SCHEMA_EXTENSION,\n        directives: directives,\n        operationTypes: operationTypes\n      });\n    }\n    /**\n     * ScalarTypeExtension :\n     *   - extend scalar Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseScalarTypeExtension\",\n    value: function parseScalarTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('scalar');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n\n      if (directives.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.SCALAR_TYPE_EXTENSION,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * ObjectTypeExtension :\n     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n     *  - extend type Name ImplementsInterfaces? Directives[Const]\n     *  - extend type Name ImplementsInterfaces\n     */\n\n  }, {\n    key: \"parseObjectTypeExtension\",\n    value: function parseObjectTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('type');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n\n      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.OBJECT_TYPE_EXTENSION,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * InterfaceTypeExtension :\n     *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n     *  - extend interface Name ImplementsInterfaces? Directives[Const]\n     *  - extend interface Name ImplementsInterfaces\n     */\n\n  }, {\n    key: \"parseInterfaceTypeExtension\",\n    value: function parseInterfaceTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('interface');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n\n      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.INTERFACE_TYPE_EXTENSION,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * UnionTypeExtension :\n     *   - extend union Name Directives[Const]? UnionMemberTypes\n     *   - extend union Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseUnionTypeExtension\",\n    value: function parseUnionTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('union');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var types = this.parseUnionMemberTypes();\n\n      if (directives.length === 0 && types.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.UNION_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        types: types\n      });\n    }\n    /**\n     * EnumTypeExtension :\n     *   - extend enum Name Directives[Const]? EnumValuesDefinition\n     *   - extend enum Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseEnumTypeExtension\",\n    value: function parseEnumTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('enum');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var values = this.parseEnumValuesDefinition();\n\n      if (directives.length === 0 && values.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.ENUM_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        values: values\n      });\n    }\n    /**\n     * InputObjectTypeExtension :\n     *   - extend input Name Directives[Const]? InputFieldsDefinition\n     *   - extend input Name Directives[Const]\n     */\n\n  }, {\n    key: \"parseInputObjectTypeExtension\",\n    value: function parseInputObjectTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('input');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseInputFieldsDefinition();\n\n      if (directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n\n      return this.node(start, {\n        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ```\n     * DirectiveDefinition :\n     *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n     * ```\n     */\n\n  }, {\n    key: \"parseDirectiveDefinition\",\n    value: function parseDirectiveDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('directive');\n      this.expectToken(TokenKind.AT);\n      var name = this.parseName();\n      var args = this.parseArgumentDefs();\n      var repeatable = this.expectOptionalKeyword('repeatable');\n      this.expectKeyword('on');\n      var locations = this.parseDirectiveLocations();\n      return this.node(start, {\n        kind: Kind.DIRECTIVE_DEFINITION,\n        description: description,\n        name: name,\n        arguments: args,\n        repeatable: repeatable,\n        locations: locations\n      });\n    }\n    /**\n     * DirectiveLocations :\n     *   - `|`? DirectiveLocation\n     *   - DirectiveLocations | DirectiveLocation\n     */\n\n  }, {\n    key: \"parseDirectiveLocations\",\n    value: function parseDirectiveLocations() {\n      return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n    }\n    /*\n     * DirectiveLocation :\n     *   - ExecutableDirectiveLocation\n     *   - TypeSystemDirectiveLocation\n     *\n     * ExecutableDirectiveLocation : one of\n     *   `QUERY`\n     *   `MUTATION`\n     *   `SUBSCRIPTION`\n     *   `FIELD`\n     *   `FRAGMENT_DEFINITION`\n     *   `FRAGMENT_SPREAD`\n     *   `INLINE_FRAGMENT`\n     *\n     * TypeSystemDirectiveLocation : one of\n     *   `SCHEMA`\n     *   `SCALAR`\n     *   `OBJECT`\n     *   `FIELD_DEFINITION`\n     *   `ARGUMENT_DEFINITION`\n     *   `INTERFACE`\n     *   `UNION`\n     *   `ENUM`\n     *   `ENUM_VALUE`\n     *   `INPUT_OBJECT`\n     *   `INPUT_FIELD_DEFINITION`\n     */\n\n  }, {\n    key: \"parseDirectiveLocation\",\n    value: function parseDirectiveLocation() {\n      var start = this._lexer.token;\n      var name = this.parseName();\n\n      if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n        return name;\n      }\n\n      throw this.unexpected(start);\n    } // Core parsing utility functions\n\n    /**\n     * Returns a node that, if configured to do so, sets a \"loc\" field as a\n     * location object, used to identify the place in the source that created a\n     * given parsed object.\n     */\n\n  }, {\n    key: \"node\",\n    value: function node(startToken, _node) {\n      if (this._options.noLocation !== true) {\n        _node.loc = new Location(startToken, this._lexer.lastToken, this._lexer.source);\n      }\n\n      return _node;\n    }\n    /**\n     * Determines if the next token is of a given kind\n     */\n\n  }, {\n    key: \"peek\",\n    value: function peek(kind) {\n      return this._lexer.token.kind === kind;\n    }\n    /**\n     * If the next token is of the given kind, return that token after advancing the lexer.\n     * Otherwise, do not change the parser state and throw an error.\n     */\n\n  }, {\n    key: \"expectToken\",\n    value: function expectToken(kind) {\n      var token = this._lexer.token;\n\n      if (token.kind === kind) {\n        this.advanceLexer();\n        return token;\n      }\n\n      throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n    }\n    /**\n     * If the next token is of the given kind, return \"true\" after advancing the lexer.\n     * Otherwise, do not change the parser state and return \"false\".\n     */\n\n  }, {\n    key: \"expectOptionalToken\",\n    value: function expectOptionalToken(kind) {\n      var token = this._lexer.token;\n\n      if (token.kind === kind) {\n        this.advanceLexer();\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * If the next token is a given keyword, advance the lexer.\n     * Otherwise, do not change the parser state and throw an error.\n     */\n\n  }, {\n    key: \"expectKeyword\",\n    value: function expectKeyword(value) {\n      var token = this._lexer.token;\n\n      if (token.kind === TokenKind.NAME && token.value === value) {\n        this.advanceLexer();\n      } else {\n        throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n      }\n    }\n    /**\n     * If the next token is a given keyword, return \"true\" after advancing the lexer.\n     * Otherwise, do not change the parser state and return \"false\".\n     */\n\n  }, {\n    key: \"expectOptionalKeyword\",\n    value: function expectOptionalKeyword(value) {\n      var token = this._lexer.token;\n\n      if (token.kind === TokenKind.NAME && token.value === value) {\n        this.advanceLexer();\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Helper function for creating an error when an unexpected lexed token is encountered.\n     */\n\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(atToken) {\n      var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n      return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n    }\n    /**\n     * Returns a possibly empty list of parse nodes, determined by the parseFn.\n     * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n\n  }, {\n    key: \"any\",\n    value: function any(openKind, parseFn, closeKind) {\n      this.expectToken(openKind);\n      var nodes = [];\n\n      while (!this.expectOptionalToken(closeKind)) {\n        nodes.push(parseFn.call(this));\n      }\n\n      return nodes;\n    }\n    /**\n     * Returns a list of parse nodes, determined by the parseFn.\n     * It can be empty only if open token is missing otherwise it will always return non-empty list\n     * that begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n\n  }, {\n    key: \"optionalMany\",\n    value: function optionalMany(openKind, parseFn, closeKind) {\n      if (this.expectOptionalToken(openKind)) {\n        var nodes = [];\n\n        do {\n          nodes.push(parseFn.call(this));\n        } while (!this.expectOptionalToken(closeKind));\n\n        return nodes;\n      }\n\n      return [];\n    }\n    /**\n     * Returns a non-empty list of parse nodes, determined by the parseFn.\n     * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n\n  }, {\n    key: \"many\",\n    value: function many(openKind, parseFn, closeKind) {\n      this.expectToken(openKind);\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n    /**\n     * Returns a non-empty list of parse nodes, determined by the parseFn.\n     * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n     * Advances the parser to the next lex token after last item in the list.\n     */\n\n  }, {\n    key: \"delimitedMany\",\n    value: function delimitedMany(delimiterKind, parseFn) {\n      this.expectOptionalToken(delimiterKind);\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (this.expectOptionalToken(delimiterKind));\n\n      return nodes;\n    }\n  }, {\n    key: \"advanceLexer\",\n    value: function advanceLexer() {\n      var maxTokens = this._options.maxTokens;\n\n      var token = this._lexer.advance();\n\n      if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n        ++this._tokenCounter;\n\n        if (this._tokenCounter > maxTokens) {\n          throw syntaxError(this._lexer.source, token.start, \"Document contains more that \".concat(maxTokens, \" tokens. Parsing aborted.\"));\n        }\n      }\n    }\n  }]);\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}","map":{"version":3,"names":["syntaxError","Location","OperationTypeNode","DirectiveLocation","Kind","isPunctuatorTokenKind","Lexer","isSource","Source","TokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseConstValue","parseConstValueLiteral","parseType","type","parseTypeReference","sourceObj","_lexer","_options","_tokenCounter","token","NAME","node","kind","DOCUMENT","definitions","many","parseDefinition","peek","BRACE_L","parseOperationDefinition","hasDescription","peekDescription","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","start","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","operation","QUERY","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","parseConstDirectives","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advanceLexer","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","BRACKET_R","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","innerType","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","description","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","AMP","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","Object","prototype","hasOwnProperty","call","startToken","noLocation","loc","lastToken","getTokenKindDesc","atToken","openKind","parseFn","closeKind","nodes","delimiterKind","maxTokens","advance"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/language/parser.mjs"],"sourcesContent":["import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}