{"ast":null,"code":"import _objectSpread from\"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13,_templateObject14,_templateObject15;import{gql}from'@apollo/client';import*as Apollo from'@apollo/client';var defaultOptions={};/** All built-in and custom scalars, mapped to their actual values */export var CaseStatus;(function(CaseStatus){CaseStatus[\"Confirmed\"]=\"CONFIRMED\";CaseStatus[\"NotACase\"]=\"NOT_A_CASE\";CaseStatus[\"Probable\"]=\"PROBABLE\";CaseStatus[\"Suspect\"]=\"SUSPECT\";CaseStatus[\"Unknown\"]=\"UNKNOWN\";})(CaseStatus||(CaseStatus={}));export var Deceased;(function(Deceased){Deceased[\"N\"]=\"N\";Deceased[\"Unk\"]=\"UNK\";Deceased[\"Y\"]=\"Y\";})(Deceased||(Deceased={}));export var EntryMethod;(function(EntryMethod){EntryMethod[\"Electronic\"]=\"ELECTRONIC\";EntryMethod[\"Manual\"]=\"MANUAL\";})(EntryMethod||(EntryMethod={}));export var Ethnicity;(function(Ethnicity){Ethnicity[\"HispanicOrLatino\"]=\"HISPANIC_OR_LATINO\";Ethnicity[\"NotHispanicOrLatino\"]=\"NOT_HISPANIC_OR_LATINO\";Ethnicity[\"Unknown\"]=\"UNKNOWN\";})(Ethnicity||(Ethnicity={}));export var EventStatus;(function(EventStatus){EventStatus[\"New\"]=\"NEW\";EventStatus[\"Update\"]=\"UPDATE\";})(EventStatus||(EventStatus={}));export var EventType;(function(EventType){EventType[\"Investigation\"]=\"INVESTIGATION\";EventType[\"LaboratoryReport\"]=\"LABORATORY_REPORT\";})(EventType||(EventType={}));export var Gender;(function(Gender){Gender[\"F\"]=\"F\";Gender[\"M\"]=\"M\";Gender[\"U\"]=\"U\";})(Gender||(Gender={}));export var IdentificationType;(function(IdentificationType){IdentificationType[\"AccountNumber\"]=\"ACCOUNT_NUMBER\";IdentificationType[\"AlternatePersonNumber\"]=\"ALTERNATE_PERSON_NUMBER\";IdentificationType[\"ChipIdentificationNumber\"]=\"CHIP_IDENTIFICATION_NUMBER\";IdentificationType[\"DriversLicenseNumber\"]=\"DRIVERS_LICENSE_NUMBER\";IdentificationType[\"ImmunizationRegistryId\"]=\"IMMUNIZATION_REGISTRY_ID\";IdentificationType[\"MedicaidNumber\"]=\"MEDICAID_NUMBER\";IdentificationType[\"MedicalRecordNumber\"]=\"MEDICAL_RECORD_NUMBER\";IdentificationType[\"MedicareNumber\"]=\"MEDICARE_NUMBER\";IdentificationType[\"MothersIdentifier\"]=\"MOTHERS_IDENTIFIER\";IdentificationType[\"NationalUniqueIndividualIdentifier\"]=\"NATIONAL_UNIQUE_INDIVIDUAL_IDENTIFIER\";IdentificationType[\"Other\"]=\"OTHER\";IdentificationType[\"PartnerServicesPatientNumber\"]=\"PARTNER_SERVICES_PATIENT_NUMBER\";IdentificationType[\"PatientExternalIdentifier\"]=\"PATIENT_EXTERNAL_IDENTIFIER\";IdentificationType[\"PatientInternalIdentifier\"]=\"PATIENT_INTERNAL_IDENTIFIER\";IdentificationType[\"PersonNumber\"]=\"PERSON_NUMBER\";IdentificationType[\"PrisonIdentificationNumber\"]=\"PRISON_IDENTIFICATION_NUMBER\";IdentificationType[\"RyanWhiteIdentifier\"]=\"RYAN_WHITE_IDENTIFIER\";IdentificationType[\"SocialSecurity\"]=\"SOCIAL_SECURITY\";IdentificationType[\"VisaPassport\"]=\"VISA_PASSPORT\";IdentificationType[\"WicIdentifier\"]=\"WIC_IDENTIFIER\";})(IdentificationType||(IdentificationType={}));export var InvestigationEventDateType;(function(InvestigationEventDateType){InvestigationEventDateType[\"DateOfReport\"]=\"DATE_OF_REPORT\";InvestigationEventDateType[\"InvestigationClosedDate\"]=\"INVESTIGATION_CLOSED_DATE\";InvestigationEventDateType[\"InvestigationCreateDate\"]=\"INVESTIGATION_CREATE_DATE\";InvestigationEventDateType[\"InvestigationStartDate\"]=\"INVESTIGATION_START_DATE\";InvestigationEventDateType[\"LastUpdateDate\"]=\"LAST_UPDATE_DATE\";InvestigationEventDateType[\"NotificationCreateDate\"]=\"NOTIFICATION_CREATE_DATE\";})(InvestigationEventDateType||(InvestigationEventDateType={}));export var InvestigationEventIdType;(function(InvestigationEventIdType){InvestigationEventIdType[\"AbcsCaseId\"]=\"ABCS_CASE_ID\";InvestigationEventIdType[\"CityCountyCaseId\"]=\"CITY_COUNTY_CASE_ID\";InvestigationEventIdType[\"InvestigationId\"]=\"INVESTIGATION_ID\";InvestigationEventIdType[\"NotificationId\"]=\"NOTIFICATION_ID\";InvestigationEventIdType[\"StateCaseId\"]=\"STATE_CASE_ID\";})(InvestigationEventIdType||(InvestigationEventIdType={}));export var InvestigationStatus;(function(InvestigationStatus){InvestigationStatus[\"Closed\"]=\"CLOSED\";InvestigationStatus[\"Open\"]=\"OPEN\";})(InvestigationStatus||(InvestigationStatus={}));export var LaboratoryEventIdType;(function(LaboratoryEventIdType){LaboratoryEventIdType[\"AccessionNumber\"]=\"ACCESSION_NUMBER\";LaboratoryEventIdType[\"LabId\"]=\"LAB_ID\";})(LaboratoryEventIdType||(LaboratoryEventIdType={}));export var LaboratoryReportEventDateType;(function(LaboratoryReportEventDateType){LaboratoryReportEventDateType[\"DateOfReport\"]=\"DATE_OF_REPORT\";LaboratoryReportEventDateType[\"DateOfSpecimenCollection\"]=\"DATE_OF_SPECIMEN_COLLECTION\";LaboratoryReportEventDateType[\"DateReceivedByPublicHealth\"]=\"DATE_RECEIVED_BY_PUBLIC_HEALTH\";LaboratoryReportEventDateType[\"LabReportCreateDate\"]=\"LAB_REPORT_CREATE_DATE\";LaboratoryReportEventDateType[\"LastUpdateDate\"]=\"LAST_UPDATE_DATE\";})(LaboratoryReportEventDateType||(LaboratoryReportEventDateType={}));export var LaboratoryReportStatus;(function(LaboratoryReportStatus){LaboratoryReportStatus[\"Processed\"]=\"PROCESSED\";LaboratoryReportStatus[\"Unprocessed\"]=\"UNPROCESSED\";})(LaboratoryReportStatus||(LaboratoryReportStatus={}));export var NotificationStatus;(function(NotificationStatus){NotificationStatus[\"Approved\"]=\"APPROVED\";NotificationStatus[\"Completed\"]=\"COMPLETED\";NotificationStatus[\"MessageFailed\"]=\"MESSAGE_FAILED\";NotificationStatus[\"PendingApproval\"]=\"PENDING_APPROVAL\";NotificationStatus[\"Rejected\"]=\"REJECTED\";})(NotificationStatus||(NotificationStatus={}));export var Operator;(function(Operator){Operator[\"After\"]=\"AFTER\";Operator[\"Before\"]=\"BEFORE\";Operator[\"Equal\"]=\"EQUAL\";})(Operator||(Operator={}));export var PhoneType;(function(PhoneType){PhoneType[\"Cell\"]=\"CELL\";PhoneType[\"Home\"]=\"HOME\";PhoneType[\"Work\"]=\"WORK\";})(PhoneType||(PhoneType={}));export var PregnancyStatus;(function(PregnancyStatus){PregnancyStatus[\"No\"]=\"NO\";PregnancyStatus[\"Unknown\"]=\"UNKNOWN\";PregnancyStatus[\"Yes\"]=\"YES\";})(PregnancyStatus||(PregnancyStatus={}));export var ProcessingStatus;(function(ProcessingStatus){ProcessingStatus[\"AwaitingInterview\"]=\"AWAITING_INTERVIEW\";ProcessingStatus[\"ClosedCase\"]=\"CLOSED_CASE\";ProcessingStatus[\"FieldFollowUp\"]=\"FIELD_FOLLOW_UP\";ProcessingStatus[\"NoFollowUp\"]=\"NO_FOLLOW_UP\";ProcessingStatus[\"OpenCase\"]=\"OPEN_CASE\";ProcessingStatus[\"SurveillanceFollowUp\"]=\"SURVEILLANCE_FOLLOW_UP\";})(ProcessingStatus||(ProcessingStatus={}));export var ProviderType;(function(ProviderType){ProviderType[\"OrderingFacility\"]=\"ORDERING_FACILITY\";ProviderType[\"OrderingProvider\"]=\"ORDERING_PROVIDER\";ProviderType[\"ReportingFacility\"]=\"REPORTING_FACILITY\";})(ProviderType||(ProviderType={}));export var Race;(function(Race){Race[\"AfricanAmerican\"]=\"AFRICAN_AMERICAN\";Race[\"AmericanIndianOrAlaskanNative\"]=\"AMERICAN_INDIAN_OR_ALASKAN_NATIVE\";Race[\"Asian\"]=\"ASIAN\";Race[\"NativeHawaiianOrPacificIslander\"]=\"NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER\";Race[\"NotAsked\"]=\"NOT_ASKED\";Race[\"OtherRace\"]=\"OTHER_RACE\";Race[\"RefusedToAnswer\"]=\"REFUSED_TO_ANSWER\";Race[\"Unknown\"]=\"UNKNOWN\";Race[\"White\"]=\"WHITE\";})(Race||(Race={}));export var RecordStatus;(function(RecordStatus){RecordStatus[\"Active\"]=\"ACTIVE\";RecordStatus[\"LogDel\"]=\"LOG_DEL\";})(RecordStatus||(RecordStatus={}));export var ReportingEntityType;(function(ReportingEntityType){ReportingEntityType[\"Facility\"]=\"FACILITY\";ReportingEntityType[\"Provider\"]=\"PROVIDER\";})(ReportingEntityType||(ReportingEntityType={}));export var SortDirection;(function(SortDirection){SortDirection[\"Asc\"]=\"ASC\";SortDirection[\"Desc\"]=\"DESC\";})(SortDirection||(SortDirection={}));export var Suffix;(function(Suffix){Suffix[\"Esq\"]=\"ESQ\";Suffix[\"Ii\"]=\"II\";Suffix[\"Iii\"]=\"III\";Suffix[\"Iv\"]=\"IV\";Suffix[\"Jr\"]=\"JR\";Suffix[\"Sr\"]=\"SR\";Suffix[\"V\"]=\"V\";})(Suffix||(Suffix={}));export var UserType;(function(UserType){UserType[\"External\"]=\"EXTERNAL\";UserType[\"Internal\"]=\"INTERNAL\";})(UserType||(UserType={}));export var CreatePatientDocument=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    mutation createPatient($patient: PersonInput!) {\\n  createPatient(patient: $patient) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    administrativeGenderCd\\n    ageCalc\\n    ageCalcTime\\n    ageCalcUnitCd\\n    ageCategoryCd\\n    ageReported\\n    ageReportedTime\\n    ageReportedUnitCd\\n    birthGenderCd\\n    birthOrderNbr\\n    birthTime\\n    birthTimeCalc\\n    cd\\n    cdDescTxt\\n    currSexCd\\n    deceasedIndCd\\n    deceasedTime\\n    description\\n    educationLevelCd\\n    educationLevelDescTxt\\n    ethnicGroupInd\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    maritalStatusCd\\n    maritalStatusDescTxt\\n    mothersMaidenNm\\n    multipleBirthInd\\n    occupationCd\\n    preferredGenderCd\\n    primLangCd\\n    primLangDescTxt\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    survivedIndCd\\n    userAffiliationTxt\\n    firstNm\\n    lastNm\\n    middleNm\\n    nmPrefix\\n    nmSuffix\\n    preferredNm\\n    hmStreetAddr1\\n    hmStreetAddr2\\n    hmCityCd\\n    hmCityDescTxt\\n    hmStateCd\\n    hmZipCd\\n    hmCntyCd\\n    hmCntryCd\\n    hmPhoneNbr\\n    hmPhoneCntryCd\\n    hmEmailAddr\\n    cellPhoneNbr\\n    wkStreetAddr1\\n    wkStreetAddr2\\n    wkCityCd\\n    wkCityDescTxt\\n    wkStateCd\\n    wkZipCd\\n    wkCntyCd\\n    wkCntryCd\\n    wkPhoneNbr\\n    wkPhoneCntryCd\\n    wkEmailAddr\\n    ssn\\n    medicaidNum\\n    dlNum\\n    dlStateCd\\n    raceCd\\n    raceSeqNbr\\n    raceCategoryCd\\n    ethnicityGroupCd\\n    ethnicGroupSeqNbr\\n    adultsInHouseNbr\\n    childrenInHouseNbr\\n    birthCityCd\\n    birthCityDescTxt\\n    birthCntryCd\\n    birthStateCd\\n    raceDescTxt\\n    ethnicGroupDescTxt\\n    versionCtrlNbr\\n    asOfDateAdmin\\n    asOfDateEthnicity\\n    asOfDateGeneral\\n    asOfDateMorbidity\\n    asOfDateSex\\n    electronicInd\\n    personParentUid\\n    dedupMatchInd\\n    groupNbr\\n    groupTime\\n    edxInd\\n    speaksEnglishCd\\n    additionalGenderCd\\n    eharsId\\n    ethnicUnkReasonCd\\n    sexUnkReasonCd\\n  }\\n}\\n    \"])));/**\n * __useCreatePatientMutation__\n *\n * To run a mutation, you first call `useCreatePatientMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePatientMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPatientMutation, { data, loading, error }] = useCreatePatientMutation({\n *   variables: {\n *      patient: // value for 'patient'\n *   },\n * });\n */export function useCreatePatientMutation(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useMutation(CreatePatientDocument,options);}export var FindAllCountryCodesDocument=gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    query findAllCountryCodes($page: Page) {\\n  findAllCountryCodes(page: $page) {\\n    id\\n    assigningAuthorityCd\\n    assigningAuthorityDescTxt\\n    codeDescTxt\\n    codeShortDescTxt\\n    effectiveFromTime\\n    effectiveToTime\\n    excludedTxt\\n    keyInfoTxt\\n    indentLevelNbr\\n    isModifiableInd\\n    parentIsCd\\n    statusCd\\n    statusTime\\n    codeSetNm\\n    seqNum\\n    nbsUid\\n    sourceConceptId\\n    codeSystemCd\\n    codeSystemDescTxt\\n  }\\n}\\n    \"])));/**\n * __useFindAllCountryCodesQuery__\n *\n * To run a query within a React component, call `useFindAllCountryCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllCountryCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllCountryCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindAllCountryCodesQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindAllCountryCodesDocument,options);}export function useFindAllCountryCodesLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindAllCountryCodesDocument,options);}export var FindAllJurisdictionsDocument=gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n    query findAllJurisdictions($page: Page) {\\n  findAllJurisdictions(page: $page) {\\n    id\\n    typeCd\\n    assigningAuthorityCd\\n    assigningAuthorityDescTxt\\n    codeDescTxt\\n    codeShortDescTxt\\n    effectiveFromTime\\n    effectiveToTime\\n    indentLevelNbr\\n    isModifiableInd\\n    parentIsCd\\n    stateDomainCd\\n    statusCd\\n    statusTime\\n    codeSetNm\\n    codeSeqNum\\n    nbsUid\\n    sourceConceptId\\n    codeSystemCd\\n    codeSystemDescTxt\\n    exportInd\\n  }\\n}\\n    \"])));/**\n * __useFindAllJurisdictionsQuery__\n *\n * To run a query within a React component, call `useFindAllJurisdictionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllJurisdictionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllJurisdictionsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindAllJurisdictionsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindAllJurisdictionsDocument,options);}export function useFindAllJurisdictionsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindAllJurisdictionsDocument,options);}export var FindAllOrganizationsDocument=gql(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n    query findAllOrganizations($page: Page) {\\n  findAllOrganizations(page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    cd\\n    cdDescTxt\\n    description\\n    durationAmt\\n    durationUnitCd\\n    fromTime\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    recordStatusCd\\n    recordStatusTime\\n    standardIndustryClassCd\\n    standardIndustryDescTxt\\n    statusCd\\n    statusTime\\n    toTime\\n    userAffiliationTxt\\n    displayNm\\n    streetAddr1\\n    streetAddr2\\n    cityCd\\n    cityDescTxt\\n    stateCd\\n    cntyCd\\n    cntryCd\\n    zipCd\\n    phoneNbr\\n    phoneCntryCd\\n    versionCtrlNbr\\n    electronicInd\\n    edxInd\\n  }\\n}\\n    \"])));/**\n * __useFindAllOrganizationsQuery__\n *\n * To run a query within a React component, call `useFindAllOrganizationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllOrganizationsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindAllOrganizationsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindAllOrganizationsDocument,options);}export function useFindAllOrganizationsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindAllOrganizationsDocument,options);}export var FindAllPatientsDocument=gql(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n    query findAllPatients($page: Page) {\\n  findAllPatients(page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    administrativeGenderCd\\n    ageCalc\\n    ageCalcTime\\n    ageCalcUnitCd\\n    ageCategoryCd\\n    ageReported\\n    ageReportedTime\\n    ageReportedUnitCd\\n    birthGenderCd\\n    birthOrderNbr\\n    birthTime\\n    birthTimeCalc\\n    cd\\n    cdDescTxt\\n    currSexCd\\n    deceasedIndCd\\n    deceasedTime\\n    description\\n    educationLevelCd\\n    educationLevelDescTxt\\n    ethnicGroupInd\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    maritalStatusCd\\n    maritalStatusDescTxt\\n    mothersMaidenNm\\n    multipleBirthInd\\n    occupationCd\\n    preferredGenderCd\\n    primLangCd\\n    primLangDescTxt\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    survivedIndCd\\n    userAffiliationTxt\\n    firstNm\\n    lastNm\\n    middleNm\\n    nmPrefix\\n    nmSuffix\\n    preferredNm\\n    hmStreetAddr1\\n    hmStreetAddr2\\n    hmCityCd\\n    hmCityDescTxt\\n    hmStateCd\\n    hmZipCd\\n    hmCntyCd\\n    hmCntryCd\\n    hmPhoneNbr\\n    hmPhoneCntryCd\\n    hmEmailAddr\\n    cellPhoneNbr\\n    wkStreetAddr1\\n    wkStreetAddr2\\n    wkCityCd\\n    wkCityDescTxt\\n    wkStateCd\\n    wkZipCd\\n    wkCntyCd\\n    wkCntryCd\\n    wkPhoneNbr\\n    wkPhoneCntryCd\\n    wkEmailAddr\\n    ssn\\n    medicaidNum\\n    dlNum\\n    dlStateCd\\n    raceCd\\n    raceSeqNbr\\n    raceCategoryCd\\n    ethnicityGroupCd\\n    ethnicGroupSeqNbr\\n    adultsInHouseNbr\\n    childrenInHouseNbr\\n    birthCityCd\\n    birthCityDescTxt\\n    birthCntryCd\\n    birthStateCd\\n    raceDescTxt\\n    ethnicGroupDescTxt\\n    versionCtrlNbr\\n    asOfDateAdmin\\n    asOfDateEthnicity\\n    asOfDateGeneral\\n    asOfDateMorbidity\\n    asOfDateSex\\n    electronicInd\\n    personParentUid\\n    dedupMatchInd\\n    groupNbr\\n    groupTime\\n    edxInd\\n    speaksEnglishCd\\n    additionalGenderCd\\n    eharsId\\n    ethnicUnkReasonCd\\n    sexUnkReasonCd\\n  }\\n}\\n    \"])));/**\n * __useFindAllPatientsQuery__\n *\n * To run a query within a React component, call `useFindAllPatientsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPatientsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPatientsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindAllPatientsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindAllPatientsDocument,options);}export function useFindAllPatientsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindAllPatientsDocument,options);}export var FindAllPlacesDocument=gql(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n    query findAllPlaces($page: Page) {\\n  findAllPlaces(page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    cd\\n    cdDescTxt\\n    description\\n    durationAmt\\n    durationUnitCd\\n    fromTime\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    nm\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    toTime\\n    userAffiliationTxt\\n    streetAddr1\\n    streetAddr2\\n    cityCd\\n    cityDescTxt\\n    stateCd\\n    zipCd\\n    cntyCd\\n    cntryCd\\n    phoneNbr\\n    phoneCntryCd\\n    versionCtrlNbr\\n  }\\n}\\n    \"])));/**\n * __useFindAllPlacesQuery__\n *\n * To run a query within a React component, call `useFindAllPlacesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPlacesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPlacesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindAllPlacesQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindAllPlacesDocument,options);}export function useFindAllPlacesLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindAllPlacesDocument,options);}export var FindAllStateCodesDocument=gql(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n    query findAllStateCodes($page: Page) {\\n  findAllStateCodes(page: $page) {\\n    id\\n    assigningAuthorityCd\\n    assigningAuthorityDescTxt\\n    stateNm\\n    codeDescTxt\\n    effectiveFromTime\\n    effectiveToTime\\n    excludedTxt\\n    indentLevelNbr\\n    isModifiableInd\\n    keyInfoTxt\\n    parentIsCd\\n    statusCd\\n    statusTime\\n    codeSetNm\\n    seqNum\\n    nbsUid\\n    sourceConceptId\\n    codeSystemCd\\n    codeSystemDescTxt\\n  }\\n}\\n    \"])));/**\n * __useFindAllStateCodesQuery__\n *\n * To run a query within a React component, call `useFindAllStateCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllStateCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllStateCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindAllStateCodesQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindAllStateCodesDocument,options);}export function useFindAllStateCodesLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindAllStateCodesDocument,options);}export var FindOrganizationByIdDocument=gql(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n    query findOrganizationById($id: ID!) {\\n  findOrganizationById(id: $id) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    cd\\n    cdDescTxt\\n    description\\n    durationAmt\\n    durationUnitCd\\n    fromTime\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    recordStatusCd\\n    recordStatusTime\\n    standardIndustryClassCd\\n    standardIndustryDescTxt\\n    statusCd\\n    statusTime\\n    toTime\\n    userAffiliationTxt\\n    displayNm\\n    streetAddr1\\n    streetAddr2\\n    cityCd\\n    cityDescTxt\\n    stateCd\\n    cntyCd\\n    cntryCd\\n    zipCd\\n    phoneNbr\\n    phoneCntryCd\\n    versionCtrlNbr\\n    electronicInd\\n    edxInd\\n  }\\n}\\n    \"])));/**\n * __useFindOrganizationByIdQuery__\n *\n * To run a query within a React component, call `useFindOrganizationByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useFindOrganizationByIdQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindOrganizationByIdDocument,options);}export function useFindOrganizationByIdLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindOrganizationByIdDocument,options);}export var FindOrganizationsByFilterDocument=gql(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n    query findOrganizationsByFilter($filter: OrganizationFilter!, $page: Page) {\\n  findOrganizationsByFilter(filter: $filter, page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    cd\\n    cdDescTxt\\n    description\\n    durationAmt\\n    durationUnitCd\\n    fromTime\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    recordStatusCd\\n    recordStatusTime\\n    standardIndustryClassCd\\n    standardIndustryDescTxt\\n    statusCd\\n    statusTime\\n    toTime\\n    userAffiliationTxt\\n    displayNm\\n    streetAddr1\\n    streetAddr2\\n    cityCd\\n    cityDescTxt\\n    stateCd\\n    cntyCd\\n    cntryCd\\n    zipCd\\n    phoneNbr\\n    phoneCntryCd\\n    versionCtrlNbr\\n    electronicInd\\n    edxInd\\n  }\\n}\\n    \"])));/**\n * __useFindOrganizationsByFilterQuery__\n *\n * To run a query within a React component, call `useFindOrganizationsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindOrganizationsByFilterQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindOrganizationsByFilterDocument,options);}export function useFindOrganizationsByFilterLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindOrganizationsByFilterDocument,options);}export var FindPatientByIdDocument=gql(_templateObject10||(_templateObject10=_taggedTemplateLiteral([\"\\n    query findPatientById($id: ID!) {\\n  findPatientById(id: $id) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    administrativeGenderCd\\n    ageCalc\\n    ageCalcTime\\n    ageCalcUnitCd\\n    ageCategoryCd\\n    ageReported\\n    ageReportedTime\\n    ageReportedUnitCd\\n    birthGenderCd\\n    birthOrderNbr\\n    birthTime\\n    birthTimeCalc\\n    cd\\n    cdDescTxt\\n    currSexCd\\n    deceasedIndCd\\n    deceasedTime\\n    description\\n    educationLevelCd\\n    educationLevelDescTxt\\n    ethnicGroupInd\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    maritalStatusCd\\n    maritalStatusDescTxt\\n    mothersMaidenNm\\n    multipleBirthInd\\n    occupationCd\\n    preferredGenderCd\\n    primLangCd\\n    primLangDescTxt\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    survivedIndCd\\n    userAffiliationTxt\\n    firstNm\\n    lastNm\\n    middleNm\\n    nmPrefix\\n    nmSuffix\\n    preferredNm\\n    hmStreetAddr1\\n    hmStreetAddr2\\n    hmCityCd\\n    hmCityDescTxt\\n    hmStateCd\\n    hmZipCd\\n    hmCntyCd\\n    hmCntryCd\\n    hmPhoneNbr\\n    hmPhoneCntryCd\\n    hmEmailAddr\\n    cellPhoneNbr\\n    wkStreetAddr1\\n    wkStreetAddr2\\n    wkCityCd\\n    wkCityDescTxt\\n    wkStateCd\\n    wkZipCd\\n    wkCntyCd\\n    wkCntryCd\\n    wkPhoneNbr\\n    wkPhoneCntryCd\\n    wkEmailAddr\\n    ssn\\n    medicaidNum\\n    dlNum\\n    dlStateCd\\n    raceCd\\n    raceSeqNbr\\n    raceCategoryCd\\n    ethnicityGroupCd\\n    ethnicGroupSeqNbr\\n    adultsInHouseNbr\\n    childrenInHouseNbr\\n    birthCityCd\\n    birthCityDescTxt\\n    birthCntryCd\\n    birthStateCd\\n    raceDescTxt\\n    ethnicGroupDescTxt\\n    versionCtrlNbr\\n    asOfDateAdmin\\n    asOfDateEthnicity\\n    asOfDateGeneral\\n    asOfDateMorbidity\\n    asOfDateSex\\n    electronicInd\\n    personParentUid\\n    dedupMatchInd\\n    groupNbr\\n    groupTime\\n    edxInd\\n    speaksEnglishCd\\n    additionalGenderCd\\n    eharsId\\n    ethnicUnkReasonCd\\n    sexUnkReasonCd\\n  }\\n}\\n    \"])));/**\n * __useFindPatientByIdQuery__\n *\n * To run a query within a React component, call `useFindPatientByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useFindPatientByIdQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindPatientByIdDocument,options);}export function useFindPatientByIdLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindPatientByIdDocument,options);}export var FindPatientsByEventDocument=gql(_templateObject11||(_templateObject11=_taggedTemplateLiteral([\"\\n    query findPatientsByEvent($filter: EventFilter!, $page: Page) {\\n  findPatientsByEvent(filter: $filter, page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    administrativeGenderCd\\n    ageCalc\\n    ageCalcTime\\n    ageCalcUnitCd\\n    ageCategoryCd\\n    ageReported\\n    ageReportedTime\\n    ageReportedUnitCd\\n    birthGenderCd\\n    birthOrderNbr\\n    birthTime\\n    birthTimeCalc\\n    cd\\n    cdDescTxt\\n    currSexCd\\n    deceasedIndCd\\n    deceasedTime\\n    description\\n    educationLevelCd\\n    educationLevelDescTxt\\n    ethnicGroupInd\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    maritalStatusCd\\n    maritalStatusDescTxt\\n    mothersMaidenNm\\n    multipleBirthInd\\n    occupationCd\\n    preferredGenderCd\\n    primLangCd\\n    primLangDescTxt\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    survivedIndCd\\n    userAffiliationTxt\\n    firstNm\\n    lastNm\\n    middleNm\\n    nmPrefix\\n    nmSuffix\\n    preferredNm\\n    hmStreetAddr1\\n    hmStreetAddr2\\n    hmCityCd\\n    hmCityDescTxt\\n    hmStateCd\\n    hmZipCd\\n    hmCntyCd\\n    hmCntryCd\\n    hmPhoneNbr\\n    hmPhoneCntryCd\\n    hmEmailAddr\\n    cellPhoneNbr\\n    wkStreetAddr1\\n    wkStreetAddr2\\n    wkCityCd\\n    wkCityDescTxt\\n    wkStateCd\\n    wkZipCd\\n    wkCntyCd\\n    wkCntryCd\\n    wkPhoneNbr\\n    wkPhoneCntryCd\\n    wkEmailAddr\\n    ssn\\n    medicaidNum\\n    dlNum\\n    dlStateCd\\n    raceCd\\n    raceSeqNbr\\n    raceCategoryCd\\n    ethnicityGroupCd\\n    ethnicGroupSeqNbr\\n    adultsInHouseNbr\\n    childrenInHouseNbr\\n    birthCityCd\\n    birthCityDescTxt\\n    birthCntryCd\\n    birthStateCd\\n    raceDescTxt\\n    ethnicGroupDescTxt\\n    versionCtrlNbr\\n    asOfDateAdmin\\n    asOfDateEthnicity\\n    asOfDateGeneral\\n    asOfDateMorbidity\\n    asOfDateSex\\n    electronicInd\\n    personParentUid\\n    dedupMatchInd\\n    groupNbr\\n    groupTime\\n    edxInd\\n    speaksEnglishCd\\n    additionalGenderCd\\n    eharsId\\n    ethnicUnkReasonCd\\n    sexUnkReasonCd\\n  }\\n}\\n    \"])));/**\n * __useFindPatientsByEventQuery__\n *\n * To run a query within a React component, call `useFindPatientsByEventQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByEventQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByEventQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindPatientsByEventQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindPatientsByEventDocument,options);}export function useFindPatientsByEventLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindPatientsByEventDocument,options);}export var FindPatientsByFilterDocument=gql(_templateObject12||(_templateObject12=_taggedTemplateLiteral([\"\\n    query findPatientsByFilter($filter: PersonFilter!, $page: Page) {\\n  findPatientsByFilter(filter: $filter, page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    administrativeGenderCd\\n    ageCalc\\n    ageCalcTime\\n    ageCalcUnitCd\\n    ageCategoryCd\\n    ageReported\\n    ageReportedTime\\n    ageReportedUnitCd\\n    birthGenderCd\\n    birthOrderNbr\\n    birthTime\\n    birthTimeCalc\\n    cd\\n    cdDescTxt\\n    currSexCd\\n    deceasedIndCd\\n    deceasedTime\\n    description\\n    educationLevelCd\\n    educationLevelDescTxt\\n    ethnicGroupInd\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    maritalStatusCd\\n    maritalStatusDescTxt\\n    mothersMaidenNm\\n    multipleBirthInd\\n    occupationCd\\n    preferredGenderCd\\n    primLangCd\\n    primLangDescTxt\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    survivedIndCd\\n    userAffiliationTxt\\n    firstNm\\n    lastNm\\n    middleNm\\n    nmPrefix\\n    nmSuffix\\n    preferredNm\\n    hmStreetAddr1\\n    hmStreetAddr2\\n    hmCityCd\\n    hmCityDescTxt\\n    hmStateCd\\n    hmZipCd\\n    hmCntyCd\\n    hmCntryCd\\n    hmPhoneNbr\\n    hmPhoneCntryCd\\n    hmEmailAddr\\n    cellPhoneNbr\\n    wkStreetAddr1\\n    wkStreetAddr2\\n    wkCityCd\\n    wkCityDescTxt\\n    wkStateCd\\n    wkZipCd\\n    wkCntyCd\\n    wkCntryCd\\n    wkPhoneNbr\\n    wkPhoneCntryCd\\n    wkEmailAddr\\n    ssn\\n    medicaidNum\\n    dlNum\\n    dlStateCd\\n    raceCd\\n    raceSeqNbr\\n    raceCategoryCd\\n    ethnicityGroupCd\\n    ethnicGroupSeqNbr\\n    adultsInHouseNbr\\n    childrenInHouseNbr\\n    birthCityCd\\n    birthCityDescTxt\\n    birthCntryCd\\n    birthStateCd\\n    raceDescTxt\\n    ethnicGroupDescTxt\\n    versionCtrlNbr\\n    asOfDateAdmin\\n    asOfDateEthnicity\\n    asOfDateGeneral\\n    asOfDateMorbidity\\n    asOfDateSex\\n    electronicInd\\n    personParentUid\\n    dedupMatchInd\\n    groupNbr\\n    groupTime\\n    edxInd\\n    speaksEnglishCd\\n    additionalGenderCd\\n    eharsId\\n    ethnicUnkReasonCd\\n    sexUnkReasonCd\\n  }\\n}\\n    \"])));/**\n * __useFindPatientsByFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindPatientsByFilterQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindPatientsByFilterDocument,options);}export function useFindPatientsByFilterLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindPatientsByFilterDocument,options);}export var FindPatientsByOrganizationFilterDocument=gql(_templateObject13||(_templateObject13=_taggedTemplateLiteral([\"\\n    query findPatientsByOrganizationFilter($filter: OrganizationFilter!, $page: Page) {\\n  findPatientsByOrganizationFilter(filter: $filter, page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    administrativeGenderCd\\n    ageCalc\\n    ageCalcTime\\n    ageCalcUnitCd\\n    ageCategoryCd\\n    ageReported\\n    ageReportedTime\\n    ageReportedUnitCd\\n    birthGenderCd\\n    birthOrderNbr\\n    birthTime\\n    birthTimeCalc\\n    cd\\n    cdDescTxt\\n    currSexCd\\n    deceasedIndCd\\n    deceasedTime\\n    description\\n    educationLevelCd\\n    educationLevelDescTxt\\n    ethnicGroupInd\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    maritalStatusCd\\n    maritalStatusDescTxt\\n    mothersMaidenNm\\n    multipleBirthInd\\n    occupationCd\\n    preferredGenderCd\\n    primLangCd\\n    primLangDescTxt\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    survivedIndCd\\n    userAffiliationTxt\\n    firstNm\\n    lastNm\\n    middleNm\\n    nmPrefix\\n    nmSuffix\\n    preferredNm\\n    hmStreetAddr1\\n    hmStreetAddr2\\n    hmCityCd\\n    hmCityDescTxt\\n    hmStateCd\\n    hmZipCd\\n    hmCntyCd\\n    hmCntryCd\\n    hmPhoneNbr\\n    hmPhoneCntryCd\\n    hmEmailAddr\\n    cellPhoneNbr\\n    wkStreetAddr1\\n    wkStreetAddr2\\n    wkCityCd\\n    wkCityDescTxt\\n    wkStateCd\\n    wkZipCd\\n    wkCntyCd\\n    wkCntryCd\\n    wkPhoneNbr\\n    wkPhoneCntryCd\\n    wkEmailAddr\\n    ssn\\n    medicaidNum\\n    dlNum\\n    dlStateCd\\n    raceCd\\n    raceSeqNbr\\n    raceCategoryCd\\n    ethnicityGroupCd\\n    ethnicGroupSeqNbr\\n    adultsInHouseNbr\\n    childrenInHouseNbr\\n    birthCityCd\\n    birthCityDescTxt\\n    birthCntryCd\\n    birthStateCd\\n    raceDescTxt\\n    ethnicGroupDescTxt\\n    versionCtrlNbr\\n    asOfDateAdmin\\n    asOfDateEthnicity\\n    asOfDateGeneral\\n    asOfDateMorbidity\\n    asOfDateSex\\n    electronicInd\\n    personParentUid\\n    dedupMatchInd\\n    groupNbr\\n    groupTime\\n    edxInd\\n    speaksEnglishCd\\n    additionalGenderCd\\n    eharsId\\n    ethnicUnkReasonCd\\n    sexUnkReasonCd\\n  }\\n}\\n    \"])));/**\n * __useFindPatientsByOrganizationFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByOrganizationFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByOrganizationFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByOrganizationFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindPatientsByOrganizationFilterQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindPatientsByOrganizationFilterDocument,options);}export function useFindPatientsByOrganizationFilterLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindPatientsByOrganizationFilterDocument,options);}export var FindPlaceByIdDocument=gql(_templateObject14||(_templateObject14=_taggedTemplateLiteral([\"\\n    query findPlaceById($id: ID!) {\\n  findPlaceById(id: $id) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    cd\\n    cdDescTxt\\n    description\\n    durationAmt\\n    durationUnitCd\\n    fromTime\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    nm\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    toTime\\n    userAffiliationTxt\\n    streetAddr1\\n    streetAddr2\\n    cityCd\\n    cityDescTxt\\n    stateCd\\n    zipCd\\n    cntyCd\\n    cntryCd\\n    phoneNbr\\n    phoneCntryCd\\n    versionCtrlNbr\\n  }\\n}\\n    \"])));/**\n * __useFindPlaceByIdQuery__\n *\n * To run a query within a React component, call `useFindPlaceByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlaceByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlaceByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useFindPlaceByIdQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindPlaceByIdDocument,options);}export function useFindPlaceByIdLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindPlaceByIdDocument,options);}export var FindPlacesByFilterDocument=gql(_templateObject15||(_templateObject15=_taggedTemplateLiteral([\"\\n    query findPlacesByFilter($filter: PlaceFilter!, $page: Page) {\\n  findPlacesByFilter(filter: $filter, page: $page) {\\n    id\\n    addReasonCd\\n    addTime\\n    addUserId\\n    cd\\n    cdDescTxt\\n    description\\n    durationAmt\\n    durationUnitCd\\n    fromTime\\n    lastChgReasonCd\\n    lastChgTime\\n    lastChgUserId\\n    localId\\n    nm\\n    recordStatusCd\\n    recordStatusTime\\n    statusCd\\n    statusTime\\n    toTime\\n    userAffiliationTxt\\n    streetAddr1\\n    streetAddr2\\n    cityCd\\n    cityDescTxt\\n    stateCd\\n    zipCd\\n    cntyCd\\n    cntryCd\\n    phoneNbr\\n    phoneCntryCd\\n    versionCtrlNbr\\n  }\\n}\\n    \"])));/**\n * __useFindPlacesByFilterQuery__\n *\n * To run a query within a React component, call `useFindPlacesByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlacesByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlacesByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */export function useFindPlacesByFilterQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(FindPlacesByFilterDocument,options);}export function useFindPlacesByFilterLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(FindPlacesByFilterDocument,options);}","map":{"version":3,"names":["gql","Apollo","defaultOptions","CaseStatus","Deceased","EntryMethod","Ethnicity","EventStatus","EventType","Gender","IdentificationType","InvestigationEventDateType","InvestigationEventIdType","InvestigationStatus","LaboratoryEventIdType","LaboratoryReportEventDateType","LaboratoryReportStatus","NotificationStatus","Operator","PhoneType","PregnancyStatus","ProcessingStatus","ProviderType","Race","RecordStatus","ReportingEntityType","SortDirection","Suffix","UserType","CreatePatientDocument","useCreatePatientMutation","baseOptions","options","useMutation","FindAllCountryCodesDocument","useFindAllCountryCodesQuery","useQuery","useFindAllCountryCodesLazyQuery","useLazyQuery","FindAllJurisdictionsDocument","useFindAllJurisdictionsQuery","useFindAllJurisdictionsLazyQuery","FindAllOrganizationsDocument","useFindAllOrganizationsQuery","useFindAllOrganizationsLazyQuery","FindAllPatientsDocument","useFindAllPatientsQuery","useFindAllPatientsLazyQuery","FindAllPlacesDocument","useFindAllPlacesQuery","useFindAllPlacesLazyQuery","FindAllStateCodesDocument","useFindAllStateCodesQuery","useFindAllStateCodesLazyQuery","FindOrganizationByIdDocument","useFindOrganizationByIdQuery","useFindOrganizationByIdLazyQuery","FindOrganizationsByFilterDocument","useFindOrganizationsByFilterQuery","useFindOrganizationsByFilterLazyQuery","FindPatientByIdDocument","useFindPatientByIdQuery","useFindPatientByIdLazyQuery","FindPatientsByEventDocument","useFindPatientsByEventQuery","useFindPatientsByEventLazyQuery","FindPatientsByFilterDocument","useFindPatientsByFilterQuery","useFindPatientsByFilterLazyQuery","FindPatientsByOrganizationFilterDocument","useFindPatientsByOrganizationFilterQuery","useFindPatientsByOrganizationFilterLazyQuery","FindPlaceByIdDocument","useFindPlaceByIdQuery","useFindPlaceByIdLazyQuery","FindPlacesByFilterDocument","useFindPlacesByFilterQuery","useFindPlacesByFilterLazyQuery"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/src/generated/graphql/schema.ts"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport enum CaseStatus {\n  Confirmed = 'CONFIRMED',\n  NotACase = 'NOT_A_CASE',\n  Probable = 'PROBABLE',\n  Suspect = 'SUSPECT',\n  Unknown = 'UNKNOWN'\n}\n\nexport type CaseStatuses = {\n  includeUnassigned: Scalars['Boolean'];\n  statusList: Array<CaseStatus>;\n};\n\nexport type CountryCode = {\n  __typename?: 'CountryCode';\n  assigningAuthorityCd?: Maybe<Scalars['String']>;\n  assigningAuthorityDescTxt?: Maybe<Scalars['String']>;\n  codeDescTxt?: Maybe<Scalars['String']>;\n  codeSetNm?: Maybe<Scalars['String']>;\n  codeShortDescTxt?: Maybe<Scalars['String']>;\n  codeSystemCd?: Maybe<Scalars['String']>;\n  codeSystemDescTxt?: Maybe<Scalars['String']>;\n  effectiveFromTime?: Maybe<Scalars['Date']>;\n  effectiveToTime?: Maybe<Scalars['Date']>;\n  excludedTxt?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  indentLevelNbr?: Maybe<Scalars['Int']>;\n  isModifiableInd?: Maybe<Scalars['String']>;\n  keyInfoTxt?: Maybe<Scalars['String']>;\n  nbsUid?: Maybe<Scalars['Int']>;\n  parentIsCd?: Maybe<Scalars['String']>;\n  seqNum?: Maybe<Scalars['Int']>;\n  sourceConceptId?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n};\n\nexport enum Deceased {\n  N = 'N',\n  Unk = 'UNK',\n  Y = 'Y'\n}\n\nexport enum EntryMethod {\n  Electronic = 'ELECTRONIC',\n  Manual = 'MANUAL'\n}\n\nexport enum Ethnicity {\n  HispanicOrLatino = 'HISPANIC_OR_LATINO',\n  NotHispanicOrLatino = 'NOT_HISPANIC_OR_LATINO',\n  Unknown = 'UNKNOWN'\n}\n\nexport type EventFilter = {\n  eventType: EventType;\n  investigationFilter?: InputMaybe<InvestigationFilter>;\n  laboratoryReportFilter?: InputMaybe<LaboratoryReportFilter>;\n};\n\nexport enum EventStatus {\n  New = 'NEW',\n  Update = 'UPDATE'\n}\n\nexport enum EventType {\n  Investigation = 'INVESTIGATION',\n  LaboratoryReport = 'LABORATORY_REPORT'\n}\n\nexport enum Gender {\n  F = 'F',\n  M = 'M',\n  U = 'U'\n}\n\nexport type Identification = {\n  identificationNumber: Scalars['String'];\n  identificationType: IdentificationType;\n};\n\nexport enum IdentificationType {\n  AccountNumber = 'ACCOUNT_NUMBER',\n  AlternatePersonNumber = 'ALTERNATE_PERSON_NUMBER',\n  ChipIdentificationNumber = 'CHIP_IDENTIFICATION_NUMBER',\n  DriversLicenseNumber = 'DRIVERS_LICENSE_NUMBER',\n  ImmunizationRegistryId = 'IMMUNIZATION_REGISTRY_ID',\n  MedicaidNumber = 'MEDICAID_NUMBER',\n  MedicalRecordNumber = 'MEDICAL_RECORD_NUMBER',\n  MedicareNumber = 'MEDICARE_NUMBER',\n  MothersIdentifier = 'MOTHERS_IDENTIFIER',\n  NationalUniqueIndividualIdentifier = 'NATIONAL_UNIQUE_INDIVIDUAL_IDENTIFIER',\n  Other = 'OTHER',\n  PartnerServicesPatientNumber = 'PARTNER_SERVICES_PATIENT_NUMBER',\n  PatientExternalIdentifier = 'PATIENT_EXTERNAL_IDENTIFIER',\n  PatientInternalIdentifier = 'PATIENT_INTERNAL_IDENTIFIER',\n  PersonNumber = 'PERSON_NUMBER',\n  PrisonIdentificationNumber = 'PRISON_IDENTIFICATION_NUMBER',\n  RyanWhiteIdentifier = 'RYAN_WHITE_IDENTIFIER',\n  SocialSecurity = 'SOCIAL_SECURITY',\n  VisaPassport = 'VISA_PASSPORT',\n  WicIdentifier = 'WIC_IDENTIFIER'\n}\n\nexport type InvestigationEventDateSearch = {\n  eventDateType: InvestigationEventDateType;\n  from: Scalars['Date'];\n  to: Scalars['Date'];\n};\n\nexport enum InvestigationEventDateType {\n  DateOfReport = 'DATE_OF_REPORT',\n  InvestigationClosedDate = 'INVESTIGATION_CLOSED_DATE',\n  InvestigationCreateDate = 'INVESTIGATION_CREATE_DATE',\n  InvestigationStartDate = 'INVESTIGATION_START_DATE',\n  LastUpdateDate = 'LAST_UPDATE_DATE',\n  NotificationCreateDate = 'NOTIFICATION_CREATE_DATE'\n}\n\nexport enum InvestigationEventIdType {\n  AbcsCaseId = 'ABCS_CASE_ID',\n  CityCountyCaseId = 'CITY_COUNTY_CASE_ID',\n  InvestigationId = 'INVESTIGATION_ID',\n  NotificationId = 'NOTIFICATION_ID',\n  StateCaseId = 'STATE_CASE_ID'\n}\n\nexport type InvestigationFilter = {\n  caseStatuses?: InputMaybe<CaseStatuses>;\n  conditions?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  createdBy?: InputMaybe<Scalars['String']>;\n  eventDateSearch?: InputMaybe<InvestigationEventDateSearch>;\n  eventId?: InputMaybe<Scalars['String']>;\n  eventIdType?: InputMaybe<InvestigationEventIdType>;\n  investigationStatus?: InputMaybe<InvestigationStatus>;\n  investigatorId?: InputMaybe<Scalars['ID']>;\n  jurisdictions?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;\n  lastUpdatedBy?: InputMaybe<Scalars['String']>;\n  notificationStatuses?: InputMaybe<NotificationStatuses>;\n  outbreakNames?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  pregnancyStatus?: InputMaybe<PregnancyStatus>;\n  processingStatuses?: InputMaybe<ProcessingStatuses>;\n  programAreas?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  providerFacilitySearch?: InputMaybe<ProviderFacilitySearch>;\n};\n\nexport enum InvestigationStatus {\n  Closed = 'CLOSED',\n  Open = 'OPEN'\n}\n\nexport type Jurisdiction = {\n  __typename?: 'Jurisdiction';\n  assigningAuthorityCd?: Maybe<Scalars['String']>;\n  assigningAuthorityDescTxt?: Maybe<Scalars['String']>;\n  codeDescTxt?: Maybe<Scalars['String']>;\n  codeSeqNum?: Maybe<Scalars['Int']>;\n  codeSetNm?: Maybe<Scalars['String']>;\n  codeShortDescTxt?: Maybe<Scalars['String']>;\n  codeSystemCd?: Maybe<Scalars['String']>;\n  codeSystemDescTxt?: Maybe<Scalars['String']>;\n  effectiveFromTime?: Maybe<Scalars['Date']>;\n  effectiveToTime?: Maybe<Scalars['Date']>;\n  exportInd?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  indentLevelNbr?: Maybe<Scalars['Int']>;\n  isModifiableInd?: Maybe<Scalars['String']>;\n  nbsUid?: Maybe<Scalars['ID']>;\n  parentIsCd?: Maybe<Scalars['String']>;\n  sourceConceptId?: Maybe<Scalars['String']>;\n  stateDomainCd?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  typeCd: Scalars['String'];\n};\n\nexport type LabReportProviderSearch = {\n  providerId: Scalars['ID'];\n  providerType: ProviderType;\n};\n\nexport type LaboratoryEventDateSearch = {\n  eventDateType: LaboratoryReportEventDateType;\n  from: Scalars['Date'];\n  to: Scalars['Date'];\n};\n\nexport enum LaboratoryEventIdType {\n  AccessionNumber = 'ACCESSION_NUMBER',\n  LabId = 'LAB_ID'\n}\n\nexport enum LaboratoryReportEventDateType {\n  DateOfReport = 'DATE_OF_REPORT',\n  DateOfSpecimenCollection = 'DATE_OF_SPECIMEN_COLLECTION',\n  DateReceivedByPublicHealth = 'DATE_RECEIVED_BY_PUBLIC_HEALTH',\n  LabReportCreateDate = 'LAB_REPORT_CREATE_DATE',\n  LastUpdateDate = 'LAST_UPDATE_DATE'\n}\n\nexport type LaboratoryReportFilter = {\n  codedResult?: InputMaybe<Scalars['String']>;\n  createdBy?: InputMaybe<Scalars['ID']>;\n  enteredBy?: InputMaybe<Array<InputMaybe<UserType>>>;\n  entryMethods?: InputMaybe<Array<InputMaybe<EntryMethod>>>;\n  eventDateSearch?: InputMaybe<LaboratoryEventDateSearch>;\n  eventId?: InputMaybe<Scalars['String']>;\n  eventIdType?: InputMaybe<LaboratoryEventIdType>;\n  eventStatus?: InputMaybe<Array<InputMaybe<EventStatus>>>;\n  jurisdictions?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;\n  lastUpdatedBy?: InputMaybe<Scalars['ID']>;\n  pregnancyStatus?: InputMaybe<PregnancyStatus>;\n  processingStatus?: InputMaybe<Array<InputMaybe<LaboratoryReportStatus>>>;\n  programAreas?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  providerSearch?: InputMaybe<LabReportProviderSearch>;\n  resultedTest?: InputMaybe<Scalars['String']>;\n};\n\nexport enum LaboratoryReportStatus {\n  Processed = 'PROCESSED',\n  Unprocessed = 'UNPROCESSED'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createPatient: Person;\n};\n\n\nexport type MutationCreatePatientArgs = {\n  patient: PersonInput;\n};\n\nexport type Name = {\n  firstName?: InputMaybe<Scalars['String']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  middleName?: InputMaybe<Scalars['String']>;\n  suffix?: InputMaybe<Suffix>;\n};\n\nexport enum NotificationStatus {\n  Approved = 'APPROVED',\n  Completed = 'COMPLETED',\n  MessageFailed = 'MESSAGE_FAILED',\n  PendingApproval = 'PENDING_APPROVAL',\n  Rejected = 'REJECTED'\n}\n\nexport type NotificationStatuses = {\n  includeUnassigned: Scalars['Boolean'];\n  statusList: Array<NotificationStatus>;\n};\n\nexport enum Operator {\n  After = 'AFTER',\n  Before = 'BEFORE',\n  Equal = 'EQUAL'\n}\n\nexport type Organization = {\n  __typename?: 'Organization';\n  addReasonCd?: Maybe<Scalars['String']>;\n  addTime?: Maybe<Scalars['Date']>;\n  addUserId?: Maybe<Scalars['ID']>;\n  cd?: Maybe<Scalars['String']>;\n  cdDescTxt?: Maybe<Scalars['String']>;\n  cityCd?: Maybe<Scalars['String']>;\n  cityDescTxt?: Maybe<Scalars['String']>;\n  cntryCd?: Maybe<Scalars['String']>;\n  cntyCd?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  displayNm?: Maybe<Scalars['String']>;\n  durationAmt?: Maybe<Scalars['String']>;\n  durationUnitCd?: Maybe<Scalars['String']>;\n  edxInd?: Maybe<Scalars['String']>;\n  electronicInd?: Maybe<Scalars['String']>;\n  fromTime?: Maybe<Scalars['Date']>;\n  id?: Maybe<Scalars['ID']>;\n  lastChgReasonCd?: Maybe<Scalars['String']>;\n  lastChgTime?: Maybe<Scalars['Date']>;\n  lastChgUserId?: Maybe<Scalars['Int']>;\n  localId?: Maybe<Scalars['String']>;\n  phoneCntryCd?: Maybe<Scalars['String']>;\n  phoneNbr?: Maybe<Scalars['String']>;\n  recordStatusCd?: Maybe<Scalars['String']>;\n  recordStatusTime?: Maybe<Scalars['Date']>;\n  standardIndustryClassCd?: Maybe<Scalars['String']>;\n  standardIndustryDescTxt?: Maybe<Scalars['String']>;\n  stateCd?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  streetAddr1?: Maybe<Scalars['String']>;\n  streetAddr2?: Maybe<Scalars['String']>;\n  toTime?: Maybe<Scalars['Date']>;\n  userAffiliationTxt?: Maybe<Scalars['String']>;\n  versionCtrlNbr?: Maybe<Scalars['Int']>;\n  zipCd?: Maybe<Scalars['String']>;\n};\n\nexport type OrganizationFilter = {\n  cityCd?: InputMaybe<Scalars['String']>;\n  cityDescTxt?: InputMaybe<Scalars['String']>;\n  displayNm?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  stateCd?: InputMaybe<Scalars['String']>;\n  streetAddr1?: InputMaybe<Scalars['String']>;\n  streetAddr2?: InputMaybe<Scalars['String']>;\n  zipCd?: InputMaybe<Scalars['String']>;\n};\n\nexport type Page = {\n  pageNumber?: InputMaybe<Scalars['Int']>;\n  pageSize?: InputMaybe<Scalars['Int']>;\n};\n\nexport type Person = {\n  __typename?: 'Person';\n  addReasonCd?: Maybe<Scalars['String']>;\n  addTime?: Maybe<Scalars['Date']>;\n  addUserId?: Maybe<Scalars['ID']>;\n  additionalGenderCd?: Maybe<Gender>;\n  administrativeGenderCd?: Maybe<Gender>;\n  adultsInHouseNbr?: Maybe<Scalars['Int']>;\n  ageCalc?: Maybe<Scalars['Int']>;\n  ageCalcTime?: Maybe<Scalars['Date']>;\n  ageCalcUnitCd?: Maybe<Scalars['String']>;\n  ageCategoryCd?: Maybe<Scalars['String']>;\n  ageReported?: Maybe<Scalars['String']>;\n  ageReportedTime?: Maybe<Scalars['Date']>;\n  ageReportedUnitCd?: Maybe<Scalars['String']>;\n  asOfDateAdmin?: Maybe<Scalars['Date']>;\n  asOfDateEthnicity?: Maybe<Scalars['Date']>;\n  asOfDateGeneral?: Maybe<Scalars['Date']>;\n  asOfDateMorbidity?: Maybe<Scalars['Date']>;\n  asOfDateSex?: Maybe<Scalars['Date']>;\n  birthCityCd?: Maybe<Scalars['String']>;\n  birthCityDescTxt?: Maybe<Scalars['String']>;\n  birthCntryCd?: Maybe<Scalars['String']>;\n  birthGenderCd?: Maybe<Gender>;\n  birthOrderNbr?: Maybe<Scalars['Int']>;\n  birthStateCd?: Maybe<Scalars['String']>;\n  birthTime?: Maybe<Scalars['Date']>;\n  birthTimeCalc?: Maybe<Scalars['Date']>;\n  cd?: Maybe<Scalars['String']>;\n  cdDescTxt?: Maybe<Scalars['String']>;\n  cellPhoneNbr?: Maybe<Scalars['String']>;\n  childrenInHouseNbr?: Maybe<Scalars['Int']>;\n  currSexCd?: Maybe<Scalars['String']>;\n  deceasedIndCd?: Maybe<Scalars['String']>;\n  deceasedTime?: Maybe<Scalars['Date']>;\n  dedupMatchInd?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  dlNum?: Maybe<Scalars['String']>;\n  dlStateCd?: Maybe<Scalars['String']>;\n  educationLevelCd?: Maybe<Scalars['String']>;\n  educationLevelDescTxt?: Maybe<Scalars['String']>;\n  edxInd?: Maybe<Scalars['String']>;\n  eharsId?: Maybe<Scalars['String']>;\n  electronicInd?: Maybe<Scalars['String']>;\n  ethnicGroupDescTxt?: Maybe<Scalars['String']>;\n  ethnicGroupInd?: Maybe<Scalars['String']>;\n  ethnicGroupSeqNbr?: Maybe<Scalars['Int']>;\n  ethnicUnkReasonCd?: Maybe<Scalars['String']>;\n  ethnicityGroupCd?: Maybe<Scalars['String']>;\n  firstNm?: Maybe<Scalars['String']>;\n  groupNbr?: Maybe<Scalars['Int']>;\n  groupTime?: Maybe<Scalars['Date']>;\n  hmCityCd?: Maybe<Scalars['String']>;\n  hmCityDescTxt?: Maybe<Scalars['String']>;\n  hmCntryCd?: Maybe<Scalars['String']>;\n  hmCntyCd?: Maybe<Scalars['String']>;\n  hmEmailAddr?: Maybe<Scalars['String']>;\n  hmPhoneCntryCd?: Maybe<Scalars['String']>;\n  hmPhoneNbr?: Maybe<Scalars['String']>;\n  hmStateCd?: Maybe<Scalars['String']>;\n  hmStreetAddr1?: Maybe<Scalars['String']>;\n  hmStreetAddr2?: Maybe<Scalars['String']>;\n  hmZipCd?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  lastChgReasonCd?: Maybe<Scalars['String']>;\n  lastChgTime?: Maybe<Scalars['Date']>;\n  lastChgUserId?: Maybe<Scalars['ID']>;\n  lastNm?: Maybe<Scalars['String']>;\n  localId?: Maybe<Scalars['String']>;\n  maritalStatusCd?: Maybe<Scalars['String']>;\n  maritalStatusDescTxt?: Maybe<Scalars['String']>;\n  medicaidNum?: Maybe<Scalars['String']>;\n  middleNm?: Maybe<Scalars['String']>;\n  mothersMaidenNm?: Maybe<Scalars['String']>;\n  multipleBirthInd?: Maybe<Scalars['String']>;\n  nmPrefix?: Maybe<Scalars['String']>;\n  nmSuffix?: Maybe<Scalars['String']>;\n  occupationCd?: Maybe<Scalars['String']>;\n  personParentUid?: Maybe<Scalars['ID']>;\n  preferredGenderCd?: Maybe<Gender>;\n  preferredNm?: Maybe<Scalars['String']>;\n  primLangCd?: Maybe<Scalars['String']>;\n  primLangDescTxt?: Maybe<Scalars['String']>;\n  raceCategoryCd?: Maybe<Scalars['String']>;\n  raceCd?: Maybe<Scalars['String']>;\n  raceDescTxt?: Maybe<Scalars['String']>;\n  raceSeqNbr?: Maybe<Scalars['Int']>;\n  recordStatusCd?: Maybe<Scalars['String']>;\n  recordStatusTime?: Maybe<Scalars['Date']>;\n  sexUnkReasonCd?: Maybe<Scalars['String']>;\n  speaksEnglishCd?: Maybe<Scalars['String']>;\n  ssn?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  survivedIndCd?: Maybe<Scalars['String']>;\n  userAffiliationTxt?: Maybe<Scalars['String']>;\n  versionCtrlNbr?: Maybe<Scalars['Int']>;\n  wkCityCd?: Maybe<Scalars['String']>;\n  wkCityDescTxt?: Maybe<Scalars['String']>;\n  wkCntryCd?: Maybe<Scalars['String']>;\n  wkCntyCd?: Maybe<Scalars['String']>;\n  wkEmailAddr?: Maybe<Scalars['String']>;\n  wkPhoneCntryCd?: Maybe<Scalars['String']>;\n  wkPhoneNbr?: Maybe<Scalars['String']>;\n  wkStateCd?: Maybe<Scalars['String']>;\n  wkStreetAddr1?: Maybe<Scalars['String']>;\n  wkStreetAddr2?: Maybe<Scalars['String']>;\n  wkZipCd?: Maybe<Scalars['String']>;\n};\n\nexport type PersonFilter = {\n  DateOfBirth?: InputMaybe<Scalars['Date']>;\n  DateOfBirthOperator?: InputMaybe<Operator>;\n  address?: InputMaybe<Scalars['String']>;\n  city?: InputMaybe<Scalars['String']>;\n  country?: InputMaybe<Scalars['String']>;\n  deceased?: InputMaybe<Deceased>;\n  ethnicity?: InputMaybe<Ethnicity>;\n  firstName?: InputMaybe<Scalars['String']>;\n  gender?: InputMaybe<Gender>;\n  id?: InputMaybe<Scalars['ID']>;\n  identification?: InputMaybe<Identification>;\n  lastName?: InputMaybe<Scalars['String']>;\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  race?: InputMaybe<Race>;\n  recordStatus?: InputMaybe<RecordStatus>;\n  ssn?: InputMaybe<Scalars['String']>;\n  state?: InputMaybe<Scalars['String']>;\n  zip?: InputMaybe<Scalars['String']>;\n};\n\nexport type PersonInput = {\n  DateOfBirth?: InputMaybe<Scalars['Date']>;\n  addresses?: InputMaybe<Array<InputMaybe<PostalAddress>>>;\n  birthGender?: InputMaybe<Gender>;\n  currentGender?: InputMaybe<Gender>;\n  deceased?: InputMaybe<Deceased>;\n  emailAddresses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  ethnicity?: InputMaybe<Ethnicity>;\n  name?: InputMaybe<Name>;\n  phoneNumbers?: InputMaybe<Array<InputMaybe<PhoneNumber>>>;\n  race?: InputMaybe<Race>;\n  ssn?: InputMaybe<Scalars['String']>;\n};\n\nexport type PhoneNumber = {\n  extension?: InputMaybe<Scalars['String']>;\n  phoneNumber: Scalars['String'];\n  phoneType: PhoneType;\n};\n\nexport enum PhoneType {\n  Cell = 'CELL',\n  Home = 'HOME',\n  Work = 'WORK'\n}\n\nexport type Place = {\n  __typename?: 'Place';\n  addReasonCd?: Maybe<Scalars['String']>;\n  addTime?: Maybe<Scalars['Date']>;\n  addUserId?: Maybe<Scalars['Int']>;\n  cd?: Maybe<Scalars['String']>;\n  cdDescTxt?: Maybe<Scalars['String']>;\n  cityCd?: Maybe<Scalars['String']>;\n  cityDescTxt?: Maybe<Scalars['String']>;\n  cntryCd?: Maybe<Scalars['String']>;\n  cntyCd?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  durationAmt?: Maybe<Scalars['String']>;\n  durationUnitCd?: Maybe<Scalars['String']>;\n  fromTime?: Maybe<Scalars['Date']>;\n  id?: Maybe<Scalars['ID']>;\n  lastChgReasonCd?: Maybe<Scalars['String']>;\n  lastChgTime?: Maybe<Scalars['Date']>;\n  lastChgUserId?: Maybe<Scalars['Int']>;\n  localId?: Maybe<Scalars['String']>;\n  nm?: Maybe<Scalars['String']>;\n  phoneCntryCd?: Maybe<Scalars['String']>;\n  phoneNbr?: Maybe<Scalars['String']>;\n  recordStatusCd?: Maybe<Scalars['String']>;\n  recordStatusTime?: Maybe<Scalars['Date']>;\n  stateCd?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n  streetAddr1?: Maybe<Scalars['String']>;\n  streetAddr2?: Maybe<Scalars['String']>;\n  toTime?: Maybe<Scalars['Date']>;\n  userAffiliationTxt?: Maybe<Scalars['String']>;\n  versionCtrlNbr?: Maybe<Scalars['Int']>;\n  zipCd?: Maybe<Scalars['String']>;\n};\n\nexport type PlaceFilter = {\n  cityCd?: InputMaybe<Scalars['String']>;\n  cityDescTxt?: InputMaybe<Scalars['String']>;\n  description?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  nm?: InputMaybe<Scalars['String']>;\n  stateCd?: InputMaybe<Scalars['String']>;\n  streetAddr1?: InputMaybe<Scalars['String']>;\n  streetAddr2?: InputMaybe<Scalars['String']>;\n  zipCd?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostalAddress = {\n  censusTract?: InputMaybe<Scalars['String']>;\n  city?: InputMaybe<Scalars['String']>;\n  countryCode?: InputMaybe<Scalars['String']>;\n  countyCode?: InputMaybe<Scalars['String']>;\n  stateCode?: InputMaybe<Scalars['String']>;\n  streetAddress1?: InputMaybe<Scalars['String']>;\n  streetAddress2?: InputMaybe<Scalars['String']>;\n  zip?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PregnancyStatus {\n  No = 'NO',\n  Unknown = 'UNKNOWN',\n  Yes = 'YES'\n}\n\nexport enum ProcessingStatus {\n  AwaitingInterview = 'AWAITING_INTERVIEW',\n  ClosedCase = 'CLOSED_CASE',\n  FieldFollowUp = 'FIELD_FOLLOW_UP',\n  NoFollowUp = 'NO_FOLLOW_UP',\n  OpenCase = 'OPEN_CASE',\n  SurveillanceFollowUp = 'SURVEILLANCE_FOLLOW_UP'\n}\n\nexport type ProcessingStatuses = {\n  includeUnassigned: Scalars['Boolean'];\n  statusList: Array<ProcessingStatus>;\n};\n\nexport type ProviderFacilitySearch = {\n  entityType: ReportingEntityType;\n  id: Scalars['ID'];\n};\n\nexport enum ProviderType {\n  OrderingFacility = 'ORDERING_FACILITY',\n  OrderingProvider = 'ORDERING_PROVIDER',\n  ReportingFacility = 'REPORTING_FACILITY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  findAllCountryCodes: Array<Maybe<CountryCode>>;\n  findAllJurisdictions: Array<Maybe<Jurisdiction>>;\n  findAllOrganizations: Array<Maybe<Organization>>;\n  findAllPatients: Array<Maybe<Person>>;\n  findAllPlaces: Array<Maybe<Place>>;\n  findAllStateCodes: Array<Maybe<StateCode>>;\n  findOrganizationById?: Maybe<Organization>;\n  findOrganizationsByFilter: Array<Maybe<Organization>>;\n  findPatientById?: Maybe<Person>;\n  findPatientsByEvent: Array<Maybe<Person>>;\n  findPatientsByFilter: Array<Maybe<Person>>;\n  findPatientsByOrganizationFilter: Array<Maybe<Person>>;\n  findPlaceById?: Maybe<Place>;\n  findPlacesByFilter: Array<Maybe<Place>>;\n};\n\n\nexport type QueryFindAllCountryCodesArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllJurisdictionsArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllOrganizationsArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllPatientsArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllPlacesArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindAllStateCodesArgs = {\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindOrganizationByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFindOrganizationsByFilterArgs = {\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPatientByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFindPatientsByEventArgs = {\n  filter: EventFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPatientsByFilterArgs = {\n  filter: PersonFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPatientsByOrganizationFilterArgs = {\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n};\n\n\nexport type QueryFindPlaceByIdArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFindPlacesByFilterArgs = {\n  filter: PlaceFilter;\n  page?: InputMaybe<Page>;\n};\n\nexport enum Race {\n  AfricanAmerican = 'AFRICAN_AMERICAN',\n  AmericanIndianOrAlaskanNative = 'AMERICAN_INDIAN_OR_ALASKAN_NATIVE',\n  Asian = 'ASIAN',\n  NativeHawaiianOrPacificIslander = 'NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER',\n  NotAsked = 'NOT_ASKED',\n  OtherRace = 'OTHER_RACE',\n  RefusedToAnswer = 'REFUSED_TO_ANSWER',\n  Unknown = 'UNKNOWN',\n  White = 'WHITE'\n}\n\nexport enum RecordStatus {\n  Active = 'ACTIVE',\n  LogDel = 'LOG_DEL'\n}\n\nexport enum ReportingEntityType {\n  Facility = 'FACILITY',\n  Provider = 'PROVIDER'\n}\n\nexport enum SortDirection {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type StateCode = {\n  __typename?: 'StateCode';\n  assigningAuthorityCd?: Maybe<Scalars['String']>;\n  assigningAuthorityDescTxt?: Maybe<Scalars['String']>;\n  codeDescTxt?: Maybe<Scalars['String']>;\n  codeSetNm?: Maybe<Scalars['String']>;\n  codeSystemCd?: Maybe<Scalars['String']>;\n  codeSystemDescTxt?: Maybe<Scalars['String']>;\n  effectiveFromTime?: Maybe<Scalars['Date']>;\n  effectiveToTime?: Maybe<Scalars['Date']>;\n  excludedTxt?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  indentLevelNbr?: Maybe<Scalars['Int']>;\n  isModifiableInd?: Maybe<Scalars['String']>;\n  keyInfoTxt?: Maybe<Scalars['String']>;\n  nbsUid?: Maybe<Scalars['Int']>;\n  parentIsCd?: Maybe<Scalars['String']>;\n  seqNum?: Maybe<Scalars['Int']>;\n  sourceConceptId?: Maybe<Scalars['String']>;\n  stateNm?: Maybe<Scalars['String']>;\n  statusCd?: Maybe<Scalars['String']>;\n  statusTime?: Maybe<Scalars['Date']>;\n};\n\nexport enum Suffix {\n  Esq = 'ESQ',\n  Ii = 'II',\n  Iii = 'III',\n  Iv = 'IV',\n  Jr = 'JR',\n  Sr = 'SR',\n  V = 'V'\n}\n\nexport enum UserType {\n  External = 'EXTERNAL',\n  Internal = 'INTERNAL'\n}\n\nexport type CreatePatientMutationVariables = Exact<{\n  patient: PersonInput;\n}>;\n\n\nexport type CreatePatientMutation = { __typename?: 'Mutation', createPatient: { __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } };\n\nexport type FindAllCountryCodesQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllCountryCodesQuery = { __typename?: 'Query', findAllCountryCodes: Array<{ __typename?: 'CountryCode', id?: string | null, assigningAuthorityCd?: string | null, assigningAuthorityDescTxt?: string | null, codeDescTxt?: string | null, codeShortDescTxt?: string | null, effectiveFromTime?: any | null, effectiveToTime?: any | null, excludedTxt?: string | null, keyInfoTxt?: string | null, indentLevelNbr?: number | null, isModifiableInd?: string | null, parentIsCd?: string | null, statusCd?: string | null, statusTime?: any | null, codeSetNm?: string | null, seqNum?: number | null, nbsUid?: number | null, sourceConceptId?: string | null, codeSystemCd?: string | null, codeSystemDescTxt?: string | null } | null> };\n\nexport type FindAllJurisdictionsQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllJurisdictionsQuery = { __typename?: 'Query', findAllJurisdictions: Array<{ __typename?: 'Jurisdiction', id: string, typeCd: string, assigningAuthorityCd?: string | null, assigningAuthorityDescTxt?: string | null, codeDescTxt?: string | null, codeShortDescTxt?: string | null, effectiveFromTime?: any | null, effectiveToTime?: any | null, indentLevelNbr?: number | null, isModifiableInd?: string | null, parentIsCd?: string | null, stateDomainCd?: string | null, statusCd?: string | null, statusTime?: any | null, codeSetNm?: string | null, codeSeqNum?: number | null, nbsUid?: string | null, sourceConceptId?: string | null, codeSystemCd?: string | null, codeSystemDescTxt?: string | null, exportInd?: string | null } | null> };\n\nexport type FindAllOrganizationsQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllOrganizationsQuery = { __typename?: 'Query', findAllOrganizations: Array<{ __typename?: 'Organization', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, standardIndustryClassCd?: string | null, standardIndustryDescTxt?: string | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, displayNm?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, zipCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null, electronicInd?: string | null, edxInd?: string | null } | null> };\n\nexport type FindAllPatientsQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllPatientsQuery = { __typename?: 'Query', findAllPatients: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindAllPlacesQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllPlacesQuery = { __typename?: 'Query', findAllPlaces: Array<{ __typename?: 'Place', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: number | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, nm?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, zipCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null } | null> };\n\nexport type FindAllStateCodesQueryVariables = Exact<{\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindAllStateCodesQuery = { __typename?: 'Query', findAllStateCodes: Array<{ __typename?: 'StateCode', id?: string | null, assigningAuthorityCd?: string | null, assigningAuthorityDescTxt?: string | null, stateNm?: string | null, codeDescTxt?: string | null, effectiveFromTime?: any | null, effectiveToTime?: any | null, excludedTxt?: string | null, indentLevelNbr?: number | null, isModifiableInd?: string | null, keyInfoTxt?: string | null, parentIsCd?: string | null, statusCd?: string | null, statusTime?: any | null, codeSetNm?: string | null, seqNum?: number | null, nbsUid?: number | null, sourceConceptId?: string | null, codeSystemCd?: string | null, codeSystemDescTxt?: string | null } | null> };\n\nexport type FindOrganizationByIdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type FindOrganizationByIdQuery = { __typename?: 'Query', findOrganizationById?: { __typename?: 'Organization', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, standardIndustryClassCd?: string | null, standardIndustryDescTxt?: string | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, displayNm?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, zipCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null, electronicInd?: string | null, edxInd?: string | null } | null };\n\nexport type FindOrganizationsByFilterQueryVariables = Exact<{\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindOrganizationsByFilterQuery = { __typename?: 'Query', findOrganizationsByFilter: Array<{ __typename?: 'Organization', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, standardIndustryClassCd?: string | null, standardIndustryDescTxt?: string | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, displayNm?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, zipCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null, electronicInd?: string | null, edxInd?: string | null } | null> };\n\nexport type FindPatientByIdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type FindPatientByIdQuery = { __typename?: 'Query', findPatientById?: { __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null };\n\nexport type FindPatientsByEventQueryVariables = Exact<{\n  filter: EventFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPatientsByEventQuery = { __typename?: 'Query', findPatientsByEvent: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindPatientsByFilterQueryVariables = Exact<{\n  filter: PersonFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPatientsByFilterQuery = { __typename?: 'Query', findPatientsByFilter: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindPatientsByOrganizationFilterQueryVariables = Exact<{\n  filter: OrganizationFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPatientsByOrganizationFilterQuery = { __typename?: 'Query', findPatientsByOrganizationFilter: Array<{ __typename?: 'Person', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: string | null, administrativeGenderCd?: Gender | null, ageCalc?: number | null, ageCalcTime?: any | null, ageCalcUnitCd?: string | null, ageCategoryCd?: string | null, ageReported?: string | null, ageReportedTime?: any | null, ageReportedUnitCd?: string | null, birthGenderCd?: Gender | null, birthOrderNbr?: number | null, birthTime?: any | null, birthTimeCalc?: any | null, cd?: string | null, cdDescTxt?: string | null, currSexCd?: string | null, deceasedIndCd?: string | null, deceasedTime?: any | null, description?: string | null, educationLevelCd?: string | null, educationLevelDescTxt?: string | null, ethnicGroupInd?: string | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: string | null, localId?: string | null, maritalStatusCd?: string | null, maritalStatusDescTxt?: string | null, mothersMaidenNm?: string | null, multipleBirthInd?: string | null, occupationCd?: string | null, preferredGenderCd?: Gender | null, primLangCd?: string | null, primLangDescTxt?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, survivedIndCd?: string | null, userAffiliationTxt?: string | null, firstNm?: string | null, lastNm?: string | null, middleNm?: string | null, nmPrefix?: string | null, nmSuffix?: string | null, preferredNm?: string | null, hmStreetAddr1?: string | null, hmStreetAddr2?: string | null, hmCityCd?: string | null, hmCityDescTxt?: string | null, hmStateCd?: string | null, hmZipCd?: string | null, hmCntyCd?: string | null, hmCntryCd?: string | null, hmPhoneNbr?: string | null, hmPhoneCntryCd?: string | null, hmEmailAddr?: string | null, cellPhoneNbr?: string | null, wkStreetAddr1?: string | null, wkStreetAddr2?: string | null, wkCityCd?: string | null, wkCityDescTxt?: string | null, wkStateCd?: string | null, wkZipCd?: string | null, wkCntyCd?: string | null, wkCntryCd?: string | null, wkPhoneNbr?: string | null, wkPhoneCntryCd?: string | null, wkEmailAddr?: string | null, ssn?: string | null, medicaidNum?: string | null, dlNum?: string | null, dlStateCd?: string | null, raceCd?: string | null, raceSeqNbr?: number | null, raceCategoryCd?: string | null, ethnicityGroupCd?: string | null, ethnicGroupSeqNbr?: number | null, adultsInHouseNbr?: number | null, childrenInHouseNbr?: number | null, birthCityCd?: string | null, birthCityDescTxt?: string | null, birthCntryCd?: string | null, birthStateCd?: string | null, raceDescTxt?: string | null, ethnicGroupDescTxt?: string | null, versionCtrlNbr?: number | null, asOfDateAdmin?: any | null, asOfDateEthnicity?: any | null, asOfDateGeneral?: any | null, asOfDateMorbidity?: any | null, asOfDateSex?: any | null, electronicInd?: string | null, personParentUid?: string | null, dedupMatchInd?: string | null, groupNbr?: number | null, groupTime?: any | null, edxInd?: string | null, speaksEnglishCd?: string | null, additionalGenderCd?: Gender | null, eharsId?: string | null, ethnicUnkReasonCd?: string | null, sexUnkReasonCd?: string | null } | null> };\n\nexport type FindPlaceByIdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type FindPlaceByIdQuery = { __typename?: 'Query', findPlaceById?: { __typename?: 'Place', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: number | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, nm?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, zipCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null } | null };\n\nexport type FindPlacesByFilterQueryVariables = Exact<{\n  filter: PlaceFilter;\n  page?: InputMaybe<Page>;\n}>;\n\n\nexport type FindPlacesByFilterQuery = { __typename?: 'Query', findPlacesByFilter: Array<{ __typename?: 'Place', id?: string | null, addReasonCd?: string | null, addTime?: any | null, addUserId?: number | null, cd?: string | null, cdDescTxt?: string | null, description?: string | null, durationAmt?: string | null, durationUnitCd?: string | null, fromTime?: any | null, lastChgReasonCd?: string | null, lastChgTime?: any | null, lastChgUserId?: number | null, localId?: string | null, nm?: string | null, recordStatusCd?: string | null, recordStatusTime?: any | null, statusCd?: string | null, statusTime?: any | null, toTime?: any | null, userAffiliationTxt?: string | null, streetAddr1?: string | null, streetAddr2?: string | null, cityCd?: string | null, cityDescTxt?: string | null, stateCd?: string | null, zipCd?: string | null, cntyCd?: string | null, cntryCd?: string | null, phoneNbr?: string | null, phoneCntryCd?: string | null, versionCtrlNbr?: number | null } | null> };\n\n\nexport const CreatePatientDocument = gql`\n    mutation createPatient($patient: PersonInput!) {\n  createPatient(patient: $patient) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\nexport type CreatePatientMutationFn = Apollo.MutationFunction<CreatePatientMutation, CreatePatientMutationVariables>;\n\n/**\n * __useCreatePatientMutation__\n *\n * To run a mutation, you first call `useCreatePatientMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePatientMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPatientMutation, { data, loading, error }] = useCreatePatientMutation({\n *   variables: {\n *      patient: // value for 'patient'\n *   },\n * });\n */\nexport function useCreatePatientMutation(baseOptions?: Apollo.MutationHookOptions<CreatePatientMutation, CreatePatientMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePatientMutation, CreatePatientMutationVariables>(CreatePatientDocument, options);\n      }\nexport type CreatePatientMutationHookResult = ReturnType<typeof useCreatePatientMutation>;\nexport type CreatePatientMutationResult = Apollo.MutationResult<CreatePatientMutation>;\nexport type CreatePatientMutationOptions = Apollo.BaseMutationOptions<CreatePatientMutation, CreatePatientMutationVariables>;\nexport const FindAllCountryCodesDocument = gql`\n    query findAllCountryCodes($page: Page) {\n  findAllCountryCodes(page: $page) {\n    id\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    codeDescTxt\n    codeShortDescTxt\n    effectiveFromTime\n    effectiveToTime\n    excludedTxt\n    keyInfoTxt\n    indentLevelNbr\n    isModifiableInd\n    parentIsCd\n    statusCd\n    statusTime\n    codeSetNm\n    seqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n  }\n}\n    `;\n\n/**\n * __useFindAllCountryCodesQuery__\n *\n * To run a query within a React component, call `useFindAllCountryCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllCountryCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllCountryCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllCountryCodesQuery(baseOptions?: Apollo.QueryHookOptions<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>(FindAllCountryCodesDocument, options);\n      }\nexport function useFindAllCountryCodesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>(FindAllCountryCodesDocument, options);\n        }\nexport type FindAllCountryCodesQueryHookResult = ReturnType<typeof useFindAllCountryCodesQuery>;\nexport type FindAllCountryCodesLazyQueryHookResult = ReturnType<typeof useFindAllCountryCodesLazyQuery>;\nexport type FindAllCountryCodesQueryResult = Apollo.QueryResult<FindAllCountryCodesQuery, FindAllCountryCodesQueryVariables>;\nexport const FindAllJurisdictionsDocument = gql`\n    query findAllJurisdictions($page: Page) {\n  findAllJurisdictions(page: $page) {\n    id\n    typeCd\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    codeDescTxt\n    codeShortDescTxt\n    effectiveFromTime\n    effectiveToTime\n    indentLevelNbr\n    isModifiableInd\n    parentIsCd\n    stateDomainCd\n    statusCd\n    statusTime\n    codeSetNm\n    codeSeqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n    exportInd\n  }\n}\n    `;\n\n/**\n * __useFindAllJurisdictionsQuery__\n *\n * To run a query within a React component, call `useFindAllJurisdictionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllJurisdictionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllJurisdictionsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllJurisdictionsQuery(baseOptions?: Apollo.QueryHookOptions<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>(FindAllJurisdictionsDocument, options);\n      }\nexport function useFindAllJurisdictionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>(FindAllJurisdictionsDocument, options);\n        }\nexport type FindAllJurisdictionsQueryHookResult = ReturnType<typeof useFindAllJurisdictionsQuery>;\nexport type FindAllJurisdictionsLazyQueryHookResult = ReturnType<typeof useFindAllJurisdictionsLazyQuery>;\nexport type FindAllJurisdictionsQueryResult = Apollo.QueryResult<FindAllJurisdictionsQuery, FindAllJurisdictionsQueryVariables>;\nexport const FindAllOrganizationsDocument = gql`\n    query findAllOrganizations($page: Page) {\n  findAllOrganizations(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n\n/**\n * __useFindAllOrganizationsQuery__\n *\n * To run a query within a React component, call `useFindAllOrganizationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllOrganizationsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllOrganizationsQuery(baseOptions?: Apollo.QueryHookOptions<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>(FindAllOrganizationsDocument, options);\n      }\nexport function useFindAllOrganizationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>(FindAllOrganizationsDocument, options);\n        }\nexport type FindAllOrganizationsQueryHookResult = ReturnType<typeof useFindAllOrganizationsQuery>;\nexport type FindAllOrganizationsLazyQueryHookResult = ReturnType<typeof useFindAllOrganizationsLazyQuery>;\nexport type FindAllOrganizationsQueryResult = Apollo.QueryResult<FindAllOrganizationsQuery, FindAllOrganizationsQueryVariables>;\nexport const FindAllPatientsDocument = gql`\n    query findAllPatients($page: Page) {\n  findAllPatients(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindAllPatientsQuery__\n *\n * To run a query within a React component, call `useFindAllPatientsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPatientsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPatientsQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllPatientsQuery(baseOptions?: Apollo.QueryHookOptions<FindAllPatientsQuery, FindAllPatientsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllPatientsQuery, FindAllPatientsQueryVariables>(FindAllPatientsDocument, options);\n      }\nexport function useFindAllPatientsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllPatientsQuery, FindAllPatientsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllPatientsQuery, FindAllPatientsQueryVariables>(FindAllPatientsDocument, options);\n        }\nexport type FindAllPatientsQueryHookResult = ReturnType<typeof useFindAllPatientsQuery>;\nexport type FindAllPatientsLazyQueryHookResult = ReturnType<typeof useFindAllPatientsLazyQuery>;\nexport type FindAllPatientsQueryResult = Apollo.QueryResult<FindAllPatientsQuery, FindAllPatientsQueryVariables>;\nexport const FindAllPlacesDocument = gql`\n    query findAllPlaces($page: Page) {\n  findAllPlaces(page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n\n/**\n * __useFindAllPlacesQuery__\n *\n * To run a query within a React component, call `useFindAllPlacesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllPlacesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllPlacesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllPlacesQuery(baseOptions?: Apollo.QueryHookOptions<FindAllPlacesQuery, FindAllPlacesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllPlacesQuery, FindAllPlacesQueryVariables>(FindAllPlacesDocument, options);\n      }\nexport function useFindAllPlacesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllPlacesQuery, FindAllPlacesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllPlacesQuery, FindAllPlacesQueryVariables>(FindAllPlacesDocument, options);\n        }\nexport type FindAllPlacesQueryHookResult = ReturnType<typeof useFindAllPlacesQuery>;\nexport type FindAllPlacesLazyQueryHookResult = ReturnType<typeof useFindAllPlacesLazyQuery>;\nexport type FindAllPlacesQueryResult = Apollo.QueryResult<FindAllPlacesQuery, FindAllPlacesQueryVariables>;\nexport const FindAllStateCodesDocument = gql`\n    query findAllStateCodes($page: Page) {\n  findAllStateCodes(page: $page) {\n    id\n    assigningAuthorityCd\n    assigningAuthorityDescTxt\n    stateNm\n    codeDescTxt\n    effectiveFromTime\n    effectiveToTime\n    excludedTxt\n    indentLevelNbr\n    isModifiableInd\n    keyInfoTxt\n    parentIsCd\n    statusCd\n    statusTime\n    codeSetNm\n    seqNum\n    nbsUid\n    sourceConceptId\n    codeSystemCd\n    codeSystemDescTxt\n  }\n}\n    `;\n\n/**\n * __useFindAllStateCodesQuery__\n *\n * To run a query within a React component, call `useFindAllStateCodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllStateCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllStateCodesQuery({\n *   variables: {\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindAllStateCodesQuery(baseOptions?: Apollo.QueryHookOptions<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>(FindAllStateCodesDocument, options);\n      }\nexport function useFindAllStateCodesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>(FindAllStateCodesDocument, options);\n        }\nexport type FindAllStateCodesQueryHookResult = ReturnType<typeof useFindAllStateCodesQuery>;\nexport type FindAllStateCodesLazyQueryHookResult = ReturnType<typeof useFindAllStateCodesLazyQuery>;\nexport type FindAllStateCodesQueryResult = Apollo.QueryResult<FindAllStateCodesQuery, FindAllStateCodesQueryVariables>;\nexport const FindOrganizationByIdDocument = gql`\n    query findOrganizationById($id: ID!) {\n  findOrganizationById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n\n/**\n * __useFindOrganizationByIdQuery__\n *\n * To run a query within a React component, call `useFindOrganizationByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindOrganizationByIdQuery(baseOptions: Apollo.QueryHookOptions<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>(FindOrganizationByIdDocument, options);\n      }\nexport function useFindOrganizationByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>(FindOrganizationByIdDocument, options);\n        }\nexport type FindOrganizationByIdQueryHookResult = ReturnType<typeof useFindOrganizationByIdQuery>;\nexport type FindOrganizationByIdLazyQueryHookResult = ReturnType<typeof useFindOrganizationByIdLazyQuery>;\nexport type FindOrganizationByIdQueryResult = Apollo.QueryResult<FindOrganizationByIdQuery, FindOrganizationByIdQueryVariables>;\nexport const FindOrganizationsByFilterDocument = gql`\n    query findOrganizationsByFilter($filter: OrganizationFilter!, $page: Page) {\n  findOrganizationsByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    recordStatusCd\n    recordStatusTime\n    standardIndustryClassCd\n    standardIndustryDescTxt\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    displayNm\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    cntyCd\n    cntryCd\n    zipCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n    electronicInd\n    edxInd\n  }\n}\n    `;\n\n/**\n * __useFindOrganizationsByFilterQuery__\n *\n * To run a query within a React component, call `useFindOrganizationsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOrganizationsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOrganizationsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindOrganizationsByFilterQuery(baseOptions: Apollo.QueryHookOptions<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>(FindOrganizationsByFilterDocument, options);\n      }\nexport function useFindOrganizationsByFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>(FindOrganizationsByFilterDocument, options);\n        }\nexport type FindOrganizationsByFilterQueryHookResult = ReturnType<typeof useFindOrganizationsByFilterQuery>;\nexport type FindOrganizationsByFilterLazyQueryHookResult = ReturnType<typeof useFindOrganizationsByFilterLazyQuery>;\nexport type FindOrganizationsByFilterQueryResult = Apollo.QueryResult<FindOrganizationsByFilterQuery, FindOrganizationsByFilterQueryVariables>;\nexport const FindPatientByIdDocument = gql`\n    query findPatientById($id: ID!) {\n  findPatientById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientByIdQuery__\n *\n * To run a query within a React component, call `useFindPatientByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindPatientByIdQuery(baseOptions: Apollo.QueryHookOptions<FindPatientByIdQuery, FindPatientByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientByIdQuery, FindPatientByIdQueryVariables>(FindPatientByIdDocument, options);\n      }\nexport function useFindPatientByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientByIdQuery, FindPatientByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientByIdQuery, FindPatientByIdQueryVariables>(FindPatientByIdDocument, options);\n        }\nexport type FindPatientByIdQueryHookResult = ReturnType<typeof useFindPatientByIdQuery>;\nexport type FindPatientByIdLazyQueryHookResult = ReturnType<typeof useFindPatientByIdLazyQuery>;\nexport type FindPatientByIdQueryResult = Apollo.QueryResult<FindPatientByIdQuery, FindPatientByIdQueryVariables>;\nexport const FindPatientsByEventDocument = gql`\n    query findPatientsByEvent($filter: EventFilter!, $page: Page) {\n  findPatientsByEvent(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientsByEventQuery__\n *\n * To run a query within a React component, call `useFindPatientsByEventQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByEventQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByEventQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPatientsByEventQuery(baseOptions: Apollo.QueryHookOptions<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>(FindPatientsByEventDocument, options);\n      }\nexport function useFindPatientsByEventLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>(FindPatientsByEventDocument, options);\n        }\nexport type FindPatientsByEventQueryHookResult = ReturnType<typeof useFindPatientsByEventQuery>;\nexport type FindPatientsByEventLazyQueryHookResult = ReturnType<typeof useFindPatientsByEventLazyQuery>;\nexport type FindPatientsByEventQueryResult = Apollo.QueryResult<FindPatientsByEventQuery, FindPatientsByEventQueryVariables>;\nexport const FindPatientsByFilterDocument = gql`\n    query findPatientsByFilter($filter: PersonFilter!, $page: Page) {\n  findPatientsByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientsByFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPatientsByFilterQuery(baseOptions: Apollo.QueryHookOptions<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>(FindPatientsByFilterDocument, options);\n      }\nexport function useFindPatientsByFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>(FindPatientsByFilterDocument, options);\n        }\nexport type FindPatientsByFilterQueryHookResult = ReturnType<typeof useFindPatientsByFilterQuery>;\nexport type FindPatientsByFilterLazyQueryHookResult = ReturnType<typeof useFindPatientsByFilterLazyQuery>;\nexport type FindPatientsByFilterQueryResult = Apollo.QueryResult<FindPatientsByFilterQuery, FindPatientsByFilterQueryVariables>;\nexport const FindPatientsByOrganizationFilterDocument = gql`\n    query findPatientsByOrganizationFilter($filter: OrganizationFilter!, $page: Page) {\n  findPatientsByOrganizationFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    administrativeGenderCd\n    ageCalc\n    ageCalcTime\n    ageCalcUnitCd\n    ageCategoryCd\n    ageReported\n    ageReportedTime\n    ageReportedUnitCd\n    birthGenderCd\n    birthOrderNbr\n    birthTime\n    birthTimeCalc\n    cd\n    cdDescTxt\n    currSexCd\n    deceasedIndCd\n    deceasedTime\n    description\n    educationLevelCd\n    educationLevelDescTxt\n    ethnicGroupInd\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    maritalStatusCd\n    maritalStatusDescTxt\n    mothersMaidenNm\n    multipleBirthInd\n    occupationCd\n    preferredGenderCd\n    primLangCd\n    primLangDescTxt\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    survivedIndCd\n    userAffiliationTxt\n    firstNm\n    lastNm\n    middleNm\n    nmPrefix\n    nmSuffix\n    preferredNm\n    hmStreetAddr1\n    hmStreetAddr2\n    hmCityCd\n    hmCityDescTxt\n    hmStateCd\n    hmZipCd\n    hmCntyCd\n    hmCntryCd\n    hmPhoneNbr\n    hmPhoneCntryCd\n    hmEmailAddr\n    cellPhoneNbr\n    wkStreetAddr1\n    wkStreetAddr2\n    wkCityCd\n    wkCityDescTxt\n    wkStateCd\n    wkZipCd\n    wkCntyCd\n    wkCntryCd\n    wkPhoneNbr\n    wkPhoneCntryCd\n    wkEmailAddr\n    ssn\n    medicaidNum\n    dlNum\n    dlStateCd\n    raceCd\n    raceSeqNbr\n    raceCategoryCd\n    ethnicityGroupCd\n    ethnicGroupSeqNbr\n    adultsInHouseNbr\n    childrenInHouseNbr\n    birthCityCd\n    birthCityDescTxt\n    birthCntryCd\n    birthStateCd\n    raceDescTxt\n    ethnicGroupDescTxt\n    versionCtrlNbr\n    asOfDateAdmin\n    asOfDateEthnicity\n    asOfDateGeneral\n    asOfDateMorbidity\n    asOfDateSex\n    electronicInd\n    personParentUid\n    dedupMatchInd\n    groupNbr\n    groupTime\n    edxInd\n    speaksEnglishCd\n    additionalGenderCd\n    eharsId\n    ethnicUnkReasonCd\n    sexUnkReasonCd\n  }\n}\n    `;\n\n/**\n * __useFindPatientsByOrganizationFilterQuery__\n *\n * To run a query within a React component, call `useFindPatientsByOrganizationFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPatientsByOrganizationFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPatientsByOrganizationFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPatientsByOrganizationFilterQuery(baseOptions: Apollo.QueryHookOptions<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>(FindPatientsByOrganizationFilterDocument, options);\n      }\nexport function useFindPatientsByOrganizationFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>(FindPatientsByOrganizationFilterDocument, options);\n        }\nexport type FindPatientsByOrganizationFilterQueryHookResult = ReturnType<typeof useFindPatientsByOrganizationFilterQuery>;\nexport type FindPatientsByOrganizationFilterLazyQueryHookResult = ReturnType<typeof useFindPatientsByOrganizationFilterLazyQuery>;\nexport type FindPatientsByOrganizationFilterQueryResult = Apollo.QueryResult<FindPatientsByOrganizationFilterQuery, FindPatientsByOrganizationFilterQueryVariables>;\nexport const FindPlaceByIdDocument = gql`\n    query findPlaceById($id: ID!) {\n  findPlaceById(id: $id) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n\n/**\n * __useFindPlaceByIdQuery__\n *\n * To run a query within a React component, call `useFindPlaceByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlaceByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlaceByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFindPlaceByIdQuery(baseOptions: Apollo.QueryHookOptions<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>(FindPlaceByIdDocument, options);\n      }\nexport function useFindPlaceByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>(FindPlaceByIdDocument, options);\n        }\nexport type FindPlaceByIdQueryHookResult = ReturnType<typeof useFindPlaceByIdQuery>;\nexport type FindPlaceByIdLazyQueryHookResult = ReturnType<typeof useFindPlaceByIdLazyQuery>;\nexport type FindPlaceByIdQueryResult = Apollo.QueryResult<FindPlaceByIdQuery, FindPlaceByIdQueryVariables>;\nexport const FindPlacesByFilterDocument = gql`\n    query findPlacesByFilter($filter: PlaceFilter!, $page: Page) {\n  findPlacesByFilter(filter: $filter, page: $page) {\n    id\n    addReasonCd\n    addTime\n    addUserId\n    cd\n    cdDescTxt\n    description\n    durationAmt\n    durationUnitCd\n    fromTime\n    lastChgReasonCd\n    lastChgTime\n    lastChgUserId\n    localId\n    nm\n    recordStatusCd\n    recordStatusTime\n    statusCd\n    statusTime\n    toTime\n    userAffiliationTxt\n    streetAddr1\n    streetAddr2\n    cityCd\n    cityDescTxt\n    stateCd\n    zipCd\n    cntyCd\n    cntryCd\n    phoneNbr\n    phoneCntryCd\n    versionCtrlNbr\n  }\n}\n    `;\n\n/**\n * __useFindPlacesByFilterQuery__\n *\n * To run a query within a React component, call `useFindPlacesByFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindPlacesByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindPlacesByFilterQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useFindPlacesByFilterQuery(baseOptions: Apollo.QueryHookOptions<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>(FindPlacesByFilterDocument, options);\n      }\nexport function useFindPlacesByFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>(FindPlacesByFilterDocument, options);\n        }\nexport type FindPlacesByFilterQueryHookResult = ReturnType<typeof useFindPlacesByFilterQuery>;\nexport type FindPlacesByFilterLazyQueryHookResult = ReturnType<typeof useFindPlacesByFilterLazyQuery>;\nexport type FindPlacesByFilterQueryResult = Apollo.QueryResult<FindPlacesByFilterQuery, FindPlacesByFilterQueryVariables>;"],"mappings":"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"},"metadata":{},"sourceType":"module"}