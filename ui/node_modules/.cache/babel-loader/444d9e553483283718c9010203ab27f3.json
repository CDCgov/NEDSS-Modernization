{"ast":null,"code":"import _classCallCheck from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// @ts-ignore\nimport isoParse from './util/isodate';\nimport { date as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport Ref from './Reference';\nimport BaseSchema from './schema';\nvar invalidDate = new Date('');\n\nvar isDate = function isDate(obj) {\n  return Object.prototype.toString.call(obj) === '[object Date]';\n};\n\nexport function create() {\n  return new DateSchema();\n}\n\nvar DateSchema = /*#__PURE__*/function (_BaseSchema) {\n  _inherits(DateSchema, _BaseSchema);\n\n  var _super = _createSuper(DateSchema);\n\n  function DateSchema() {\n    var _this;\n\n    _classCallCheck(this, DateSchema);\n\n    _this = _super.call(this, {\n      type: 'date'\n    });\n\n    _this.withMutation(function () {\n      _this.transform(function (value) {\n        if (this.isType(value)) return value;\n        value = isoParse(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.\n\n        return !isNaN(value) ? new Date(value) : invalidDate;\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DateSchema, [{\n    key: \"_typeCheck\",\n    value: function _typeCheck(v) {\n      return isDate(v) && !isNaN(v.getTime());\n    }\n  }, {\n    key: \"prepareParam\",\n    value: function prepareParam(ref, name) {\n      var param;\n\n      if (!Ref.isRef(ref)) {\n        var cast = this.cast(ref);\n        if (!this._typeCheck(cast)) throw new TypeError(\"`\".concat(name, \"` must be a Date or a value that can be `cast()` to a Date\"));\n        param = cast;\n      } else {\n        param = ref;\n      }\n\n      return param;\n    }\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.min;\n      var limit = this.prepareParam(_min, 'min');\n      return this.test({\n        message: message,\n        name: 'min',\n        exclusive: true,\n        params: {\n          min: _min\n        },\n        test: function test(value) {\n          return isAbsent(value) || value >= this.resolve(limit);\n        }\n      });\n    }\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.max;\n      var limit = this.prepareParam(_max, 'max');\n      return this.test({\n        message: message,\n        name: 'max',\n        exclusive: true,\n        params: {\n          max: _max\n        },\n        test: function test(value) {\n          return isAbsent(value) || value <= this.resolve(limit);\n        }\n      });\n    }\n  }]);\n\n  return DateSchema;\n}(BaseSchema);\n\nexport { DateSchema as default };\nDateSchema.INVALID_DATE = invalidDate;\ncreate.prototype = DateSchema.prototype;\ncreate.INVALID_DATE = invalidDate;","map":{"version":3,"names":["isoParse","date","locale","isAbsent","Ref","BaseSchema","invalidDate","Date","isDate","obj","Object","prototype","toString","call","create","DateSchema","type","withMutation","transform","value","isType","isNaN","v","getTime","ref","name","param","isRef","cast","_typeCheck","TypeError","min","message","limit","prepareParam","test","exclusive","params","resolve","max","INVALID_DATE"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/yup/es/date.js"],"sourcesContent":["// @ts-ignore\nimport isoParse from './util/isodate';\nimport { date as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport Ref from './Reference';\nimport BaseSchema from './schema';\nlet invalidDate = new Date('');\n\nlet isDate = obj => Object.prototype.toString.call(obj) === '[object Date]';\n\nexport function create() {\n  return new DateSchema();\n}\nexport default class DateSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'date'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        if (this.isType(value)) return value;\n        value = isoParse(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.\n\n        return !isNaN(value) ? new Date(value) : invalidDate;\n      });\n    });\n  }\n\n  _typeCheck(v) {\n    return isDate(v) && !isNaN(v.getTime());\n  }\n\n  prepareParam(ref, name) {\n    let param;\n\n    if (!Ref.isRef(ref)) {\n      let cast = this.cast(ref);\n      if (!this._typeCheck(cast)) throw new TypeError(`\\`${name}\\` must be a Date or a value that can be \\`cast()\\` to a Date`);\n      param = cast;\n    } else {\n      param = ref;\n    }\n\n    return param;\n  }\n\n  min(min, message = locale.min) {\n    let limit = this.prepareParam(min, 'min');\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min\n      },\n\n      test(value) {\n        return isAbsent(value) || value >= this.resolve(limit);\n      }\n\n    });\n  }\n\n  max(max, message = locale.max) {\n    let limit = this.prepareParam(max, 'max');\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max\n      },\n\n      test(value) {\n        return isAbsent(value) || value <= this.resolve(limit);\n      }\n\n    });\n  }\n\n}\nDateSchema.INVALID_DATE = invalidDate;\ncreate.prototype = DateSchema.prototype;\ncreate.INVALID_DATE = invalidDate;"],"mappings":"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"},"metadata":{},"sourceType":"module"}