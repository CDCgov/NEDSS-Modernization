{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(sortByName(schemaConfig.types), type => type.name, sortNamedType);\n  return new GraphQLSchema({ ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({ ...config,\n      locations: sortBy(config.locations, x => x),\n      args: sortArgs(config.args)\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, arg => ({ ...arg,\n      type: replaceType(arg.type)\n    }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({ ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args)\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({ ...field,\n      type: replaceType(field.type)\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({ ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({ ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({ ...config,\n        types: () => sortTypes(config.types)\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({ ...config,\n        values: sortObjMap(config.values, value => value)\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({ ...config,\n        fields: () => sortInputFields(config.fields)\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, obj => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}","map":{"version":3,"names":["inspect","invariant","keyValMap","naturalCompare","GraphQLEnumType","GraphQLInputObjectType","GraphQLInterfaceType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLUnionType","isEnumType","isInputObjectType","isInterfaceType","isListType","isNonNullType","isObjectType","isScalarType","isUnionType","GraphQLDirective","isIntrospectionType","GraphQLSchema","lexicographicSortSchema","schema","schemaConfig","toConfig","typeMap","sortByName","types","type","name","sortNamedType","Object","values","directives","map","sortDirective","query","replaceMaybeType","mutation","subscription","replaceType","ofType","replaceNamedType","maybeType","directive","config","locations","sortBy","x","args","sortArgs","sortObjMap","arg","sortFields","fieldsMap","field","sortInputFields","sortTypes","array","interfaces","fields","value","sortValueFn","sortedMap","create","key","keys","sort","obj","mapToKey","slice","obj1","obj2","key1","key2"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/lexicographicSortSchema.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}