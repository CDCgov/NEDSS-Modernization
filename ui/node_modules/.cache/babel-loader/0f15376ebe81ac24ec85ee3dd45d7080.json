{"ast":null,"code":"var _jsxFileName = \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/src/index.tsx\";\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'; // import { TopBanner } from './components/TopBanner/TopBanner';\n\nimport reportWebVitals from './reportWebVitals';\nimport { AppRoutes } from './routes/AppRoutes';\nimport UserService from './services/UserService';\nimport './settings.scss';\nimport NavBar from './shared/header/NavBar';\nimport { Config } from './config';\nimport { setContext } from '@apollo/client/link/context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: `http://localhost:${Config.port}/graphql`\n});\nconst authMiddleware = setContext(async (_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  let header = {}; // hard coded login for now\n\n  await UserService.login('msa', '').then(async response => {\n    // grab the token from the userService\n    localStorage.setItem('loginData', response);\n    const token = response === null || response === void 0 ? void 0 : response.token; // Use the setContext method to set the HTTP headers.\n\n    header = { ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    };\n  });\n  return {\n    headers: header\n  };\n});\nconst client = new ApolloClient({\n  link: authMiddleware.concat(httpLink),\n  cache: new InMemoryCache()\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-content\",\n          children: /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 41,\n  columnNumber: 5\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["ApolloClient","ApolloProvider","InMemoryCache","createHttpLink","React","ReactDOM","BrowserRouter","reportWebVitals","AppRoutes","UserService","NavBar","Config","setContext","httpLink","uri","port","authMiddleware","_","headers","header","login","then","response","localStorage","setItem","token","authorization","client","link","concat","cache","render","padding","document","getElementById"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/src/index.tsx"],"sourcesContent":["import { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n// import { TopBanner } from './components/TopBanner/TopBanner';\nimport reportWebVitals from './reportWebVitals';\nimport { AppRoutes } from './routes/AppRoutes';\nimport UserService from './services/UserService';\nimport './settings.scss';\nimport NavBar from './shared/header/NavBar';\nimport { Config } from './config';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n    uri: `http://localhost:${Config.port}/graphql`\n});\n\nconst authMiddleware = setContext(async (_, { headers }) => {\n    let header = {};\n    // hard coded login for now\n    await UserService.login('msa', '').then(async (response) => {\n        // grab the token from the userService\n        localStorage.setItem('loginData', response);\n        const token = response?.token;\n        // Use the setContext method to set the HTTP headers.\n        header = {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : ''\n        };\n    });\n    return {\n        headers: header\n    };\n});\nconst client = new ApolloClient({\n    link: authMiddleware.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                {/* <TopBanner /> */}\n                <div style={{ padding: '5px' }}>\n                    <NavBar />\n                    <div className=\"route-content\">\n                        <AppRoutes />\n                    </div>\n                </div>\n            </BrowserRouter>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,EAAsDC,cAAtD,QAA4E,gBAA5E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAO,iBAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,6BAA3B;;AAEA,MAAMC,QAAQ,GAAGV,cAAc,CAAC;EAC5BW,GAAG,EAAG,oBAAmBH,MAAM,CAACI,IAAK;AADT,CAAD,CAA/B;AAIA,MAAMC,cAAc,GAAGJ,UAAU,CAAC,OAAOK,CAAP,WAA0B;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EACxD,IAAIC,MAAM,GAAG,EAAb,CADwD,CAExD;;EACA,MAAMV,WAAW,CAACW,KAAZ,CAAkB,KAAlB,EAAyB,EAAzB,EAA6BC,IAA7B,CAAkC,MAAOC,QAAP,IAAoB;IACxD;IACAC,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,QAAlC;IACA,MAAMG,KAAK,GAAGH,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEG,KAAxB,CAHwD,CAIxD;;IACAN,MAAM,GAAG,EACL,GAAGD,OADE;MAELQ,aAAa,EAAED,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;IAFtC,CAAT;EAIH,CATK,CAAN;EAUA,OAAO;IACHP,OAAO,EAAEC;EADN,CAAP;AAGH,CAhBgC,CAAjC;AAiBA,MAAMQ,MAAM,GAAG,IAAI3B,YAAJ,CAAiB;EAC5B4B,IAAI,EAAEZ,cAAc,CAACa,MAAf,CAAsBhB,QAAtB,CADsB;EAE5BiB,KAAK,EAAE,IAAI5B,aAAJ;AAFqB,CAAjB,CAAf;AAKAG,QAAQ,CAAC0B,MAAT,eACI,QAAC,KAAD,CAAO,UAAP;EAAA,uBACI,QAAC,cAAD;IAAgB,MAAM,EAAEJ,MAAxB;IAAA,uBACI,QAAC,aAAD;MAAA,uBAEI;QAAK,KAAK,EAAE;UAAEK,OAAO,EAAE;QAAX,CAAZ;QAAA,wBACI,QAAC,MAAD;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAK,SAAS,EAAC,eAAf;UAAA,uBACI,QAAC,SAAD;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA;IAFJ;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA;AADJ;EAAA;EAAA;EAAA;AAAA,QADJ,EAcIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAdJ,E,CAiBA;AACA;AACA;;AACA3B,eAAe"},"metadata":{},"sourceType":"module"}