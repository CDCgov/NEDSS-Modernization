{"ast":null,"code":"import _classCallCheck from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var lexicalDistance = new LexicalDistance(input);\n  var threshold = Math.floor(input.length * 0.4) + 1;\n\n  var _iterator = _createForOfIteratorHelper(options),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var option = _step.value;\n      var distance = lexicalDistance.measure(option, threshold);\n\n      if (distance !== undefined) {\n        optionsByDistance[option] = distance;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    var distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nvar LexicalDistance = /*#__PURE__*/function () {\n  function LexicalDistance(input) {\n    _classCallCheck(this, LexicalDistance);\n\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];\n  }\n\n  _createClass(LexicalDistance, [{\n    key: \"measure\",\n    value: function measure(option, threshold) {\n      if (this._input === option) {\n        return 0;\n      }\n\n      var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n      if (this._inputLowerCase === optionLowerCase) {\n        return 1;\n      }\n\n      var a = stringToArray(optionLowerCase);\n      var b = this._inputArray;\n\n      if (a.length < b.length) {\n        var tmp = a;\n        a = b;\n        b = tmp;\n      }\n\n      var aLength = a.length;\n      var bLength = b.length;\n\n      if (aLength - bLength > threshold) {\n        return undefined;\n      }\n\n      var rows = this._rows;\n\n      for (var j = 0; j <= bLength; j++) {\n        rows[0][j] = j;\n      }\n\n      for (var i = 1; i <= aLength; i++) {\n        var upRow = rows[(i - 1) % 3];\n        var currentRow = rows[i % 3];\n        var smallestCell = currentRow[0] = i;\n\n        for (var _j = 1; _j <= bLength; _j++) {\n          var cost = a[i - 1] === b[_j - 1] ? 0 : 1;\n          var currentCell = Math.min(upRow[_j] + 1, // delete\n          currentRow[_j - 1] + 1, // insert\n          upRow[_j - 1] + cost // substitute\n          );\n\n          if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {\n            // transposition\n            var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];\n            currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n          }\n\n          if (currentCell < smallestCell) {\n            smallestCell = currentCell;\n          }\n\n          currentRow[_j] = currentCell;\n        } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n\n        if (smallestCell > threshold) {\n          return undefined;\n        }\n      }\n\n      var distance = rows[aLength % 3][bLength];\n      return distance <= threshold ? distance : undefined;\n    }\n  }]);\n\n  return LexicalDistance;\n}();\n\nfunction stringToArray(str) {\n  var strLength = str.length;\n  var array = new Array(strLength);\n\n  for (var i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}","map":{"version":3,"names":["naturalCompare","suggestionList","input","options","optionsByDistance","Object","create","lexicalDistance","LexicalDistance","threshold","Math","floor","length","option","distance","measure","undefined","keys","sort","a","b","distanceDiff","_input","_inputLowerCase","toLowerCase","_inputArray","stringToArray","_rows","Array","fill","optionLowerCase","tmp","aLength","bLength","rows","j","i","upRow","currentRow","smallestCell","cost","currentCell","min","doubleDiagonalCell","str","strLength","array","charCodeAt"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/jsutils/suggestionList.mjs"],"sourcesContent":["import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}