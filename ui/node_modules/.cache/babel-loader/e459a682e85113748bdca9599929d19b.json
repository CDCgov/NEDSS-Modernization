{"ast":null,"code":"var prefixCounts = new Map();\nexport function makeUniqueId(prefix) {\n  var count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}","map":{"version":3,"mappings":"AAAA,IAAMA,YAAY,GAAG,IAAIC,GAAJ,EAArB;AAIA,OAAM,SAAUC,YAAV,CAAuBC,MAAvB,EAAqC;EACzC,IAAMC,KAAK,GAAGJ,YAAY,CAACK,GAAb,CAAiBF,MAAjB,KAA4B,CAA1C;EACAH,YAAY,CAACM,GAAb,CAAiBH,MAAjB,EAAyBC,KAAK,GAAG,CAAjC;EACA,OAAO,UAAGD,MAAH,EAAS,GAAT,EAASI,MAAT,CAAaH,KAAb,EAAkB,GAAlB,EAAkBG,MAAlB,CAAsBC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAtB,CAAP;AACD","names":["prefixCounts","Map","makeUniqueId","prefix","count","get","set","concat","Math","random","toString","slice"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/utilities/common/makeUniqueId.ts"],"sourcesContent":["const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n"]},"metadata":{},"sourceType":"module"}