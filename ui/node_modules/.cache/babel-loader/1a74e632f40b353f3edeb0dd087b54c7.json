{"ast":null,"code":"import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { isTypeDefinitionNode, isTypeExtensionNode } from '../language/predicates.mjs';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { GraphQLDeprecatedDirective, GraphQLDirective, GraphQLSpecifiedByDirective } from '../type/directives.mjs';\nimport { introspectionTypes, isIntrospectionType } from '../type/introspection.mjs';\nimport { isSpecifiedScalarType, specifiedScalarTypes } from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\n\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig ? schema : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid; // Collect the type definitions and extensions found in the document.\n\n\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n\n  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions)\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [...schemaConfig.directives.map(replaceDirective), ...directiveDefs.map(buildDirective)],\n    extensions: Object.create(null),\n    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({ ...config,\n      args: mapValue(config.args, extendArg)\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];\n    return new GraphQLInputObjectType({ ...config,\n      fields: () => ({ ...mapValue(config.fields, field => ({ ...field,\n          type: replaceType(field.type)\n        })),\n        ...buildInputFieldMap(extensions)\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];\n    return new GraphQLEnumType({ ...config,\n      values: { ...config.values,\n        ...buildEnumValueMap(extensions)\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({ ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];\n    return new GraphQLObjectType({ ...config,\n      interfaces: () => [...type.getInterfaces().map(replaceNamedType), ...buildInterfaces(extensions)],\n      fields: () => ({ ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions)\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];\n    return new GraphQLInterfaceType({ ...config,\n      interfaces: () => [...type.getInterfaces().map(replaceNamedType), ...buildInterfaces(extensions)],\n      fields: () => ({ ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions)\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];\n    return new GraphQLUnionType({ ...config,\n      types: () => [...type.getTypes().map(replaceNamedType), ...buildUnionTypes(extensions)],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendField(field) {\n    return { ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg)\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg,\n      type: replaceType(arg.type)\n    };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n      const operationTypesNodes =\n      /* c8 ignore next */\n      (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(_ref => {\n        let {\n          value\n        } = _ref;\n        return value;\n      }),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n      const nodeFields =\n      /* c8 ignore next */\n      (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n    /* c8 ignore next */\n    args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description; // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n\n\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n      const fieldsNodes =\n      /* c8 ignore next */\n      (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2; // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n\n\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n      const valuesNodes =\n      /* c8 ignore next */\n      (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    node => {\n      var _node$interfaces$map, _node$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : []\n      );\n    });\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    node => {\n      var _node$types$map, _node$types;\n\n      return (\n        /* c8 ignore next */\n        (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType)) !== null && _node$types$map !== void 0 ? _node$types$map : []\n      );\n    });\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        {\n          var _astNode$description;\n\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLObjectType({\n            name,\n            description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,\n            interfaces: () => buildInterfaces(allNodes),\n            fields: () => buildFieldMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        {\n          var _astNode$description2;\n\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLInterfaceType({\n            name,\n            description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,\n            interfaces: () => buildInterfaces(allNodes),\n            fields: () => buildFieldMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        {\n          var _astNode$description3;\n\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLEnumType({\n            name,\n            description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,\n            values: buildEnumValueMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.UNION_TYPE_DEFINITION:\n        {\n          var _astNode$description4;\n\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLUnionType({\n            name,\n            description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,\n            types: () => buildUnionTypes(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        {\n          var _astNode$description5;\n\n          return new GraphQLScalarType({\n            name,\n            description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,\n            specifiedByURL: getSpecifiedByURL(astNode),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        {\n          var _astNode$description6;\n\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLInputObjectType({\n            name,\n            description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,\n            fields: () => buildInputFieldMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n    }\n  }\n}\nconst stdTypeMap = keyMap([...specifiedScalarTypes, ...introspectionTypes], type => type.name);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;\n}","map":{"version":3,"names":["devAssert","inspect","invariant","keyMap","mapValue","Kind","isTypeDefinitionNode","isTypeExtensionNode","GraphQLEnumType","GraphQLInputObjectType","GraphQLInterfaceType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLScalarType","GraphQLUnionType","isEnumType","isInputObjectType","isInterfaceType","isListType","isNonNullType","isObjectType","isScalarType","isUnionType","GraphQLDeprecatedDirective","GraphQLDirective","GraphQLSpecifiedByDirective","introspectionTypes","isIntrospectionType","isSpecifiedScalarType","specifiedScalarTypes","assertSchema","GraphQLSchema","assertValidSDLExtension","getDirectiveValues","valueFromAST","extendSchema","schema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","schemaConfig","toConfig","extendedConfig","extendSchemaImpl","_schemaDef","_schemaDef$descriptio","_schemaDef2","_options$assumeValid","typeDefs","typeExtensionsMap","Object","create","directiveDefs","schemaDef","schemaExtensions","def","definitions","SCHEMA_DEFINITION","SCHEMA_EXTENSION","push","extendedTypeName","name","value","existingTypeExtensions","concat","DIRECTIVE_DEFINITION","keys","length","typeMap","existingType","types","extendNamedType","typeNode","_stdTypeMap$name","stdTypeMap","buildType","operationTypes","query","replaceNamedType","mutation","subscription","getOperationTypes","description","values","directives","map","replaceDirective","buildDirective","extensions","astNode","extensionASTNodes","replaceType","type","ofType","directive","config","args","extendArg","extendScalarType","extendObjectType","extendInterfaceType","extendUnionType","extendEnumType","extendInputObjectType","_typeExtensionsMap$co","fields","field","buildInputFieldMap","_typeExtensionsMap$ty","buildEnumValueMap","_typeExtensionsMap$co2","specifiedByURL","extensionNode","_getSpecifiedByURL","getSpecifiedByURL","_typeExtensionsMap$co3","interfaces","getInterfaces","buildInterfaces","extendField","buildFieldMap","_typeExtensionsMap$co4","_typeExtensionsMap$co5","getTypes","buildUnionTypes","arg","nodes","opTypes","node","_node$operationTypes","operationTypesNodes","operationType","operation","getNamedType","_stdTypeMap$name2","undefined","Error","getWrappedType","LIST_TYPE","NON_NULL_TYPE","_node$description","locations","isRepeatable","repeatable","buildArgumentMap","arguments","fieldConfigMap","_node$fields","nodeFields","_field$description","deprecationReason","getDeprecationReason","argsNodes","argConfigMap","_arg$description","defaultValue","inputFieldMap","_node$fields2","fieldsNodes","_field$description2","enumValueMap","_node$values","valuesNodes","_value$description","flatMap","_node$interfaces$map","_node$interfaces","_node$types$map","_node$types","_typeExtensionsMap$na","OBJECT_TYPE_DEFINITION","_astNode$description","allNodes","INTERFACE_TYPE_DEFINITION","_astNode$description2","ENUM_TYPE_DEFINITION","_astNode$description3","UNION_TYPE_DEFINITION","_astNode$description4","SCALAR_TYPE_DEFINITION","_astNode$description5","INPUT_OBJECT_TYPE_DEFINITION","_astNode$description6","deprecated","reason","specifiedBy","url"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/extendSchema.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SACEC,oBADF,EAEEC,mBAFF,QAGO,4BAHP;AAIA,SACEC,eADF,EAEEC,sBAFF,EAGEC,oBAHF,EAIEC,WAJF,EAKEC,cALF,EAMEC,iBANF,EAOEC,iBAPF,EAQEC,gBARF,EASEC,UATF,EAUEC,iBAVF,EAWEC,eAXF,EAYEC,UAZF,EAaEC,aAbF,EAcEC,YAdF,EAeEC,YAfF,EAgBEC,WAhBF,QAiBO,wBAjBP;AAkBA,SACEC,0BADF,EAEEC,gBAFF,EAGEC,2BAHF,QAIO,wBAJP;AAKA,SACEC,kBADF,EAEEC,mBAFF,QAGO,2BAHP;AAIA,SACEC,qBADF,EAEEC,oBAFF,QAGO,qBAHP;AAIA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,WAA9B,EAA2CC,OAA3C,EAAoD;EACzDR,YAAY,CAACM,MAAD,CAAZ;EACCC,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAACE,IAAZ,KAAqBnC,IAAI,CAACoC,QAAlD,IACEzC,SAAS,CAAC,KAAD,EAAQ,kCAAR,CADX;;EAGA,IACE,CAACuC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,WAA3D,MACE,IADF,IAEA,CAACH,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GACG,KAAK,CADR,GAEGA,OAAO,CAACI,cAFZ,MAEgC,IALlC,EAME;IACAV,uBAAuB,CAACK,WAAD,EAAcD,MAAd,CAAvB;EACD;;EAED,MAAMO,YAAY,GAAGP,MAAM,CAACQ,QAAP,EAArB;EACA,MAAMC,cAAc,GAAGC,gBAAgB,CAACH,YAAD,EAAeN,WAAf,EAA4BC,OAA5B,CAAvC;EACA,OAAOK,YAAY,KAAKE,cAAjB,GACHT,MADG,GAEH,IAAIL,aAAJ,CAAkBc,cAAlB,CAFJ;AAGD;AACD;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BH,YAA1B,EAAwCN,WAAxC,EAAqDC,OAArD,EAA8D;EACnE,IAAIS,UAAJ,EAAgBC,qBAAhB,EAAuCC,WAAvC,EAAoDC,oBAApD,CADmE,CAGnE;;;EACA,MAAMC,QAAQ,GAAG,EAAjB;EACA,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B,CALmE,CAKpB;EAC/C;;EAEA,MAAMC,aAAa,GAAG,EAAtB;EACA,IAAIC,SAAJ,CATmE,CASpD;;EAEf,MAAMC,gBAAgB,GAAG,EAAzB;;EAEA,KAAK,MAAMC,GAAX,IAAkBrB,WAAW,CAACsB,WAA9B,EAA2C;IACzC,IAAID,GAAG,CAACnB,IAAJ,KAAanC,IAAI,CAACwD,iBAAtB,EAAyC;MACvCJ,SAAS,GAAGE,GAAZ;IACD,CAFD,MAEO,IAAIA,GAAG,CAACnB,IAAJ,KAAanC,IAAI,CAACyD,gBAAtB,EAAwC;MAC7CJ,gBAAgB,CAACK,IAAjB,CAAsBJ,GAAtB;IACD,CAFM,MAEA,IAAIrD,oBAAoB,CAACqD,GAAD,CAAxB,EAA+B;MACpCP,QAAQ,CAACW,IAAT,CAAcJ,GAAd;IACD,CAFM,MAEA,IAAIpD,mBAAmB,CAACoD,GAAD,CAAvB,EAA8B;MACnC,MAAMK,gBAAgB,GAAGL,GAAG,CAACM,IAAJ,CAASC,KAAlC;MACA,MAAMC,sBAAsB,GAAGd,iBAAiB,CAACW,gBAAD,CAAhD;MACAX,iBAAiB,CAACW,gBAAD,CAAjB,GAAsCG,sBAAsB,GACxDA,sBAAsB,CAACC,MAAvB,CAA8B,CAACT,GAAD,CAA9B,CADwD,GAExD,CAACA,GAAD,CAFJ;IAGD,CANM,MAMA,IAAIA,GAAG,CAACnB,IAAJ,KAAanC,IAAI,CAACgE,oBAAtB,EAA4C;MACjDb,aAAa,CAACO,IAAd,CAAmBJ,GAAnB;IACD;EACF,CA7BkE,CA6BjE;EACF;;;EAEA,IACEL,MAAM,CAACgB,IAAP,CAAYjB,iBAAZ,EAA+BkB,MAA/B,KAA0C,CAA1C,IACAnB,QAAQ,CAACmB,MAAT,KAAoB,CADpB,IAEAf,aAAa,CAACe,MAAd,KAAyB,CAFzB,IAGAb,gBAAgB,CAACa,MAAjB,KAA4B,CAH5B,IAIAd,SAAS,IAAI,IALf,EAME;IACA,OAAOb,YAAP;EACD;;EAED,MAAM4B,OAAO,GAAGlB,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;;EAEA,KAAK,MAAMkB,YAAX,IAA2B7B,YAAY,CAAC8B,KAAxC,EAA+C;IAC7CF,OAAO,CAACC,YAAY,CAACR,IAAd,CAAP,GAA6BU,eAAe,CAACF,YAAD,CAA5C;EACD;;EAED,KAAK,MAAMG,QAAX,IAAuBxB,QAAvB,EAAiC;IAC/B,IAAIyB,gBAAJ;;IAEA,MAAMZ,IAAI,GAAGW,QAAQ,CAACX,IAAT,CAAcC,KAA3B;IACAM,OAAO,CAACP,IAAD,CAAP,GACE,CAACY,gBAAgB,GAAGC,UAAU,CAACb,IAAD,CAA9B,MAA0C,IAA1C,IACAY,gBAAgB,KAAK,KAAK,CAD1B,GAEIA,gBAFJ,GAGIE,SAAS,CAACH,QAAD,CAJf;EAKD;;EAED,MAAMI,cAAc,GAAG;IACrB;IACAC,KAAK,EAAErC,YAAY,CAACqC,KAAb,IAAsBC,gBAAgB,CAACtC,YAAY,CAACqC,KAAd,CAFxB;IAGrBE,QAAQ,EAAEvC,YAAY,CAACuC,QAAb,IAAyBD,gBAAgB,CAACtC,YAAY,CAACuC,QAAd,CAH9B;IAIrBC,YAAY,EACVxC,YAAY,CAACwC,YAAb,IAA6BF,gBAAgB,CAACtC,YAAY,CAACwC,YAAd,CAL1B;IAMrB;IACA,IAAI3B,SAAS,IAAI4B,iBAAiB,CAAC,CAAC5B,SAAD,CAAD,CAAlC,CAPqB;IAQrB,GAAG4B,iBAAiB,CAAC3B,gBAAD;EARC,CAAvB,CA3DmE,CAoEhE;;EAEH,OAAO;IACL4B,WAAW,EACT,CAACtC,UAAU,GAAGS,SAAd,MAA6B,IAA7B,IAAqCT,UAAU,KAAK,KAAK,CAAzD,GACI,KAAK,CADT,GAEI,CAACC,qBAAqB,GAAGD,UAAU,CAACsC,WAApC,MAAqD,IAArD,IACArC,qBAAqB,KAAK,KAAK,CAD/B,GAEA,KAAK,CAFL,GAGAA,qBAAqB,CAACiB,KAPvB;IAQL,GAAGc,cARE;IASLN,KAAK,EAAEpB,MAAM,CAACiC,MAAP,CAAcf,OAAd,CATF;IAULgB,UAAU,EAAE,CACV,GAAG5C,YAAY,CAAC4C,UAAb,CAAwBC,GAAxB,CAA4BC,gBAA5B,CADO,EAEV,GAAGlC,aAAa,CAACiC,GAAd,CAAkBE,cAAlB,CAFO,CAVP;IAcLC,UAAU,EAAEtC,MAAM,CAACC,MAAP,CAAc,IAAd,CAdP;IAeLsC,OAAO,EACL,CAAC3C,WAAW,GAAGO,SAAf,MAA8B,IAA9B,IAAsCP,WAAW,KAAK,KAAK,CAA3D,GACIA,WADJ,GAEIN,YAAY,CAACiD,OAlBd;IAmBLC,iBAAiB,EAAElD,YAAY,CAACkD,iBAAb,CAA+B1B,MAA/B,CAAsCV,gBAAtC,CAnBd;IAoBLhB,WAAW,EACT,CAACS,oBAAoB,GACnBZ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GACI,KAAK,CADT,GAEIA,OAAO,CAACG,WAHd,MAG+B,IAH/B,IAGuCS,oBAAoB,KAAK,KAAK,CAHrE,GAIIA,oBAJJ,GAKI;EA1BD,CAAP,CAtEmE,CAiGhE;EACH;;EAEA,SAAS4C,WAAT,CAAqBC,IAArB,EAA2B;IACzB,IAAI7E,UAAU,CAAC6E,IAAD,CAAd,EAAsB;MACpB;MACA,OAAO,IAAIrF,WAAJ,CAAgBoF,WAAW,CAACC,IAAI,CAACC,MAAN,CAA3B,CAAP;IACD;;IAED,IAAI7E,aAAa,CAAC4E,IAAD,CAAjB,EAAyB;MACvB;MACA,OAAO,IAAIpF,cAAJ,CAAmBmF,WAAW,CAACC,IAAI,CAACC,MAAN,CAA9B,CAAP;IACD,CATwB,CASvB;;;IAEF,OAAOf,gBAAgB,CAACc,IAAD,CAAvB;EACD;;EAED,SAASd,gBAAT,CAA0Bc,IAA1B,EAAgC;IAC9B;IACA;IACA;IACA,OAAOxB,OAAO,CAACwB,IAAI,CAAC/B,IAAN,CAAd;EACD;;EAED,SAASyB,gBAAT,CAA0BQ,SAA1B,EAAqC;IACnC,MAAMC,MAAM,GAAGD,SAAS,CAACrD,QAAV,EAAf;IACA,OAAO,IAAIpB,gBAAJ,CAAqB,EAC1B,GAAG0E,MADuB;MAE1BC,IAAI,EAAEhG,QAAQ,CAAC+F,MAAM,CAACC,IAAR,EAAcC,SAAd;IAFY,CAArB,CAAP;EAID;;EAED,SAAS1B,eAAT,CAAyBqB,IAAzB,EAA+B;IAC7B,IAAIpE,mBAAmB,CAACoE,IAAD,CAAnB,IAA6BnE,qBAAqB,CAACmE,IAAD,CAAtD,EAA8D;MAC5D;MACA,OAAOA,IAAP;IACD;;IAED,IAAI1E,YAAY,CAAC0E,IAAD,CAAhB,EAAwB;MACtB,OAAOM,gBAAgB,CAACN,IAAD,CAAvB;IACD;;IAED,IAAI3E,YAAY,CAAC2E,IAAD,CAAhB,EAAwB;MACtB,OAAOO,gBAAgB,CAACP,IAAD,CAAvB;IACD;;IAED,IAAI9E,eAAe,CAAC8E,IAAD,CAAnB,EAA2B;MACzB,OAAOQ,mBAAmB,CAACR,IAAD,CAA1B;IACD;;IAED,IAAIzE,WAAW,CAACyE,IAAD,CAAf,EAAuB;MACrB,OAAOS,eAAe,CAACT,IAAD,CAAtB;IACD;;IAED,IAAIhF,UAAU,CAACgF,IAAD,CAAd,EAAsB;MACpB,OAAOU,cAAc,CAACV,IAAD,CAArB;IACD;;IAED,IAAI/E,iBAAiB,CAAC+E,IAAD,CAArB,EAA6B;MAC3B,OAAOW,qBAAqB,CAACX,IAAD,CAA5B;IACD;IACD;IACA;;;IAEA,SAAS9F,SAAS,CAAC,KAAD,EAAQ,sBAAsBD,OAAO,CAAC+F,IAAD,CAArC,CAAlB;EACD;;EAED,SAASW,qBAAT,CAA+BX,IAA/B,EAAqC;IACnC,IAAIY,qBAAJ;;IAEA,MAAMT,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAf;IACA,MAAM+C,UAAU,GACd,CAACgB,qBAAqB,GAAGvD,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA1C,MAA6D,IAA7D,IACA2C,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;IAKA,OAAO,IAAInG,sBAAJ,CAA2B,EAChC,GAAG0F,MAD6B;MAEhCU,MAAM,EAAE,OAAO,EACb,GAAGzG,QAAQ,CAAC+F,MAAM,CAACU,MAAR,EAAiBC,KAAD,KAAY,EACrC,GAAGA,KADkC;UAErCd,IAAI,EAAED,WAAW,CAACe,KAAK,CAACd,IAAP;QAFoB,CAAZ,CAAhB,CADE;QAKb,GAAGe,kBAAkB,CAACnB,UAAD;MALR,CAAP,CAFwB;MAShCE,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB1B,MAAzB,CAAgCwB,UAAhC;IATa,CAA3B,CAAP;EAWD;;EAED,SAASc,cAAT,CAAwBV,IAAxB,EAA8B;IAC5B,IAAIgB,qBAAJ;;IAEA,MAAMb,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAf;IACA,MAAM+C,UAAU,GACd,CAACoB,qBAAqB,GAAG3D,iBAAiB,CAAC2C,IAAI,CAAC/B,IAAN,CAA1C,MAA2D,IAA3D,IACA+C,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;IAKA,OAAO,IAAIxG,eAAJ,CAAoB,EACzB,GAAG2F,MADsB;MAEzBZ,MAAM,EAAE,EAAE,GAAGY,MAAM,CAACZ,MAAZ;QAAoB,GAAG0B,iBAAiB,CAACrB,UAAD;MAAxC,CAFiB;MAGzBE,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB1B,MAAzB,CAAgCwB,UAAhC;IAHM,CAApB,CAAP;EAKD;;EAED,SAASU,gBAAT,CAA0BN,IAA1B,EAAgC;IAC9B,IAAIkB,sBAAJ;;IAEA,MAAMf,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAf;IACA,MAAM+C,UAAU,GACd,CAACsB,sBAAsB,GAAG7D,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IACAiD,sBAAsB,KAAK,KAAK,CADhC,GAEIA,sBAFJ,GAGI,EAJN;IAKA,IAAIC,cAAc,GAAGhB,MAAM,CAACgB,cAA5B;;IAEA,KAAK,MAAMC,aAAX,IAA4BxB,UAA5B,EAAwC;MACtC,IAAIyB,kBAAJ;;MAEAF,cAAc,GACZ,CAACE,kBAAkB,GAAGC,iBAAiB,CAACF,aAAD,CAAvC,MAA4D,IAA5D,IACAC,kBAAkB,KAAK,KAAK,CAD5B,GAEIA,kBAFJ,GAGIF,cAJN;IAKD;;IAED,OAAO,IAAIrG,iBAAJ,CAAsB,EAC3B,GAAGqF,MADwB;MAE3BgB,cAF2B;MAG3BrB,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB1B,MAAzB,CAAgCwB,UAAhC;IAHQ,CAAtB,CAAP;EAKD;;EAED,SAASW,gBAAT,CAA0BP,IAA1B,EAAgC;IAC9B,IAAIuB,sBAAJ;;IAEA,MAAMpB,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAf;IACA,MAAM+C,UAAU,GACd,CAAC2B,sBAAsB,GAAGlE,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IACAsD,sBAAsB,KAAK,KAAK,CADhC,GAEIA,sBAFJ,GAGI,EAJN;IAKA,OAAO,IAAI1G,iBAAJ,CAAsB,EAC3B,GAAGsF,MADwB;MAE3BqB,UAAU,EAAE,MAAM,CAChB,GAAGxB,IAAI,CAACyB,aAAL,GAAqBhC,GAArB,CAAyBP,gBAAzB,CADa,EAEhB,GAAGwC,eAAe,CAAC9B,UAAD,CAFF,CAFS;MAM3BiB,MAAM,EAAE,OAAO,EACb,GAAGzG,QAAQ,CAAC+F,MAAM,CAACU,MAAR,EAAgBc,WAAhB,CADE;QAEb,GAAGC,aAAa,CAAChC,UAAD;MAFH,CAAP,CANmB;MAU3BE,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB1B,MAAzB,CAAgCwB,UAAhC;IAVQ,CAAtB,CAAP;EAYD;;EAED,SAASY,mBAAT,CAA6BR,IAA7B,EAAmC;IACjC,IAAI6B,sBAAJ;;IAEA,MAAM1B,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAf;IACA,MAAM+C,UAAU,GACd,CAACiC,sBAAsB,GAAGxE,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IACA4D,sBAAsB,KAAK,KAAK,CADhC,GAEIA,sBAFJ,GAGI,EAJN;IAKA,OAAO,IAAInH,oBAAJ,CAAyB,EAC9B,GAAGyF,MAD2B;MAE9BqB,UAAU,EAAE,MAAM,CAChB,GAAGxB,IAAI,CAACyB,aAAL,GAAqBhC,GAArB,CAAyBP,gBAAzB,CADa,EAEhB,GAAGwC,eAAe,CAAC9B,UAAD,CAFF,CAFY;MAM9BiB,MAAM,EAAE,OAAO,EACb,GAAGzG,QAAQ,CAAC+F,MAAM,CAACU,MAAR,EAAgBc,WAAhB,CADE;QAEb,GAAGC,aAAa,CAAChC,UAAD;MAFH,CAAP,CANsB;MAU9BE,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB1B,MAAzB,CAAgCwB,UAAhC;IAVW,CAAzB,CAAP;EAYD;;EAED,SAASa,eAAT,CAAyBT,IAAzB,EAA+B;IAC7B,IAAI8B,sBAAJ;;IAEA,MAAM3B,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAf;IACA,MAAM+C,UAAU,GACd,CAACkC,sBAAsB,GAAGzE,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IACA6D,sBAAsB,KAAK,KAAK,CADhC,GAEIA,sBAFJ,GAGI,EAJN;IAKA,OAAO,IAAI/G,gBAAJ,CAAqB,EAC1B,GAAGoF,MADuB;MAE1BzB,KAAK,EAAE,MAAM,CACX,GAAGsB,IAAI,CAAC+B,QAAL,GAAgBtC,GAAhB,CAAoBP,gBAApB,CADQ,EAEX,GAAG8C,eAAe,CAACpC,UAAD,CAFP,CAFa;MAM1BE,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB1B,MAAzB,CAAgCwB,UAAhC;IANO,CAArB,CAAP;EAQD;;EAED,SAAS+B,WAAT,CAAqBb,KAArB,EAA4B;IAC1B,OAAO,EACL,GAAGA,KADE;MAELd,IAAI,EAAED,WAAW,CAACe,KAAK,CAACd,IAAP,CAFZ;MAGLI,IAAI,EAAEU,KAAK,CAACV,IAAN,IAAchG,QAAQ,CAAC0G,KAAK,CAACV,IAAP,EAAaC,SAAb;IAHvB,CAAP;EAKD;;EAED,SAASA,SAAT,CAAmB4B,GAAnB,EAAwB;IACtB,OAAO,EAAE,GAAGA,GAAL;MAAUjC,IAAI,EAAED,WAAW,CAACkC,GAAG,CAACjC,IAAL;IAA3B,CAAP;EACD;;EAED,SAASX,iBAAT,CAA2B6C,KAA3B,EAAkC;IAChC,MAAMC,OAAO,GAAG,EAAhB;;IAEA,KAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;MACxB,IAAIG,oBAAJ,CADwB,CAGxB;;;MACA,MAAMC,mBAAmB;MACvB;MACA,CAACD,oBAAoB,GAAGD,IAAI,CAACpD,cAA7B,MAAiD,IAAjD,IACAqD,oBAAoB,KAAK,KAAK,CAD9B,GAEIA,oBAFJ,GAGI,EALN;;MAOA,KAAK,MAAME,aAAX,IAA4BD,mBAA5B,EAAiD;QAC/C;QACA;QACA;QACA;QACAH,OAAO,CAACI,aAAa,CAACC,SAAf,CAAP,GAAmCC,YAAY,CAACF,aAAa,CAACvC,IAAf,CAA/C;MACD;IACF;;IAED,OAAOmC,OAAP;EACD;;EAED,SAASM,YAAT,CAAsBL,IAAtB,EAA4B;IAC1B,IAAIM,iBAAJ;;IAEA,MAAMzE,IAAI,GAAGmE,IAAI,CAACnE,IAAL,CAAUC,KAAvB;IACA,MAAM8B,IAAI,GACR,CAAC0C,iBAAiB,GAAG5D,UAAU,CAACb,IAAD,CAA/B,MAA2C,IAA3C,IACAyE,iBAAiB,KAAK,KAAK,CAD3B,GAEIA,iBAFJ,GAGIlE,OAAO,CAACP,IAAD,CAJb;;IAMA,IAAI+B,IAAI,KAAK2C,SAAb,EAAwB;MACtB,MAAM,IAAIC,KAAJ,CAAW,kBAAiB3E,IAAK,IAAjC,CAAN;IACD;;IAED,OAAO+B,IAAP;EACD;;EAED,SAAS6C,cAAT,CAAwBT,IAAxB,EAA8B;IAC5B,IAAIA,IAAI,CAAC5F,IAAL,KAAcnC,IAAI,CAACyI,SAAvB,EAAkC;MAChC,OAAO,IAAInI,WAAJ,CAAgBkI,cAAc,CAACT,IAAI,CAACpC,IAAN,CAA9B,CAAP;IACD;;IAED,IAAIoC,IAAI,CAAC5F,IAAL,KAAcnC,IAAI,CAAC0I,aAAvB,EAAsC;MACpC,OAAO,IAAInI,cAAJ,CAAmBiI,cAAc,CAACT,IAAI,CAACpC,IAAN,CAAjC,CAAP;IACD;;IAED,OAAOyC,YAAY,CAACL,IAAD,CAAnB;EACD;;EAED,SAASzC,cAAT,CAAwByC,IAAxB,EAA8B;IAC5B,IAAIY,iBAAJ;;IAEA,OAAO,IAAIvH,gBAAJ,CAAqB;MAC1BwC,IAAI,EAAEmE,IAAI,CAACnE,IAAL,CAAUC,KADU;MAE1BoB,WAAW,EACT,CAAC0D,iBAAiB,GAAGZ,IAAI,CAAC9C,WAA1B,MAA2C,IAA3C,IACA0D,iBAAiB,KAAK,KAAK,CAD3B,GAEI,KAAK,CAFT,GAGIA,iBAAiB,CAAC9E,KANE;MAO1B;MACA+E,SAAS,EAAEb,IAAI,CAACa,SAAL,CAAexD,GAAf,CAAmB;QAAA,IAAC;UAAEvB;QAAF,CAAD;QAAA,OAAeA,KAAf;MAAA,CAAnB,CARe;MAS1BgF,YAAY,EAAEd,IAAI,CAACe,UATO;MAU1B/C,IAAI,EAAEgD,gBAAgB,CAAChB,IAAI,CAACiB,SAAN,CAVI;MAW1BxD,OAAO,EAAEuC;IAXiB,CAArB,CAAP;EAaD;;EAED,SAASR,aAAT,CAAuBM,KAAvB,EAA8B;IAC5B,MAAMoB,cAAc,GAAGhG,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;;IAEA,KAAK,MAAM6E,IAAX,IAAmBF,KAAnB,EAA0B;MACxB,IAAIqB,YAAJ,CADwB,CAGxB;;;MACA,MAAMC,UAAU;MACd;MACA,CAACD,YAAY,GAAGnB,IAAI,CAACvB,MAArB,MAAiC,IAAjC,IAAyC0C,YAAY,KAAK,KAAK,CAA/D,GACIA,YADJ,GAEI,EAJN;;MAMA,KAAK,MAAMzC,KAAX,IAAoB0C,UAApB,EAAgC;QAC9B,IAAIC,kBAAJ;;QAEAH,cAAc,CAACxC,KAAK,CAAC7C,IAAN,CAAWC,KAAZ,CAAd,GAAmC;UACjC;UACA;UACA;UACA8B,IAAI,EAAE6C,cAAc,CAAC/B,KAAK,CAACd,IAAP,CAJa;UAKjCV,WAAW,EACT,CAACmE,kBAAkB,GAAG3C,KAAK,CAACxB,WAA5B,MAA6C,IAA7C,IACAmE,kBAAkB,KAAK,KAAK,CAD5B,GAEI,KAAK,CAFT,GAGIA,kBAAkB,CAACvF,KATQ;UAUjCkC,IAAI,EAAEgD,gBAAgB,CAACtC,KAAK,CAACuC,SAAP,CAVW;UAWjCK,iBAAiB,EAAEC,oBAAoB,CAAC7C,KAAD,CAXN;UAYjCjB,OAAO,EAAEiB;QAZwB,CAAnC;MAcD;IACF;;IAED,OAAOwC,cAAP;EACD;;EAED,SAASF,gBAAT,CAA0BhD,IAA1B,EAAgC;IAC9B;IACA,MAAMwD,SAAS;IACb;IACAxD,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0C,EAF5C;IAGA,MAAMyD,YAAY,GAAGvG,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;;IAEA,KAAK,MAAM0E,GAAX,IAAkB2B,SAAlB,EAA6B;MAC3B,IAAIE,gBAAJ,CAD2B,CAG3B;MACA;MACA;;;MACA,MAAM9D,IAAI,GAAG6C,cAAc,CAACZ,GAAG,CAACjC,IAAL,CAA3B;MACA6D,YAAY,CAAC5B,GAAG,CAAChE,IAAJ,CAASC,KAAV,CAAZ,GAA+B;QAC7B8B,IAD6B;QAE7BV,WAAW,EACT,CAACwE,gBAAgB,GAAG7B,GAAG,CAAC3C,WAAxB,MAAyC,IAAzC,IACAwE,gBAAgB,KAAK,KAAK,CAD1B,GAEI,KAAK,CAFT,GAGIA,gBAAgB,CAAC5F,KANM;QAO7B6F,YAAY,EAAE5H,YAAY,CAAC8F,GAAG,CAAC8B,YAAL,EAAmB/D,IAAnB,CAPG;QAQ7B0D,iBAAiB,EAAEC,oBAAoB,CAAC1B,GAAD,CARV;QAS7BpC,OAAO,EAAEoC;MAToB,CAA/B;IAWD;;IAED,OAAO4B,YAAP;EACD;;EAED,SAAS9C,kBAAT,CAA4BmB,KAA5B,EAAmC;IACjC,MAAM8B,aAAa,GAAG1G,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;;IAEA,KAAK,MAAM6E,IAAX,IAAmBF,KAAnB,EAA0B;MACxB,IAAI+B,aAAJ,CADwB,CAGxB;;;MACA,MAAMC,WAAW;MACf;MACA,CAACD,aAAa,GAAG7B,IAAI,CAACvB,MAAtB,MAAkC,IAAlC,IAA0CoD,aAAa,KAAK,KAAK,CAAjE,GACIA,aADJ,GAEI,EAJN;;MAMA,KAAK,MAAMnD,KAAX,IAAoBoD,WAApB,EAAiC;QAC/B,IAAIC,mBAAJ,CAD+B,CAG/B;QACA;QACA;;;QACA,MAAMnE,IAAI,GAAG6C,cAAc,CAAC/B,KAAK,CAACd,IAAP,CAA3B;QACAgE,aAAa,CAAClD,KAAK,CAAC7C,IAAN,CAAWC,KAAZ,CAAb,GAAkC;UAChC8B,IADgC;UAEhCV,WAAW,EACT,CAAC6E,mBAAmB,GAAGrD,KAAK,CAACxB,WAA7B,MAA8C,IAA9C,IACA6E,mBAAmB,KAAK,KAAK,CAD7B,GAEI,KAAK,CAFT,GAGIA,mBAAmB,CAACjG,KANM;UAOhC6F,YAAY,EAAE5H,YAAY,CAAC2E,KAAK,CAACiD,YAAP,EAAqB/D,IAArB,CAPM;UAQhC0D,iBAAiB,EAAEC,oBAAoB,CAAC7C,KAAD,CARP;UAShCjB,OAAO,EAAEiB;QATuB,CAAlC;MAWD;IACF;;IAED,OAAOkD,aAAP;EACD;;EAED,SAAS/C,iBAAT,CAA2BiB,KAA3B,EAAkC;IAChC,MAAMkC,YAAY,GAAG9G,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;;IAEA,KAAK,MAAM6E,IAAX,IAAmBF,KAAnB,EAA0B;MACxB,IAAImC,YAAJ,CADwB,CAGxB;;;MACA,MAAMC,WAAW;MACf;MACA,CAACD,YAAY,GAAGjC,IAAI,CAAC7C,MAArB,MAAiC,IAAjC,IAAyC8E,YAAY,KAAK,KAAK,CAA/D,GACIA,YADJ,GAEI,EAJN;;MAMA,KAAK,MAAMnG,KAAX,IAAoBoG,WAApB,EAAiC;QAC/B,IAAIC,kBAAJ;;QAEAH,YAAY,CAAClG,KAAK,CAACD,IAAN,CAAWC,KAAZ,CAAZ,GAAiC;UAC/BoB,WAAW,EACT,CAACiF,kBAAkB,GAAGrG,KAAK,CAACoB,WAA5B,MAA6C,IAA7C,IACAiF,kBAAkB,KAAK,KAAK,CAD5B,GAEI,KAAK,CAFT,GAGIA,kBAAkB,CAACrG,KALM;UAM/BwF,iBAAiB,EAAEC,oBAAoB,CAACzF,KAAD,CANR;UAO/B2B,OAAO,EAAE3B;QAPsB,CAAjC;MASD;IACF;;IAED,OAAOkG,YAAP;EACD;;EAED,SAAS1C,eAAT,CAAyBQ,KAAzB,EAAgC;IAC9B;IACA;IACA;IACA;IACA,OAAOA,KAAK,CAACsC,OAAN,EACL;IACCpC,IAAD,IAAU;MACR,IAAIqC,oBAAJ,EAA0BC,gBAA1B;;MAEA;QACE;QACA,CAACD,oBAAoB,GACnB,CAACC,gBAAgB,GAAGtC,IAAI,CAACZ,UAAzB,MAAyC,IAAzC,IACAkD,gBAAgB,KAAK,KAAK,CAD1B,GAEI,KAAK,CAFT,GAGIA,gBAAgB,CAACjF,GAAjB,CAAqBgD,YAArB,CAJN,MAI8C,IAJ9C,IAKEgC,oBAAoB,KAAK,KAAK,CALhC,GAMIA,oBANJ,GAOI;MATN;IAWD,CAhBI,CAAP;EAkBD;;EAED,SAASzC,eAAT,CAAyBE,KAAzB,EAAgC;IAC9B;IACA;IACA;IACA;IACA,OAAOA,KAAK,CAACsC,OAAN,EACL;IACCpC,IAAD,IAAU;MACR,IAAIuC,eAAJ,EAAqBC,WAArB;;MAEA;QACE;QACA,CAACD,eAAe,GACd,CAACC,WAAW,GAAGxC,IAAI,CAAC1D,KAApB,MAA+B,IAA/B,IAAuCkG,WAAW,KAAK,KAAK,CAA5D,GACI,KAAK,CADT,GAEIA,WAAW,CAACnF,GAAZ,CAAgBgD,YAAhB,CAHN,MAGyC,IAHzC,IAIEkC,eAAe,KAAK,KAAK,CAJ3B,GAKIA,eALJ,GAMI;MARN;IAUD,CAfI,CAAP;EAiBD;;EAED,SAAS5F,SAAT,CAAmBc,OAAnB,EAA4B;IAC1B,IAAIgF,qBAAJ;;IAEA,MAAM5G,IAAI,GAAG4B,OAAO,CAAC5B,IAAR,CAAaC,KAA1B;IACA,MAAM4B,iBAAiB,GACrB,CAAC+E,qBAAqB,GAAGxH,iBAAiB,CAACY,IAAD,CAA1C,MAAsD,IAAtD,IACA4G,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;;IAMA,QAAQhF,OAAO,CAACrD,IAAhB;MACE,KAAKnC,IAAI,CAACyK,sBAAV;QAAkC;UAChC,IAAIC,oBAAJ;;UAEA,MAAMC,QAAQ,GAAG,CAACnF,OAAD,EAAU,GAAGC,iBAAb,CAAjB;UACA,OAAO,IAAIjF,iBAAJ,CAAsB;YAC3BoD,IAD2B;YAE3BqB,WAAW,EACT,CAACyF,oBAAoB,GAAGlF,OAAO,CAACP,WAAhC,MAAiD,IAAjD,IACAyF,oBAAoB,KAAK,KAAK,CAD9B,GAEI,KAAK,CAFT,GAGIA,oBAAoB,CAAC7G,KANA;YAO3BsD,UAAU,EAAE,MAAME,eAAe,CAACsD,QAAD,CAPN;YAQ3BnE,MAAM,EAAE,MAAMe,aAAa,CAACoD,QAAD,CARA;YAS3BnF,OAT2B;YAU3BC;UAV2B,CAAtB,CAAP;QAYD;;MAED,KAAKzF,IAAI,CAAC4K,yBAAV;QAAqC;UACnC,IAAIC,qBAAJ;;UAEA,MAAMF,QAAQ,GAAG,CAACnF,OAAD,EAAU,GAAGC,iBAAb,CAAjB;UACA,OAAO,IAAIpF,oBAAJ,CAAyB;YAC9BuD,IAD8B;YAE9BqB,WAAW,EACT,CAAC4F,qBAAqB,GAAGrF,OAAO,CAACP,WAAjC,MAAkD,IAAlD,IACA4F,qBAAqB,KAAK,KAAK,CAD/B,GAEI,KAAK,CAFT,GAGIA,qBAAqB,CAAChH,KANE;YAO9BsD,UAAU,EAAE,MAAME,eAAe,CAACsD,QAAD,CAPH;YAQ9BnE,MAAM,EAAE,MAAMe,aAAa,CAACoD,QAAD,CARG;YAS9BnF,OAT8B;YAU9BC;UAV8B,CAAzB,CAAP;QAYD;;MAED,KAAKzF,IAAI,CAAC8K,oBAAV;QAAgC;UAC9B,IAAIC,qBAAJ;;UAEA,MAAMJ,QAAQ,GAAG,CAACnF,OAAD,EAAU,GAAGC,iBAAb,CAAjB;UACA,OAAO,IAAItF,eAAJ,CAAoB;YACzByD,IADyB;YAEzBqB,WAAW,EACT,CAAC8F,qBAAqB,GAAGvF,OAAO,CAACP,WAAjC,MAAkD,IAAlD,IACA8F,qBAAqB,KAAK,KAAK,CAD/B,GAEI,KAAK,CAFT,GAGIA,qBAAqB,CAAClH,KANH;YAOzBqB,MAAM,EAAE0B,iBAAiB,CAAC+D,QAAD,CAPA;YAQzBnF,OARyB;YASzBC;UATyB,CAApB,CAAP;QAWD;;MAED,KAAKzF,IAAI,CAACgL,qBAAV;QAAiC;UAC/B,IAAIC,qBAAJ;;UAEA,MAAMN,QAAQ,GAAG,CAACnF,OAAD,EAAU,GAAGC,iBAAb,CAAjB;UACA,OAAO,IAAI/E,gBAAJ,CAAqB;YAC1BkD,IAD0B;YAE1BqB,WAAW,EACT,CAACgG,qBAAqB,GAAGzF,OAAO,CAACP,WAAjC,MAAkD,IAAlD,IACAgG,qBAAqB,KAAK,KAAK,CAD/B,GAEI,KAAK,CAFT,GAGIA,qBAAqB,CAACpH,KANF;YAO1BQ,KAAK,EAAE,MAAMsD,eAAe,CAACgD,QAAD,CAPF;YAQ1BnF,OAR0B;YAS1BC;UAT0B,CAArB,CAAP;QAWD;;MAED,KAAKzF,IAAI,CAACkL,sBAAV;QAAkC;UAChC,IAAIC,qBAAJ;;UAEA,OAAO,IAAI1K,iBAAJ,CAAsB;YAC3BmD,IAD2B;YAE3BqB,WAAW,EACT,CAACkG,qBAAqB,GAAG3F,OAAO,CAACP,WAAjC,MAAkD,IAAlD,IACAkG,qBAAqB,KAAK,KAAK,CAD/B,GAEI,KAAK,CAFT,GAGIA,qBAAqB,CAACtH,KAND;YAO3BiD,cAAc,EAAEG,iBAAiB,CAACzB,OAAD,CAPN;YAQ3BA,OAR2B;YAS3BC;UAT2B,CAAtB,CAAP;QAWD;;MAED,KAAKzF,IAAI,CAACoL,4BAAV;QAAwC;UACtC,IAAIC,qBAAJ;;UAEA,MAAMV,QAAQ,GAAG,CAACnF,OAAD,EAAU,GAAGC,iBAAb,CAAjB;UACA,OAAO,IAAIrF,sBAAJ,CAA2B;YAChCwD,IADgC;YAEhCqB,WAAW,EACT,CAACoG,qBAAqB,GAAG7F,OAAO,CAACP,WAAjC,MAAkD,IAAlD,IACAoG,qBAAqB,KAAK,KAAK,CAD/B,GAEI,KAAK,CAFT,GAGIA,qBAAqB,CAACxH,KANI;YAOhC2C,MAAM,EAAE,MAAME,kBAAkB,CAACiE,QAAD,CAPA;YAQhCnF,OARgC;YAShCC;UATgC,CAA3B,CAAP;QAWD;IAtGH;EAwGD;AACF;AACD,MAAMhB,UAAU,GAAG3E,MAAM,CACvB,CAAC,GAAG2B,oBAAJ,EAA0B,GAAGH,kBAA7B,CADuB,EAEtBqE,IAAD,IAAUA,IAAI,CAAC/B,IAFQ,CAAzB;AAIA;AACA;AACA;AACA;;AAEA,SAAS0F,oBAAT,CAA8BvB,IAA9B,EAAoC;EAClC,MAAMuD,UAAU,GAAGzJ,kBAAkB,CAACV,0BAAD,EAA6B4G,IAA7B,CAArC,CADkC,CACuC;;EAEzE,OAAOuD,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GACH,KAAK,CADF,GAEHA,UAAU,CAACC,MAFf;AAGD;AACD;AACA;AACA;;;AAEA,SAAStE,iBAAT,CAA2Bc,IAA3B,EAAiC;EAC/B,MAAMyD,WAAW,GAAG3J,kBAAkB,CAACR,2BAAD,EAA8B0G,IAA9B,CAAtC,CAD+B,CAC4C;;EAE3E,OAAOyD,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GACH,KAAK,CADF,GAEHA,WAAW,CAACC,GAFhB;AAGD"},"metadata":{},"sourceType":"module"}