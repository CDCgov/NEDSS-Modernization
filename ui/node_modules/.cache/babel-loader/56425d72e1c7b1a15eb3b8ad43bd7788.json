{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\n\nexport function NoUnusedVariablesRule(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        var _iterator = _createForOfIteratorHelper(usages),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value.node;\n            variableNameUsed[node.name.value] = true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(variableDefs),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var variableDef = _step2.value;\n            var variableName = variableDef.variable.name.value;\n\n            if (variableNameUsed[variableName] !== true) {\n              context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(variableName, \"\\\" is never used in operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(variableName, \"\\\" is never used.\"), {\n                nodes: variableDef\n              }));\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","NoUnusedVariablesRule","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","node","name","value","variableDef","variableName","variable","reportError","nodes","VariableDefinition","def","push"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;EAC7C,IAAIC,YAAY,GAAG,EAAnB;EACA,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KADmB,mBACX;QACNF,YAAY,GAAG,EAAf;MACD,CAHkB;MAKnBG,KALmB,iBAKbC,SALa,EAKF;QACf,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;QACA,IAAMC,MAAM,GAAGT,OAAO,CAACU,0BAAR,CAAmCL,SAAnC,CAAf;;QAFe,2CAIQI,MAJR;QAAA;;QAAA;UAIf,oDAA+B;YAAA,IAAlBE,IAAkB,eAAlBA,IAAkB;YAC7BL,gBAAgB,CAACK,IAAI,CAACC,IAAL,CAAUC,KAAX,CAAhB,GAAoC,IAApC;UACD;QANc;UAAA;QAAA;UAAA;QAAA;;QAAA,4CAQWZ,YARX;QAAA;;QAAA;UAQf,uDAAwC;YAAA,IAA7Ba,WAA6B;YACtC,IAAMC,YAAY,GAAGD,WAAW,CAACE,QAAZ,CAAqBJ,IAArB,CAA0BC,KAA/C;;YAEA,IAAIP,gBAAgB,CAACS,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;cAC3Cf,OAAO,CAACiB,WAAR,CACE,IAAInB,YAAJ,CACEO,SAAS,CAACO,IAAV,yBACkBG,YADlB,6CAC+DV,SAAS,CAACO,IAAV,CAAeC,KAD9E,iCAEkBE,YAFlB,sBADF,EAIE;gBACEG,KAAK,EAAEJ;cADT,CAJF,CADF;YAUD;UACF;QAvBc;UAAA;QAAA;UAAA;QAAA;MAwBhB;IA7BkB,CADhB;IAiCLK,kBAjCK,8BAiCcC,GAjCd,EAiCmB;MACtBnB,YAAY,CAACoB,IAAb,CAAkBD,GAAlB;IACD;EAnCI,CAAP;AAqCD"},"metadata":{},"sourceType":"module"}