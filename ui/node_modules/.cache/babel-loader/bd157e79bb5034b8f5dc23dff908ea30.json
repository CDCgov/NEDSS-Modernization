{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n\n    return new Observable(function (observer) {\n      var handle;\n      var closed = false;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        if (closed) return;\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAAgE,kBAAhE;AACA,SAASC,UAAT,QAAmD,0BAAnD;AAOA,OAAM,SAAUC,UAAV,CAAqBC,MAArB,EAA0C;EAC9C,OAAO,IAAIH,UAAJ,CAAe,UAACI,SAAD,EAAuBC,OAAvB,EAAwC;IAC5D,IAAWC,OAAO,UAAKF,SAAL,EAAZ,EAAY,CAAlB;;IAEA,OAAO,IAAIH,UAAJ,CAAe,oBAAQ;MAC5B,IAAIM,MAAJ;MACA,IAAIC,MAAM,GAAG,KAAb;MACAC,OAAO,CAACC,OAAR,CAAgBJ,OAAhB,EACGK,IADH,CACQ,eAAG;QAAI,aAAM,CAACC,GAAD,EAAMR,SAAS,CAACS,UAAV,EAAN,CAAN;MAAmC,CADlD,EAEGF,IAFH,CAEQP,SAAS,CAACF,UAFlB,EAGGS,IAHH,CAGQ;QAEJ,IAAIH,MAAJ,EAAY;QACZD,MAAM,GAAGF,OAAO,CAACD,SAAD,CAAP,CAAmBU,SAAnB,CAA6B;UACpCC,IAAI,EAAEC,QAAQ,CAACD,IAAT,CAAcE,IAAd,CAAmBD,QAAnB,CAD8B;UAEpCE,KAAK,EAAEF,QAAQ,CAACE,KAAT,CAAeD,IAAf,CAAoBD,QAApB,CAF6B;UAGpCG,QAAQ,EAAEH,QAAQ,CAACG,QAAT,CAAkBF,IAAlB,CAAuBD,QAAvB;QAH0B,CAA7B,CAAT;MAKD,CAXH,EAYGI,KAZH,CAYSJ,QAAQ,CAACE,KAAT,CAAeD,IAAf,CAAoBD,QAApB,CAZT;MAcA,OAAO;QACLR,MAAM,GAAG,IAAT;QACA,IAAID,MAAJ,EAAYA,MAAM,CAACc,WAAP;MACb,CAHD;IAID,CArBM,CAAP;EAsBD,CAzBM,CAAP;AA0BD","names":["ApolloLink","Observable","setContext","setter","operation","forward","request","handle","closed","Promise","resolve","then","req","getContext","subscribe","next","observer","bind","error","complete","catch","unsubscribe"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/link/context/index.ts"],"sourcesContent":["import { ApolloLink, Operation, GraphQLRequest, NextLink } from '../core';\nimport { Observable, ObservableSubscription } from '../../utilities';\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: any,\n) => Promise<any> | any;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable(observer => {\n      let handle: ObservableSubscription;\n      let closed = false;\n      Promise.resolve(request)\n        .then(req => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          // if the observer is already closed, no need to subscribe.\n          if (closed) return;\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}