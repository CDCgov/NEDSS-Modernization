{"ast":null,"code":"import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport var instanceOf =\n/* c8 ignore next 6 */\n// FIXME: https://github.com/graphql/graphql-js/issues/2317\n// eslint-disable-next-line no-undef\nprocess.env.NODE_ENV === 'production' ? function instanceOf(value, constructor) {\n  return value instanceof constructor;\n} : function instanceOf(value, constructor) {\n  if (value instanceof constructor) {\n    return true;\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    var _value$constructor; // Prefer Symbol.toStringTag since it is immune to minification.\n\n\n    var className = constructor.prototype[Symbol.toStringTag];\n    var valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n    Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n    ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;\n\n    if (className === valueClassName) {\n      var stringifiedValue = inspect(value);\n      throw new Error(\"Cannot use \".concat(className, \" \\\"\").concat(stringifiedValue, \"\\\" from another module or realm.\\n\\nEnsure that there is only one instance of \\\"graphql\\\" in the node_modules\\ndirectory. If different versions of \\\"graphql\\\" are the dependencies of other\\nrelied on modules, use \\\"resolutions\\\" to ensure only one version is installed.\\n\\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\\n\\nDuplicate \\\"graphql\\\" modules cannot be used at the same time since different\\nversions may have different capabilities and behavior. The data from one\\nversion used in the function from another could produce confusing and\\nspurious results.\"));\n    }\n  }\n\n  return false;\n};","map":{"version":3,"names":["inspect","instanceOf","process","env","NODE_ENV","value","constructor","_value$constructor","className","prototype","Symbol","toStringTag","valueClassName","name","stringifiedValue","Error"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/jsutils/instanceOf.mjs"],"sourcesContent":["import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,UAAU;AACrB;AACA;AACA;AACAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI,SAASH,UAAT,CAAoBI,KAApB,EAA2BC,WAA3B,EAAwC;EACtC,OAAOD,KAAK,YAAYC,WAAxB;AACD,CAHL,GAII,SAASL,UAAT,CAAoBI,KAApB,EAA2BC,WAA3B,EAAwC;EACtC,IAAID,KAAK,YAAYC,WAArB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;IAC/C,IAAIE,kBAAJ,CAD+C,CAG/C;;;IACA,IAAMC,SAAS,GAAGF,WAAW,CAACG,SAAZ,CAAsBC,MAAM,CAACC,WAA7B,CAAlB;IACA,IAAMC,cAAc,GAAG;IACrBF,MAAM,CAACC,WAAP,IAAsBN,KAAtB,CAA4B;IAA5B,EACIA,KAAK,CAACK,MAAM,CAACC,WAAR,CADT,GAEI,CAACJ,kBAAkB,GAAGF,KAAK,CAACC,WAA5B,MAA6C,IAA7C,IACAC,kBAAkB,KAAK,KAAK,CAD5B,GAEA,KAAK,CAFL,GAGAA,kBAAkB,CAACM,IANzB;;IAQA,IAAIL,SAAS,KAAKI,cAAlB,EAAkC;MAChC,IAAME,gBAAgB,GAAGd,OAAO,CAACK,KAAD,CAAhC;MACA,MAAM,IAAIU,KAAJ,sBAAwBP,SAAxB,gBAAsCM,gBAAtC,qkBAAN;IAYD;EACF;;EAED,OAAO,KAAP;AACD,CA5CA"},"metadata":{},"sourceType":"module"}