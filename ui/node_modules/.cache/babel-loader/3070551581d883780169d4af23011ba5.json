{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\n\nexport function UniqueTypeNamesRule(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), {\n        nodes: node.name\n      }));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), {\n        nodes: [knownTypeNames[typeName], node.name]\n      }));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","UniqueTypeNamesRule","context","knownTypeNames","Object","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","typeName","name","value","getType","reportError","nodes"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, {\n          nodes: [knownTypeNames[typeName], node.name],\n        }),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;EAC3C,IAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;EACA,IAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAf;EACA,OAAO;IACLC,oBAAoB,EAAEC,aADjB;IAELC,oBAAoB,EAAED,aAFjB;IAGLE,uBAAuB,EAAEF,aAHpB;IAILG,mBAAmB,EAAEH,aAJhB;IAKLI,kBAAkB,EAAEJ,aALf;IAMLK,yBAAyB,EAAEL;EANtB,CAAP;;EASA,SAASA,aAAT,CAAuBM,IAAvB,EAA6B;IAC3B,IAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA3B;;IAEA,IAAIZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,IAAwCA,MAAM,CAACa,OAAP,CAAeH,QAAf,CAA5C,EAAsE;MACpEd,OAAO,CAACkB,WAAR,CACE,IAAIpB,YAAJ,kBACWgB,QADX,0FAEE;QACEK,KAAK,EAAEN,IAAI,CAACE;MADd,CAFF,CADF;MAQA;IACD;;IAED,IAAId,cAAc,CAACa,QAAD,CAAlB,EAA8B;MAC5Bd,OAAO,CAACkB,WAAR,CACE,IAAIpB,YAAJ,8CAAsDgB,QAAtD,UAAoE;QAClEK,KAAK,EAAE,CAAClB,cAAc,CAACa,QAAD,CAAf,EAA2BD,IAAI,CAACE,IAAhC;MAD2D,CAApE,CADF;IAKD,CAND,MAMO;MACLd,cAAc,CAACa,QAAD,CAAd,GAA2BD,IAAI,CAACE,IAAhC;IACD;;IAED,OAAO,KAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}