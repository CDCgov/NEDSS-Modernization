{"ast":null,"code":"var _a = Object.prototype,\n    toString = _a.toString,\n    hasOwnProperty = _a.hasOwnProperty;\nvar fnToStr = Function.prototype.toString;\nvar previousComparisons = new Map();\n/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */\n\nfunction equal(a, b) {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\nfunction check(a, b) {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  } // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n\n\n  var aTag = toString.call(a);\n  var bTag = toString.call(b); // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n    // Fall through to object case...\n\n    case '[object Object]':\n      {\n        if (previouslyCompared(a, b)) return true;\n        var aKeys = definedKeys(a);\n        var bKeys = definedKeys(b); // If `a` and `b` have a different number of enumerable keys, they\n        // must be different.\n\n        var keyCount = aKeys.length;\n        if (keyCount !== bKeys.length) return false; // Now make sure they have the same keys.\n\n        for (var k = 0; k < keyCount; ++k) {\n          if (!hasOwnProperty.call(b, aKeys[k])) {\n            return false;\n          }\n        } // Finally, check deep equality of all child properties.\n\n\n        for (var k = 0; k < keyCount; ++k) {\n          var key = aKeys[k];\n\n          if (!check(a[key], b[key])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n    // Fall through to shared +a === +b case...\n\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == \"\".concat(b);\n\n    case '[object Map]':\n    case '[object Set]':\n      {\n        if (a.size !== b.size) return false;\n        if (previouslyCompared(a, b)) return true;\n        var aIterator = a.entries();\n        var isMap = aTag === '[object Map]';\n\n        while (true) {\n          var info = aIterator.next();\n          if (info.done) break; // If a instanceof Set, aValue === aKey.\n\n          var _a = info.value,\n              aKey = _a[0],\n              aValue = _a[1]; // So this works the same way for both Set and Map.\n\n          if (!b.has(aKey)) {\n            return false;\n          } // However, we care about deep equality of values only when dealing\n          // with Map structures.\n\n\n          if (isMap && !check(aValue, b.get(aKey))) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n    case '[object Uint16Array]':\n    case '[object Uint8Array]': // Buffer, in Node.js.\n\n    case '[object Uint32Array]':\n    case '[object Int32Array]':\n    case '[object Int8Array]':\n    case '[object Int16Array]':\n    case '[object ArrayBuffer]':\n      // DataView doesn't need these conversions, but the equality check is\n      // otherwise the same.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n    // Fall through...\n\n    case '[object DataView]':\n      {\n        var len = a.byteLength;\n\n        if (len === b.byteLength) {\n          while (len-- && a[len] === b[len]) {// Keep looping as long as the bytes are equal.\n          }\n        }\n\n        return len === -1;\n      }\n\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]':\n      {\n        var aCode = fnToStr.call(a);\n\n        if (aCode !== fnToStr.call(b)) {\n          return false;\n        } // We consider non-native functions equal if they have the same code\n        // (native functions require === because their code is censored).\n        // Note that this behavior is not entirely sound, since !== function\n        // objects with the same code can behave differently depending on\n        // their closure scope. However, any function can behave differently\n        // depending on the values of its input arguments (including this)\n        // and its calling context (including its closure scope), even\n        // though the function object is === to itself; and it is entirely\n        // possible for functions that are not === to behave exactly the\n        // same under all conceivable circumstances. Because none of these\n        // factors are statically decidable in JavaScript, JS function\n        // equality is not well-defined. This ambiguity allows us to\n        // consider the best possible heuristic among various imperfect\n        // options, and equating non-native functions that have the same\n        // code has enormous practical benefits, such as when comparing\n        // functions that are repeatedly passed as fresh function\n        // expressions within objects that are otherwise deeply equal. Since\n        // any function created from the same syntactic expression (in the\n        // same code location) will always stringify to the same code\n        // according to fnToStr.call, we can reasonably expect these\n        // repeatedly passed function expressions to have the same code, and\n        // thus behave \"the same\" (with all the caveats mentioned above),\n        // even though the runtime function objects are !== to one another.\n\n\n        return !endsWith(aCode, nativeCodeSuffix);\n      }\n  } // Otherwise the values are not equal.\n\n\n  return false;\n}\n\nfunction definedKeys(obj) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\n\nfunction isDefinedKey(key) {\n  return this[key] !== void 0;\n}\n\nvar nativeCodeSuffix = \"{ [native code] }\";\n\nfunction endsWith(full, suffix) {\n  var fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 && full.indexOf(suffix, fromIndex) === fromIndex;\n}\n\nfunction previouslyCompared(a, b) {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  var bSet = previousComparisons.get(a);\n\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set());\n  }\n\n  bSet.add(b);\n  return false;\n}\n\nexport { equal as default, equal };","map":{"version":3,"mappings":"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","names":["Object","prototype","toString","hasOwnProperty","fnToStr","Function","previousComparisons","Map","a","b","check","clear","aTag","call","bTag","length","previouslyCompared","aKeys","definedKeys","bKeys","keyCount","k","key","name","message","concat","size","aIterator","entries","isMap","info","next","done","value","aKey","aValue","has","get","Uint8Array","len","byteLength","aCode","endsWith","nativeCodeSuffix","obj","keys","filter","isDefinedKey","full","suffix","fromIndex","indexOf","bSet","set","Set","add"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@wry/equality/src/equality.ts"],"sourcesContent":["const { toString, hasOwnProperty } = Object.prototype;\nconst fnToStr = Function.prototype.toString;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = definedKeys(a);\n      const bKeys = definedKeys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Uint16Array]':\n    case '[object Uint8Array]': // Buffer, in Node.js.\n    case '[object Uint32Array]':\n    case '[object Int32Array]':\n    case '[object Int8Array]':\n    case '[object Int16Array]':\n    case '[object ArrayBuffer]':\n      // DataView doesn't need these conversions, but the equality check is\n      // otherwise the same.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n      // Fall through...\n    case '[object DataView]': {\n      let len = a.byteLength;\n      if (len === b.byteLength) {\n        while (len-- && a[len] === b[len]) {\n          // Keep looping as long as the bytes are equal.\n        }\n      }\n      return len === -1;\n    }\n\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]': {\n      const aCode = fnToStr.call(a);\n      if (aCode !== fnToStr.call(b)) {\n        return false;\n      }\n\n      // We consider non-native functions equal if they have the same code\n      // (native functions require === because their code is censored).\n      // Note that this behavior is not entirely sound, since !== function\n      // objects with the same code can behave differently depending on\n      // their closure scope. However, any function can behave differently\n      // depending on the values of its input arguments (including this)\n      // and its calling context (including its closure scope), even\n      // though the function object is === to itself; and it is entirely\n      // possible for functions that are not === to behave exactly the\n      // same under all conceivable circumstances. Because none of these\n      // factors are statically decidable in JavaScript, JS function\n      // equality is not well-defined. This ambiguity allows us to\n      // consider the best possible heuristic among various imperfect\n      // options, and equating non-native functions that have the same\n      // code has enormous practical benefits, such as when comparing\n      // functions that are repeatedly passed as fresh function\n      // expressions within objects that are otherwise deeply equal. Since\n      // any function created from the same syntactic expression (in the\n      // same code location) will always stringify to the same code\n      // according to fnToStr.call, we can reasonably expect these\n      // repeatedly passed function expressions to have the same code, and\n      // thus behave \"the same\" (with all the caveats mentioned above),\n      // even though the runtime function objects are !== to one another.\n      return !endsWith(aCode, nativeCodeSuffix);\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction definedKeys<TObject extends object>(obj: TObject) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey<TObject extends object>(\n  this: TObject,\n  key: keyof TObject,\n) {\n  return this[key] !== void 0;\n}\n\nconst nativeCodeSuffix = \"{ [native code] }\";\n\nfunction endsWith(full: string, suffix: string) {\n  const fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 &&\n    full.indexOf(suffix, fromIndex) === fromIndex;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}