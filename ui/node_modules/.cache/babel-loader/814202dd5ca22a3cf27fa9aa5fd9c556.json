{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isInputObjectType, isInterfaceType, isObjectType } from '../../type/definition.mjs';\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n\n    var _iterator = _createForOfIteratorHelper(fieldNodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fieldDef = _step.value;\n        var fieldName = fieldDef.name.value;\n\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), {\n            nodes: fieldDef.name\n          }));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), {\n            nodes: [fieldNames[fieldName], fieldDef.name]\n          }));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}","map":{"version":3,"names":["GraphQLError","isInputObjectType","isInterfaceType","isObjectType","UniqueFieldDefinitionNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","value","fieldNodes","fields","fieldNames","fieldDef","fieldName","hasField","reportError","nodes","type","getFields"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SACEC,iBADF,EAEEC,eAFF,EAGEC,YAHF,QAIO,2BAJP;AAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;EACtD,IAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;EACA,IAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvD;EACA,IAAMC,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;EACA,OAAO;IACLE,yBAAyB,EAAEC,oBADtB;IAELC,wBAAwB,EAAED,oBAFrB;IAGLE,uBAAuB,EAAEF,oBAHpB;IAILG,sBAAsB,EAAEH,oBAJnB;IAKLI,oBAAoB,EAAEJ,oBALjB;IAMLK,mBAAmB,EAAEL;EANhB,CAAP;;EASA,SAASA,oBAAT,CAA8BM,IAA9B,EAAoC;IAClC,IAAIC,YAAJ;;IAEA,IAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAA3B;;IAEA,IAAI,CAACZ,eAAe,CAACU,QAAD,CAApB,EAAgC;MAC9BV,eAAe,CAACU,QAAD,CAAf,GAA4BZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;IACD,CAPiC,CAOhC;;IAEF;;;IAEA,IAAMc,UAAU,GACd,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAArB,MAAiC,IAAjC,IAAyCL,YAAY,KAAK,KAAK,CAA/D,GACIA,YADJ,GAEI,EAHN;IAIA,IAAMM,UAAU,GAAGf,eAAe,CAACU,QAAD,CAAlC;;IAfkC,2CAiBXG,UAjBW;IAAA;;IAAA;MAiBlC,oDAAmC;QAAA,IAAxBG,QAAwB;QACjC,IAAMC,SAAS,GAAGD,QAAQ,CAACL,IAAT,CAAcC,KAAhC;;QAEA,IAAIM,QAAQ,CAACtB,eAAe,CAACc,QAAD,CAAhB,EAA4BO,SAA5B,CAAZ,EAAoD;UAClDxB,OAAO,CAAC0B,WAAR,CACE,IAAI/B,YAAJ,mBACYsB,QADZ,cACwBO,SADxB,yFAEE;YACEG,KAAK,EAAEJ,QAAQ,CAACL;UADlB,CAFF,CADF;QAQD,CATD,MASO,IAAII,UAAU,CAACE,SAAD,CAAd,EAA2B;UAChCxB,OAAO,CAAC0B,WAAR,CACE,IAAI/B,YAAJ,mBACYsB,QADZ,cACwBO,SADxB,mCAEE;YACEG,KAAK,EAAE,CAACL,UAAU,CAACE,SAAD,CAAX,EAAwBD,QAAQ,CAACL,IAAjC;UADT,CAFF,CADF;QAQD,CATM,MASA;UACLI,UAAU,CAACE,SAAD,CAAV,GAAwBD,QAAQ,CAACL,IAAjC;QACD;MACF;IAzCiC;MAAA;IAAA;MAAA;IAAA;;IA2ClC,OAAO,KAAP;EACD;AACF;;AAED,SAASO,QAAT,CAAkBG,IAAlB,EAAwBJ,SAAxB,EAAmC;EACjC,IAAI1B,YAAY,CAAC8B,IAAD,CAAZ,IAAsB/B,eAAe,CAAC+B,IAAD,CAArC,IAA+ChC,iBAAiB,CAACgC,IAAD,CAApE,EAA4E;IAC1E,OAAOA,IAAI,CAACC,SAAL,GAAiBL,SAAjB,KAA+B,IAAtC;EACD;;EAED,OAAO,KAAP;AACD"},"metadata":{},"sourceType":"module"}