{"ast":null,"code":"import _toConsumableArray from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\n\nexport function KnownTypeNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  var definedTypes = Object.create(null);\n\n  var _iterator = _createForOfIteratorHelper(context.getDocument().definitions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var def = _step.value;\n\n      if (isTypeDefinitionNode(def)) {\n        definedTypes[def.name.value] = true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var typeNames = [].concat(_toConsumableArray(Object.keys(existingTypesMap)), _toConsumableArray(Object.keys(definedTypes)));\n  return {\n    NamedType: function NamedType(node, _1, parent, _2, ancestors) {\n      var typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;\n        var isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        var suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(\"Unknown type \\\"\".concat(typeName, \"\\\".\") + didYouMean(suggestedTypes), {\n          nodes: node\n        }));\n      }\n    }\n  };\n}\nvar standardTypeNames = [].concat(_toConsumableArray(specifiedScalarTypes), _toConsumableArray(introspectionTypes)).map(function (type) {\n  return type.name;\n});\n\nfunction isSDLNode(value) {\n  return 'kind' in value && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));\n}","map":{"version":3,"names":["didYouMean","suggestionList","GraphQLError","isTypeDefinitionNode","isTypeSystemDefinitionNode","isTypeSystemExtensionNode","introspectionTypes","specifiedScalarTypes","KnownTypeNamesRule","context","schema","getSchema","existingTypesMap","getTypeMap","Object","create","definedTypes","getDocument","definitions","def","name","value","typeNames","keys","NamedType","node","_1","parent","_2","ancestors","typeName","_ancestors$","definitionNode","isSDL","isSDLNode","standardTypeNames","includes","suggestedTypes","concat","reportError","nodes","map","type"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,8BAA3B;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SACEC,oBADF,EAEEC,0BAFF,EAGEC,yBAHF,QAIO,+BAJP;AAKA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;EAC1C,IAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;EACA,IAAMC,gBAAgB,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxD;EACA,IAAMC,YAAY,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;;EAH0C,2CAKxBN,OAAO,CAACQ,WAAR,GAAsBC,WALE;EAAA;;EAAA;IAK1C,oDAAqD;MAAA,IAA1CC,GAA0C;;MACnD,IAAIhB,oBAAoB,CAACgB,GAAD,CAAxB,EAA+B;QAC7BH,YAAY,CAACG,GAAG,CAACC,IAAJ,CAASC,KAAV,CAAZ,GAA+B,IAA/B;MACD;IACF;EATyC;IAAA;EAAA;IAAA;EAAA;;EAW1C,IAAMC,SAAS,gCACVR,MAAM,CAACS,IAAP,CAAYX,gBAAZ,CADU,sBAEVE,MAAM,CAACS,IAAP,CAAYP,YAAZ,CAFU,EAAf;EAIA,OAAO;IACLQ,SADK,qBACKC,IADL,EACWC,EADX,EACeC,MADf,EACuBC,EADvB,EAC2BC,SAD3B,EACsC;MACzC,IAAMC,QAAQ,GAAGL,IAAI,CAACL,IAAL,CAAUC,KAA3B;;MAEA,IAAI,CAACT,gBAAgB,CAACkB,QAAD,CAAjB,IAA+B,CAACd,YAAY,CAACc,QAAD,CAAhD,EAA4D;QAC1D,IAAIC,WAAJ;;QAEA,IAAMC,cAAc,GAClB,CAACD,WAAW,GAAGF,SAAS,CAAC,CAAD,CAAxB,MAAiC,IAAjC,IAAyCE,WAAW,KAAK,KAAK,CAA9D,GACIA,WADJ,GAEIJ,MAHN;QAIA,IAAMM,KAAK,GAAGD,cAAc,IAAI,IAAlB,IAA0BE,SAAS,CAACF,cAAD,CAAjD;;QAEA,IAAIC,KAAK,IAAIE,iBAAiB,CAACC,QAAlB,CAA2BN,QAA3B,CAAb,EAAmD;UACjD;QACD;;QAED,IAAMO,cAAc,GAAGpC,cAAc,CACnC6B,QADmC,EAEnCG,KAAK,GAAGE,iBAAiB,CAACG,MAAlB,CAAyBhB,SAAzB,CAAH,GAAyCA,SAFX,CAArC;QAIAb,OAAO,CAAC8B,WAAR,CACE,IAAIrC,YAAJ,CACE,yBAAiB4B,QAAjB,WAAgC9B,UAAU,CAACqC,cAAD,CAD5C,EAEE;UACEG,KAAK,EAAEf;QADT,CAFF,CADF;MAQD;IACF;EA9BI,CAAP;AAgCD;AACD,IAAMU,iBAAiB,GAAG,6BAAI5B,oBAAJ,sBAA6BD,kBAA7B,GAAiDmC,GAAjD,CACxB,UAACC,IAAD;EAAA,OAAUA,IAAI,CAACtB,IAAf;AAAA,CADwB,CAA1B;;AAIA,SAASc,SAAT,CAAmBb,KAAnB,EAA0B;EACxB,OACE,UAAUA,KAAV,KACCjB,0BAA0B,CAACiB,KAAD,CAA1B,IAAqChB,yBAAyB,CAACgB,KAAD,CAD/D,CADF;AAID"},"metadata":{},"sourceType":"module"}