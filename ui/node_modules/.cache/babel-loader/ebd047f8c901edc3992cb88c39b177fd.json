{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isEnumType, isInputObjectType, isInterfaceType, isListType, isNamedType, isNonNullType, isObjectType, isRequiredArgument, isRequiredInputField, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] = 'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] = 'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] = 'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] = 'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] = 'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] = 'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] = 'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\n\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(change => change.type in BreakingChangeType);\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(change => change.type in DangerousChangeType);\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [...findTypeChanges(oldSchema, newSchema), ...findDirectiveChanges(oldSchema, newSchema)];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(Object.values(oldSchema.getTypeMap()), Object.values(newSchema.getTypeMap()));\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType) ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.` : `${oldType.name} was removed.`\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(...findFieldChanges(oldType, newType), ...findImplementedInterfacesChanges(oldType, newType));\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(...findFieldChanges(oldType, newType), ...findImplementedInterfacesChanges(oldType, newType));\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: `${oldType.name} changed from ` + `${typeKindName(oldType)} to ${typeKindName(newType)}.`\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldField.type, newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: `${oldType.name}.${oldField.name} changed type from ` + `${String(oldField.type)} to ${String(newField.type)}.`\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(oldField.type, newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: `${oldType.name}.${oldField.name} changed type from ` + `${String(oldField.type)} to ${String(newField.type)}.`\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArg.type, newArg.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` + `${String(oldArg.type)} to ${String(newArg.type)}.`\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return (// if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, _ref => {\n    let {\n      name\n    } = _ref;\n    return name;\n  });\n  const newMap = keyMap(newArray, _ref2 => {\n    let {\n      name\n    } = _ref2;\n    return name;\n  });\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed\n  };\n}","map":{"version":3,"names":["inspect","invariant","keyMap","print","isEnumType","isInputObjectType","isInterfaceType","isListType","isNamedType","isNonNullType","isObjectType","isRequiredArgument","isRequiredInputField","isScalarType","isUnionType","isSpecifiedScalarType","astFromValue","sortValueNode","BreakingChangeType","DangerousChangeType","findBreakingChanges","oldSchema","newSchema","findSchemaChanges","filter","change","type","findDangerousChanges","findTypeChanges","findDirectiveChanges","schemaChanges","directivesDiff","diff","getDirectives","oldDirective","removed","push","DIRECTIVE_REMOVED","description","name","newDirective","persisted","argsDiff","args","newArg","added","REQUIRED_DIRECTIVE_ARG_ADDED","oldArg","DIRECTIVE_ARG_REMOVED","isRepeatable","DIRECTIVE_REPEATABLE_REMOVED","location","locations","includes","DIRECTIVE_LOCATION_REMOVED","typesDiff","Object","values","getTypeMap","oldType","TYPE_REMOVED","newType","findEnumTypeChanges","findUnionTypeChanges","findInputObjectTypeChanges","findFieldChanges","findImplementedInterfacesChanges","constructor","TYPE_CHANGED_KIND","typeKindName","fieldsDiff","getFields","newField","REQUIRED_INPUT_FIELD_ADDED","OPTIONAL_INPUT_FIELD_ADDED","oldField","FIELD_REMOVED","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","FIELD_CHANGED_KIND","String","possibleTypesDiff","getTypes","newPossibleType","TYPE_ADDED_TO_UNION","oldPossibleType","TYPE_REMOVED_FROM_UNION","valuesDiff","getValues","newValue","VALUE_ADDED_TO_ENUM","oldValue","VALUE_REMOVED_FROM_ENUM","interfacesDiff","getInterfaces","newInterface","IMPLEMENTED_INTERFACE_ADDED","oldInterface","IMPLEMENTED_INTERFACE_REMOVED","findArgChanges","isChangeSafeForObjectOrInterfaceField","ARG_REMOVED","ARG_CHANGED_KIND","defaultValue","undefined","ARG_DEFAULT_VALUE_CHANGE","oldValueStr","stringifyValue","newValueStr","REQUIRED_ARG_ADDED","OPTIONAL_ARG_ADDED","ofType","value","ast","oldArray","newArray","oldMap","newMap","oldItem","newItem"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/utilities/findBreakingChanges.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (isListType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      (isNonNullType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    (isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      isListType(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, ({ name }) => name);\n  const newMap = keyMap(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}