{"ast":null,"code":"import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\n\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n\n      const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, arg => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(new GraphQLError(`Argument \"${parentName}(${argName}:)\" can only be defined once.`, {\n          nodes: argNodes.map(node => node.name)\n        }));\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"names":["groupBy","GraphQLError","UniqueArgumentDefinitionNamesRule","context","DirectiveDefinition","directiveNode","_directiveNode$argume","argumentNodes","arguments","checkArgUniqueness","name","value","InterfaceTypeDefinition","checkArgUniquenessPerField","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","typeNode","_typeNode$fields","typeName","fieldNodes","fields","fieldDef","_fieldDef$arguments","fieldName","parentName","seenArgs","arg","argName","argNodes","length","reportError","nodes","map","node"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs"],"sourcesContent":["import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iCAAT,CAA2CC,OAA3C,EAAoD;EACzD,OAAO;IACLC,mBAAmB,CAACC,aAAD,EAAgB;MACjC,IAAIC,qBAAJ,CADiC,CAGjC;;MAEA;;;MACA,MAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,aAAa,CAACG,SAAvC,MAAsD,IAAtD,IACAF,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;MAKA,OAAOG,kBAAkB,CAAE,IAAGJ,aAAa,CAACK,IAAd,CAAmBC,KAAM,EAA9B,EAAiCJ,aAAjC,CAAzB;IACD,CAbI;;IAeLK,uBAAuB,EAAEC,0BAfpB;IAgBLC,sBAAsB,EAAED,0BAhBnB;IAiBLE,oBAAoB,EAAEF,0BAjBjB;IAkBLG,mBAAmB,EAAEH;EAlBhB,CAAP;;EAqBA,SAASA,0BAAT,CAAoCI,QAApC,EAA8C;IAC5C,IAAIC,gBAAJ;;IAEA,MAAMC,QAAQ,GAAGF,QAAQ,CAACP,IAAT,CAAcC,KAA/B,CAH4C,CAGN;;IAEtC;;IAEA,MAAMS,UAAU,GACd,CAACF,gBAAgB,GAAGD,QAAQ,CAACI,MAA7B,MAAyC,IAAzC,IACAH,gBAAgB,KAAK,KAAK,CAD1B,GAEIA,gBAFJ,GAGI,EAJN;;IAMA,KAAK,MAAMI,QAAX,IAAuBF,UAAvB,EAAmC;MACjC,IAAIG,mBAAJ;;MAEA,MAAMC,SAAS,GAAGF,QAAQ,CAACZ,IAAT,CAAcC,KAAhC,CAHiC,CAGM;;MAEvC;;MAEA,MAAMJ,aAAa,GACjB,CAACgB,mBAAmB,GAAGD,QAAQ,CAACd,SAAhC,MAA+C,IAA/C,IACAe,mBAAmB,KAAK,KAAK,CAD7B,GAEIA,mBAFJ,GAGI,EAJN;MAKAd,kBAAkB,CAAE,GAAEU,QAAS,IAAGK,SAAU,EAA1B,EAA6BjB,aAA7B,CAAlB;IACD;;IAED,OAAO,KAAP;EACD;;EAED,SAASE,kBAAT,CAA4BgB,UAA5B,EAAwClB,aAAxC,EAAuD;IACrD,MAAMmB,QAAQ,GAAG1B,OAAO,CAACO,aAAD,EAAiBoB,GAAD,IAASA,GAAG,CAACjB,IAAJ,CAASC,KAAlC,CAAxB;;IAEA,KAAK,MAAM,CAACiB,OAAD,EAAUC,QAAV,CAAX,IAAkCH,QAAlC,EAA4C;MAC1C,IAAIG,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;QACvB3B,OAAO,CAAC4B,WAAR,CACE,IAAI9B,YAAJ,CACG,aAAYwB,UAAW,IAAGG,OAAQ,+BADrC,EAEE;UACEI,KAAK,EAAEH,QAAQ,CAACI,GAAT,CAAcC,IAAD,IAAUA,IAAI,CAACxB,IAA5B;QADT,CAFF,CADF;MAQD;IACF;;IAED,OAAO,KAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}