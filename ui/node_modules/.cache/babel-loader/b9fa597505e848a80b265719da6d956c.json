{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  }\n  var execute = useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n\n    var _a = ref.current,\n        client = _a.client,\n        options = _a.options,\n        mutation = _a.mutation;\n\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a, _b, _c;\n\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n\n      (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onCompleted) === null || _b === void 0 ? void 0 : _b.call(_a, response.data);\n      (_c = executeOptions.onCompleted) === null || _c === void 0 ? void 0 : _c.call(executeOptions, response.data);\n      return response;\n    }).catch(function (error) {\n      var _a, _b, _c, _d;\n\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n\n      if (((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) || clientOptions.onError) {\n        (_c = (_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onError) === null || _c === void 0 ? void 0 : _c.call(_b, error);\n        (_d = executeOptions.onError) === null || _d === void 0 ? void 0 : _d.call(executeOptions, error);\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n\n      throw error;\n    });\n  }, []);\n  var reset = useCallback(function () {\n    setResult({\n      called: false,\n      loading: false,\n      client: client\n    });\n  }, []);\n  useEffect(function () {\n    ref.current.isMounted = true;\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useRef","useState","mergeOptions","equal","DocumentType","verifyDocumentType","ApolloError","useApolloClient","useMutation","mutation","options","client","Mutation","called","loading","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mutate","then","response","errors","length","graphQLErrors","result_1","_a","onCompleted","_b","_c","catch","result_2","onError","_d","reset","__assign"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      ref.current.options?.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"]},"metadata":{},"sourceType":"module"}