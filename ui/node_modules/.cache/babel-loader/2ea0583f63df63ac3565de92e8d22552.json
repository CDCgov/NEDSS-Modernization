{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\n\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node\n        } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".` : `Variable \"$${varName}\" is not defined.`, {\n              nodes: [node, operation]\n            }));\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n\n  };\n}","map":{"version":3,"names":["GraphQLError","NoUndefinedVariablesRule","context","variableNameDefined","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","varName","name","value","reportError","nodes","VariableDefinition","variable"],"sources":["/Users/henryclark/Desktop/Enquizit/Project/NEDSS-Modernization-1/ui/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;EAChD,IAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;EACA,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAK,GAAG;QACNJ,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;MACD,CAHkB;;MAKnBG,KAAK,CAACC,SAAD,EAAY;QACf,MAAMC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCF,SAAnC,CAAf;;QAEA,KAAK,MAAM;UAAEG;QAAF,CAAX,IAAuBF,MAAvB,EAA+B;UAC7B,MAAMG,OAAO,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA1B;;UAEA,IAAIZ,mBAAmB,CAACU,OAAD,CAAnB,KAAiC,IAArC,EAA2C;YACzCX,OAAO,CAACc,WAAR,CACE,IAAIhB,YAAJ,CACES,SAAS,CAACK,IAAV,GACK,cAAaD,OAAQ,kCAAiCJ,SAAS,CAACK,IAAV,CAAeC,KAAM,IADhF,GAEK,cAAaF,OAAQ,mBAH5B,EAIE;cACEI,KAAK,EAAE,CAACL,IAAD,EAAOH,SAAP;YADT,CAJF,CADF;UAUD;QACF;MACF;;IAxBkB,CADhB;;IA4BLS,kBAAkB,CAACN,IAAD,EAAO;MACvBT,mBAAmB,CAACS,IAAI,CAACO,QAAL,CAAcL,IAAd,CAAmBC,KAApB,CAAnB,GAAgD,IAAhD;IACD;;EA9BI,CAAP;AAgCD"},"metadata":{},"sourceType":"module"}