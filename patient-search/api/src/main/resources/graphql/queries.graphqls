type Query {
    findPatientById(id: ID!): Person
    findAllPatients(page: SortablePage): PersonResults!
    findPatientsByFilter(filter: PersonFilter!, page: SortablePage): PersonResults!
    findPatientsByOrganizationFilter(filter: OrganizationFilter!, page: SortablePage): PersonResults!

    findOrganizationById(id: ID!): Organization
    findAllOrganizations(page: Page): OrganizationResults!
    findOrganizationsByFilter(filter: OrganizationFilter!, page: Page): OrganizationResults!

    findPlaceById(id: ID!): Place
    findAllPlaces(page: Page): [Place]!
    findPlacesByFilter(filter: PlaceFilter!, page: Page): [Place]!

    findAllCountryCodes(page: Page): [CountryCode]!
    findAllStateCodes(page: Page): [StateCode]!
    findAllUsers(page: Page): UserResults!
    findAllJurisdictions(page: Page): [Jurisdiction]!
    findAllProgramAreas(page: Page): [ProgramAreaCode]!
    findAllConditionCodes(page: Page): [ConditionCode]!
    findAllOutbreaks(page: Page): OutbreakResults!
    findLocalLabTest(searchText: String!, page: Page): LocalLabTestResults!
    findLoincLabTest(searchText: String!, page: Page): LoincLabTestResults!
    findLocalCodedResults(searchText: String!, page: Page): LocalCodedResults!
    findSnomedCodedResults(searchText: String!, page: Page): SnomedCodedResults!

    findInvestigationsByFilter(filter: InvestigationFilter!, page: SortablePage): InvestigationResults!
    findLabReportsByFilter(filter: LabReportFilter!, page: SortablePage): LabReportResults!

    findDocumentsRequiringReviewForPatient(patientId: Int!, page: Page): LabReportResults!
    findOpenInvestigationsForPatient(patientId: Int!, page: Page): InvestigationResults!
}

type Mutation {
    createPatient(patient: PersonInput!): Person!
    updatePatient(id: ID!, patient: PersonInput!): UpdateResult
}

type UpdateResult {
    updatedPerson: Person
    requestId: String
}

type SnomedCodedResults {
    content: [SnomedCode]!
    total: Int!
}

type LocalCodedResults {
    content: [LabResult]!
    total: Int!
}

type LoincLabTestResults {
    content: [LoincCode]!
    total: Int!
}

type LocalLabTestResults {
    content: [LabTest]!
    total: Int!
}

type OutbreakResults {
    content: [Outbreak]!
    total: Int!
}

type PersonResults {
    content: [Person!]!
    total: Int!
}

type UserResults {
    content: [User]!
    total: Int!
}

type OrganizationResults {
    content: [Organization]!
    total: Int!
}

type InvestigationResults {
    content: [Investigation]!
    total: Int!
}

type LabReportResults {
    content: [LabReport]!
    total: Int!
}
