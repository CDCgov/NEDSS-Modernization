type Ethnicity {
    id: EthnicityId!
    codeDescTxt: String!
}

type EthnicityId {
    code: String!
}
type ConditionCode {
    id: String!
    conditionDescTxt: String
}
type CountryCode {
    id: ID
    assigningAuthorityCd: String
    assigningAuthorityDescTxt: String
    codeDescTxt: String
    codeShortDescTxt: String
    effectiveFromTime: Date
    effectiveToTime: Date
    excludedTxt: String
    keyInfoTxt: String
    indentLevelNbr: Int
    isModifiableInd: String
    parentIsCd: String
    statusCd: String
    statusTime: Date
    codeSetNm: String
    seqNum: Int
    nbsUid: Int
    sourceConceptId: String
    codeSystemCd: String
    codeSystemDescTxt: String
}
type Investigation {
    id: ID
    recordStatus: String
    lastChangeTime: Date
    publicHealthCaseUid: Int
    programJurisdictionOid: Int
    caseClassCd: String
    outbreakName: String
    caseTypeCd: String
    cdDescTxt: String
    progAreaCd: String
    jurisdictionCd: Int
    jurisdictionCodeDescTxt: String
    pregnantIndCd: String
    localId: String
    rptFormCmpltTime: Date
    activityToTime: Date
    activityFromTime: Date
    addTime: Date
    publicHealthCaseLastChgTime: Date
    addUserId: Int
    lastChangeUserId: Int
    currProcessStateCd: String
    investigationStatusCd: String
    moodCd: String
    notificationLocalId: String
    notificationAddTime: Date
    notificationRecordStatusCd: String
    notificationLastChgTime: Date
    personParticipations: [PersonParticipation]
    organizationParticipations: [OrganizationParticipation]
    actIds: [ActId]
}

type ActId {
    id: Int
    recordStatus: String
    actIdSeq: Int
    rootExtensionTxt: String
    typeCd: String
    lastChangeTime: Date
}

input InvestigationFilter {
    conditions: [String]
    programAreas: [String]
    jurisdictions: [ID]
    pregnancyStatus: PregnancyStatus
    eventIdType: InvestigationEventIdType
    eventId: String
    eventDateSearch: InvestigationEventDateSearch
    createdBy: String
    lastUpdatedBy: String
    providerFacilitySearch: ProviderFacilitySearch
    investigatorId: ID
    investigationStatus: InvestigationStatus
    outbreakNames: [String]
    caseStatuses: CaseStatuses
    notificationStatuses: NotificationStatuses
    processingStatuses: ProcessingStatuses
}

input CaseStatuses {
    includeUnassigned: Boolean!
    statusList: [CaseStatus!]!
}

input NotificationStatuses {
    includeUnassigned: Boolean!
    statusList: [NotificationStatus!]!
}

input ProcessingStatuses {
    includeUnassigned: Boolean!
    statusList: [ProcessingStatus!]!
}

input InvestigationEventDateSearch {
    eventDateType: InvestigationEventDateType!
    from: Date!
    to: Date!
}

input ProviderFacilitySearch {
    entityType: ReportingEntityType!
    id: ID!
}

enum InvestigationEventIdType {
    ABCS_CASE_ID
    CITY_COUNTY_CASE_ID
    INVESTIGATION_ID
    NOTIFICATION_ID
    STATE_CASE_ID
}

enum ReportingEntityType {
    FACILITY
    PROVIDER
}

enum ProcessingStatus {
    AWAITING_INTERVIEW
    CLOSED_CASE
    FIELD_FOLLOW_UP
    NO_FOLLOW_UP
    OPEN_CASE
    SURVEILLANCE_FOLLOW_UP
}

enum NotificationStatus {
    APPROVED
    COMPLETED
    MESSAGE_FAILED
    PENDING_APPROVAL
    REJECTED
}

enum CaseStatus {
    CONFIRMED
    NOT_A_CASE
    PROBABLE
    SUSPECT
    UNKNOWN
}

enum InvestigationEventDateType {
    DATE_OF_REPORT
    INVESTIGATION_CLOSED_DATE
    INVESTIGATION_CREATE_DATE
    INVESTIGATION_START_DATE
    LAST_UPDATE_DATE
    NOTIFICATION_CREATE_DATE
}

enum InvestigationStatus {
    OPEN
    CLOSED
}
type Jurisdiction {
    id: String!
    typeCd: String!
    assigningAuthorityCd: String
    assigningAuthorityDescTxt: String
    codeDescTxt: String
    codeShortDescTxt: String
    effectiveFromTime: Date
    effectiveToTime: Date
    indentLevelNbr: Int
    isModifiableInd: String
    parentIsCd: String
    stateDomainCd: String
    statusCd: String
    statusTime: Date
    codeSetNm: String
    codeSeqNum: Int
    nbsUid: ID
    sourceConceptId: String
    codeSystemCd: String
    codeSystemDescTxt: String
    exportInd: String
}
input LabReportFilter {
    programAreas: [String]
    jurisdictions: [ID]
    pregnancyStatus: PregnancyStatus
    eventIdType: LaboratoryEventIdType
    eventId: String
    eventDateSearch: LaboratoryEventDateSearch
    entryMethods: [EntryMethod]
    enteredBy: [UserType]
    eventStatus: [EventStatus]
    processingStatus: [LaboratoryReportStatus]
    createdBy: ID
    lastUpdatedBy: ID
    providerSearch: LabReportProviderSearch
    resultedTest: String
    codedResult: String
}

type LabReport {
    id: String
    observationUid: Int
    lastChange: Date
    classCd: String
    moodCd: String
    observationLastChgTime: Date
    cdDescTxt: String
    recordStatusCd: String
    programJurisdictionOid: Int
    programAreaCd: String
    jurisdictionCd: Int
    jurisdictionCodeDescTxt: String
    pregnantIndCd: String
    localId: String
    activityToTime: Date
    effectiveFromTime: Date
    rptToStateTime: Date
    addTime: Date
    electronicInd: String
    versionCtrlNbr: Int
    addUserId: Int
    lastChgUserId: Int
    personParticipations: [PersonParticipation]
    organizationParticipations: [OrganizationParticipation]
    materialParticipations: [MaterialParticipation]
    observations: [Observation]
    actIds: [ActId]
    associatedInvestigations: [AssociatedInvestigation]
}

type MaterialParticipation {
    actUid: Int
    typeCd: String
    entityId: String
    subjectClassCd: String
    typeDescTxt: String
    participationRecordStatus: String
    participationLastChangeTime: Date
    cd: String
    cdDescTxt: String
}

type Observation {
    cd: String
    cdDescTxt: String
    domainCd: String
    statusCd: String
    altCd: String
    altDescTxt: String
    altCdSystemCd: String
    displayName: String
    ovcCode: String
    ovcAltCode: String
    ovcAltDescTxt: String
    ovcAltCdSystemCd: String
}

type AssociatedInvestigation {
    publicHealthCaseUid: Int
    cdDescTxt: String
    localId: String
    lastChgTime: Date
    actRelationshipLastChgTime: Date
}

input LaboratoryEventDateSearch {
    eventDateType: LaboratoryReportEventDateType!
    from: Date!
    to: Date!
}

input LabReportProviderSearch {
    providerType: ProviderType!
    providerId: ID!
}

enum ProviderType {
    ORDERING_FACILITY
    ORDERING_PROVIDER
    REPORTING_FACILITY
}

enum LaboratoryEventIdType {
    ACCESSION_NUMBER
    LAB_ID
}

enum LaboratoryReportEventDateType {
    DATE_OF_REPORT
    DATE_RECEIVED_BY_PUBLIC_HEALTH
    DATE_OF_SPECIMEN_COLLECTION
    LAB_REPORT_CREATE_DATE
    LAST_UPDATE_DATE
}

enum EntryMethod {
    ELECTRONIC
    MANUAL
}

enum UserType {
    INTERNAL
    EXTERNAL
}

enum EventStatus {
    NEW
    UPDATE
}

enum LaboratoryReportStatus {
    PROCESSED
    UNPROCESSED
}
type LabResult {
    id: LabResultId
    nbsUid: ID
    labResultDescTxt: String
}

type LabResultId {
    labResultCd: String
    laboratoryId: String
}
type LabTest {
    id: LabTestId
    labTestDescTxt: String
    organismResultTestInd: String
}

type LabTestId {
    labTestCd: String
    laboratoryId: String
}
type LoincCode {
    id: String
    componentName: String
    methodType: String
    systemCd: String
    property: String
    relatedClassCd: String
}
input OrganizationFilter {
    id: ID
    displayNm: String
    streetAddr1: String
    streetAddr2: String
    cityCd: String
    cityDescTxt: String
    stateCd: String
    zipCd: String
}

type Organization {
    id: ID
    addReasonCd: String
    addTime: Date
    addUserId: ID
    cd: String
    cdDescTxt: String
    description: String
    durationAmt: String
    durationUnitCd: String
    fromTime: Date
    lastChgReasonCd: String
    lastChgTime: Date
    lastChgUserId: Int
    localId: String
    recordStatusCd: RecordStatus
    recordStatusTime: Date
    standardIndustryClassCd: String
    standardIndustryDescTxt: String
    statusCd: String
    statusTime: Date
    toTime: Date
    userAffiliationTxt: String
    displayNm: String
    streetAddr1: String
    streetAddr2: String
    cityCd: String
    cityDescTxt: String
    stateCd: String
    cntyCd: String
    cntryCd: String
    zipCd: String
    phoneNbr: String
    phoneCntryCd: String
    versionCtrlNbr: Int
    electronicInd: String
    edxInd: String
}
type Outbreak {
    id: OutbreakId!
    codeShortDescTxt: String
}

type OutbreakId {
    codeSetNm: String!
    code: String!
}
input PersonFilter {
    id: ID
    lastName: String
    firstName: String
    race: Race
    identification: Identification
    ssn: String
    phoneNumber: String
    email: String
    dateOfBirth: Date
    dateOfBirthOperator: Operator
    gender: Gender
    deceased: Deceased
    address: String
    city: String
    state: String
    country: String
    zip: String
    mortalityStatus: String
    ethnicity: String
    vaccinationId: String
    treatmentId: String
    recordStatus: RecordStatus
}

type Person {
    id: ID
    nbsEntity: NBSEntity!
    entityIds: [PersonIdentification]
    names: [PersonName]
    addReasonCd: String
    addTime: Date
    addUserId: ID
    administrativeGenderCd: Gender
    ageCalc: Int
    ageCalcTime: Date
    ageCalcUnitCd: String
    ageCategoryCd: String
    ageReported: String
    ageReportedTime: Date
    ageReportedUnitCd: String
    birthGenderCd: Gender
    birthOrderNbr: Int
    birthTime: Date
    birthTimeCalc: Date
    cd: String
    cdDescTxt: String
    currSexCd: String
    deceasedIndCd: String
    deceasedTime: Date
    description: String
    educationLevelCd: String
    educationLevelDescTxt: String
    ethnicGroupInd: String
    lastChgReasonCd: String
    lastChgTime: Date
    lastChgUserId: ID
    localId: String
    maritalStatusCd: String
    maritalStatusDescTxt: String
    mothersMaidenNm: String
    multipleBirthInd: String
    occupationCd: String
    preferredGenderCd: Gender
    primLangCd: String
    primLangDescTxt: String
    recordStatusCd: RecordStatus
    recordStatusTime: Date
    statusCd: String
    statusTime: Date
    survivedIndCd: String
    userAffiliationTxt: String
    firstNm: String
    lastNm: String
    middleNm: String
    nmPrefix: String
    nmSuffix: String
    preferredNm: String
    hmStreetAddr1: String
    hmStreetAddr2: String
    hmCityCd: String
    hmCityDescTxt: String
    hmStateCd: String
    hmZipCd: String
    hmCntyCd: String
    hmCntryCd: String
    hmPhoneNbr: String
    hmPhoneCntryCd: String
    hmEmailAddr: String
    cellPhoneNbr: String
    wkStreetAddr1: String
    wkStreetAddr2: String
    wkCityCd: String
    wkCityDescTxt: String
    wkStateCd: String
    wkZipCd: String
    wkCntyCd: String
    wkCntryCd: String
    wkPhoneNbr: String
    wkPhoneCntryCd: String
    wkEmailAddr: String
    ssn: String
    medicaidNum: String
    dlNum: String
    dlStateCd: String
    raceCd: String
    raceSeqNbr: Int
    raceCategoryCd: String
    ethnicityGroupCd: String
    ethnicGroupSeqNbr: Int
    adultsInHouseNbr: Int
    childrenInHouseNbr: Int
    birthCityCd: String
    birthCityDescTxt: String
    birthCntryCd: String
    birthStateCd: String
    raceDescTxt: String
    ethnicGroupDescTxt: String
    versionCtrlNbr: Int
    asOfDateAdmin: Date
    asOfDateEthnicity: Date
    asOfDateGeneral: Date
    asOfDateMorbidity: Date
    asOfDateSex: Date
    electronicInd: String
    personParentUid: personParentUid
    dedupMatchInd: String
    groupNbr: Int
    groupTime: Date
    edxInd: String
    speaksEnglishCd: String
    additionalGenderCd: Gender
    eharsId: String
    ethnicUnkReasonCd: String
    sexUnkReasonCd: String
}

type personParentUid {
    id: ID
}

input PersonInput {
    name: Name
    ssn: String
    DateOfBirth: Date
    birthGender: Gender
    currentGender: Gender
    deceased: Deceased
    addresses: [PostalAddress]
    phoneNumbers: [PhoneNumber]
    emailAddresses: [String]
    ethnicity: String
    race: Race
}
input Name {
    firstName: String
    middleName: String
    lastName: String
    suffix: Suffix
}

input PostalAddress {
    streetAddress1: String
    streetAddress2: String
    city: String
    stateCode: String
    countyCode: String
    countryCode: String
    zip: String
    censusTract: String
}

input PhoneNumber {
    number: String!
    extension: String
    phoneType: PhoneType!
}

input Identification {
    identificationNumber: String!
    identificationType: IdentificationType!
}

enum Suffix {
    ESQ
    II
    III
    IV
    JR
    SR
    V
}

enum PhoneType {
    HOME
    CELL
    WORK
}

enum IdentificationType {
    ACCOUNT_NUMBER
    ALTERNATE_PERSON_NUMBER
    CHIP_IDENTIFICATION_NUMBER
    DRIVERS_LICENSE_NUMBER
    IMMUNIZATION_REGISTRY_ID
    MEDICAID_NUMBER
    MEDICAL_RECORD_NUMBER
    MEDICARE_NUMBER
    MOTHERS_IDENTIFIER
    NATIONAL_UNIQUE_INDIVIDUAL_IDENTIFIER
    OTHER
    PARTNER_SERVICES_PATIENT_NUMBER
    PATIENT_EXTERNAL_IDENTIFIER
    PATIENT_INTERNAL_IDENTIFIER
    PERSON_NUMBER
    PRISON_IDENTIFICATION_NUMBER
    RYAN_WHITE_IDENTIFIER
    SOCIAL_SECURITY
    VISA_PASSPORT
    WIC_IDENTIFIER
}

enum Race {
    UNKNOWN
    AMERICAN_INDIAN_OR_ALASKAN_NATIVE
    ASIAN
    AFRICAN_AMERICAN
    NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER
    WHITE
    OTHER_RACE
    REFUSED_TO_ANSWER
    NOT_ASKED
}

enum Gender {
    M
    F
    U
}

enum Deceased {
    Y
    N
    UNK
}

enum Operator {
    EQUAL
    BEFORE
    AFTER
}

enum SortDirection {
    ASC
    DESC
}

type PersonIdentification {
    typeDescTxt: String
    typeCd: String
    rootExtensionTxt: String
    assigningAuthorityCd: String
    assigningAuthorityDescTxt: String
}

type PersonName {
    firstNm: String
    middleNm: String
    lastNm: String
    nmSuffix: String
    nmPrefix: String
}

type Locator {
    emailAddress: String
    extenstionTxt: String
    phoneNbrTxt: String
    urlAddress: String
    censusBlockCd: String
    censusMinorCivilDivisionCd: String
    censusTrackCd: String
    cityCd: String
    cityDescTxt: String
    cntryCd: String
    cntryDescTxt: String
    cntyCd: String
    cntyDescTxt: String
    msaCongressDistrictCd: String
    regionDistrictCd: String
    stateCd: String
    streetAddr1: String
    streetAddr2: String
    zipCd: String
    geocodeMatchInd: String
    withinCityLimitsInd: String
    censusTract: String
}

type LocatorParticipations {
    classCd: String
    locator: Locator
}

type NBSEntity {
    entityLocatorParticipations: [LocatorParticipations]
}
input PlaceFilter {
    id: ID
    description: String
    nm: String
    streetAddr1: String
    streetAddr2: String
    cityCd: String
    cityDescTxt: String
    stateCd: String
    zipCd: String
}

type Place {
    id: ID
    addReasonCd: String
    addTime: Date
    addUserId: Int
    cd: String
    cdDescTxt: String
    description: String
    durationAmt: String
    durationUnitCd: String
    fromTime: Date
    lastChgReasonCd: String
    lastChgTime: Date
    lastChgUserId: Int
    localId: String
    nm: String
    recordStatusCd: String
    recordStatusTime: Date
    statusCd: String
    statusTime: Date
    toTime: Date
    userAffiliationTxt: String
    streetAddr1: String
    streetAddr2: String
    cityCd: String
    cityDescTxt: String
    stateCd: String
    zipCd: String
    cntyCd: String
    cntryCd: String
    phoneNbr: String
    phoneCntryCd: String
    versionCtrlNbr: Int
}
type ProgramAreaCode {
    id: String!
    progAreaDescTxt: String
    nbsUid: ID
    statusCd: String
    statusTime: Date
    codeSetNm: String
    codeSeq: Int
}
type Query {
    findPatientById(id: ID!): Person
    findAllPatients(page: SortablePage): PersonResults!
    findPatientsByFilter(filter: PersonFilter!, page: SortablePage): PersonResults!
    findPatientsByOrganizationFilter(filter: OrganizationFilter!, page: SortablePage): PersonResults!

    findOrganizationById(id: ID!): Organization
    findAllOrganizations(page: Page): OrganizationResults!
    findOrganizationsByFilter(filter: OrganizationFilter!, page: Page): OrganizationResults!

    findPlaceById(id: ID!): Place
    findAllPlaces(page: Page): [Place]!
    findPlacesByFilter(filter: PlaceFilter!, page: Page): [Place]!

    findAllCountryCodes(page: Page): [CountryCode]!
    findAllStateCodes(page: Page): [StateCode]!
    findAllUsers(page: Page): UserResults!
    findAllJurisdictions(page: Page): [Jurisdiction]!
    findAllProgramAreas(page: Page): [ProgramAreaCode]!
    findAllConditionCodes(page: Page): [ConditionCode]!
    findAllOutbreaks(page: Page): OutbreakResults!
    findAllEthnicityValues(page: Page): EthnicityResults!
    findLocalLabTest(searchText: String!, page: Page): LocalLabTestResults!
    findLoincLabTest(searchText: String!, page: Page): LoincLabTestResults!
    findLocalCodedResults(searchText: String!, page: Page): LocalCodedResults!
    findSnomedCodedResults(searchText: String!, page: Page): SnomedCodedResults!

    findInvestigationsByFilter(filter: InvestigationFilter!, page: SortablePage): InvestigationResults!
    findLabReportsByFilter(filter: LabReportFilter!, page: SortablePage): LabReportResults!

    findDocumentsRequiringReviewForPatient(patientId: Int!, page: Page): LabReportResults!
    findOpenInvestigationsForPatient(patientId: Int!, page: Page): InvestigationResults!
}

type Mutation {
    createPatient(patient: PersonInput!): Person!
    updatePatient(id: ID!, patient: PersonInput!): UpdateResult
}

type UpdateResult {
    updatedPerson: Person
    requestId: String
}

type SnomedCodedResults {
    content: [SnomedCode]!
    total: Int!
}

type LocalCodedResults {
    content: [LabResult]!
    total: Int!
}

type LoincLabTestResults {
    content: [LoincCode]!
    total: Int!
}

type LocalLabTestResults {
    content: [LabTest]!
    total: Int!
}

type OutbreakResults {
    content: [Outbreak]!
    total: Int!
}

type EthnicityResults {
    content: [Ethnicity]!
    total: Int!
}

type PersonResults {
    content: [Person!]!
    total: Int!
}

type UserResults {
    content: [User]!
    total: Int!
}

type OrganizationResults {
    content: [Organization]!
    total: Int!
}

type InvestigationResults {
    content: [Investigation]!
    total: Int!
}

type LabReportResults {
    content: [LabReport]!
    total: Int!
}
scalar Date

input Page {
    pageSize: Int!
    pageNumber: Int!
}

input SortablePage {
    pageSize: Int
    pageNumber: Int
    sortField: SortField
    sortDirection: SortDirection
}

type PersonParticipation {
    actUid: Int!
    localId: String
    typeCd: String
    entityId: Int!
    subjectClassCd: String
    participationRecordStatus: String
    typeDescTxt: String
    participationLastChangeTime: Date
    firstName: String
    lastName: String
    birthTime: Date
    currSexCd: String
    personCd: String!
    personParentUid: Int
    personRecordStatus: String!
    personLastChangeTime: Date
}

type OrganizationParticipation {
    actUid: Int
    typeCd: String
    entityId: Int
    subjectClassCd: String
    typeDescTxt: String
    participationRecordStatus: String
    participationLastChangeTime: Date
    name: String
    organizationLastChangeTime: Date
}

enum SortField {
    lastNm
    birthTime
}

enum RecordStatus {
    ACTIVE
    INACTIVE
    LOG_DEL
}

enum PregnancyStatus {
    YES
    NO
    UNKNOWN
}
type SnomedCode {
    id: String
    snomedDescTxt: String
}
type StateCode {
    id: String
    assigningAuthorityCd: String
    assigningAuthorityDescTxt: String
    stateNm: String
    codeDescTxt: String
    effectiveFromTime: Date
    effectiveToTime: Date
    excludedTxt: String
    indentLevelNbr: Int
    isModifiableInd: String
    keyInfoTxt: String
    parentIsCd: String
    statusCd: String
    statusTime: Date
    codeSetNm: String
    seqNum: Int
    nbsUid: Int
    sourceConceptId: String
    codeSystemCd: String
    codeSystemDescTxt: String
}
type User {
    userId: String!
    userFirstNm: String!
    userLastNm: String!
    recordStatusCd: RecordStatus
}
