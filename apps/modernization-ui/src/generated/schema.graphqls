type CodedValue {
    value: String!
    name: String!
}

type GroupedCodedValue {
    value: String!
    name: String!
    group: String!
}

type StateCodedValue {
    value: ID!
    name: String!
    abbreviation: String!
}

extend type Query {
    maritalStatuses: [CodedValue!]!
    primaryOccupations: [CodedValue!]!
    educationLevels: [CodedValue!]!
    primaryLanguages: [CodedValue!]!
    raceCategories: [CodedValue!]!
    detailedRaces(category: String): [GroupedCodedValue!]!
    ethnicGroups: [CodedValue!]!
    ethnicityUnknownReasons: [CodedValue!]!
    detailedEthnicities: [CodedValue!]!
    genders: [CodedValue!]!
    genderUnknownReasons: [CodedValue!]!
    preferredGenders: [CodedValue!]!
    countries: [CodedValue!]!
    states: [StateCodedValue!]!
    counties(state: String): [GroupedCodedValue!]!
    nameTypes: [CodedValue!]!
    prefixes: [CodedValue!]!
    suffixes: [CodedValue!]!
    degrees: [CodedValue!]!
    addressUses: [CodedValue!]!
    addressTypes: [CodedValue!]!
    phoneUses: [CodedValue!]!
    phoneTypes: [CodedValue!]!
    identificationTypes: [CodedValue!]!
    assigningAuthorities: [CodedValue!]!
}
extend type Query {
    findAllConditionCodes(page: Page): [ConditionCode]!
}

type ConditionCode {
    id: String!
    conditionDescTxt: String
}
extend type Query {
    findAllEthnicityValues(page: Page): EthnicityResults!
}

type EthnicityResults {
    content: [Ethnicity]!
    total: Int!
}

type Ethnicity {
    id: EthnicityId!
    codeDescTxt: String!
}

type EthnicityId {
    code: String!
}
extend type Query {
    findAllPatientIdentificationTypes(page: Page): PatientIdentificationTypeResults!
}

type PatientIdentificationTypeResults {
    content: [IdentificationType]!
    total: Int!
}

type IdentificationType {
    id: IdentificationTypeId!
    codeDescTxt: String!
}

type IdentificationTypeId {
    code: String!
}
extend type Query {
  findInvestigationsByFilter(
    filter: InvestigationFilter!
    page: SortablePage
  ): InvestigationResults!
}

type InvestigationResults {
  content: [Investigation!]!
  total: Int!
  page: Int!
  size: Int!
}

type InvestigationPersonParticipation {
  birthTime: Date
  currSexCd: String
  typeCd: String!
  firstName: String
  lastName: String
  personCd: String!
  personParentUid: Int
  shortId: Int
}

type Investigation {
  relevance: Float!
  id: ID
  cdDescTxt: String
  jurisdictionCodeDescTxt: String
  localId: String
  addTime: Date
  startedOn: Date
  investigationStatusCd: String
  notificationRecordStatusCd: String
  investigatorLastName: String
  personParticipations: [InvestigationPersonParticipation!]!
}

input InvestigationFilter {
  patientId: Int
  conditions: [String!]
  programAreas: [String!]
  jurisdictions: [Int!]
  pregnancyStatus: PregnancyStatus
  eventId: EventId
  eventDate: InvestigationEventDateSearch
  createdBy: String
  lastUpdatedBy: String
  providerFacilitySearch: ProviderFacilitySearch
  investigatorId: Int
  investigationStatus: InvestigationStatus
  outbreakNames: [String]
  caseStatuses: [CaseStatus!]
  notificationStatuses: [NotificationStatus]
  processingStatuses: [ProcessingStatus]
  reportingFacilityId: String
  reportingProviderId: String
}

input EventId {
  investigationEventType: InvestigationEventIdType!
  id: String!
}

input InvestigationEventDateSearch {
  type: InvestigationEventDateType!
  from: Date!
  to: Date!
}

input ProviderFacilitySearch {
  entityType: ReportingEntityType!
  id: ID!
}

enum InvestigationEventIdType {
  ABCS_CASE_ID
  CITY_COUNTY_CASE_ID
  INVESTIGATION_ID
  NOTIFICATION_ID
  STATE_CASE_ID
}

enum ReportingEntityType {
  FACILITY
  PROVIDER
}

enum ProcessingStatus {
  UNASSIGNED
  AWAITING_INTERVIEW
  CLOSED_CASE
  FIELD_FOLLOW_UP
  NO_FOLLOW_UP
  OPEN_CASE
  SURVEILLANCE_FOLLOW_UP
}

enum NotificationStatus {
  UNASSIGNED
  APPROVED
  COMPLETED
  MESSAGE_FAILED
  PENDING_APPROVAL
  REJECTED
}

enum CaseStatus {
  UNASSIGNED
  CONFIRMED
  NOT_A_CASE
  PROBABLE
  SUSPECT
  UNKNOWN
}

enum InvestigationEventDateType {
  DATE_OF_REPORT
  INVESTIGATION_CLOSED_DATE
  INVESTIGATION_CREATE_DATE
  INVESTIGATION_START_DATE
  LAST_UPDATE_DATE
  NOTIFICATION_CREATE_DATE
}

enum InvestigationStatus {
  OPEN
  CLOSED
}
extend type Query {
  findAllJurisdictions(page: Page): [Jurisdiction]!
}

type Jurisdiction {
  id: String!
  typeCd: String!
  assigningAuthorityCd: String
  assigningAuthorityDescTxt: String
  codeDescTxt: String
  codeShortDescTxt: String
  effectiveFromTime: DateTime
  effectiveToTime: DateTime
  indentLevelNbr: Int
  isModifiableInd: String
  parentIsCd: String
  stateDomainCd: String
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  codeSeqNum: Int
  nbsUid: ID
  sourceConceptId: String
  codeSystemCd: String
  codeSystemDescTxt: String
  exportInd: String
}
extend type Query {
  findLabReportsByFilter(
    filter: LabReportFilter!
    page: SortablePage
  ): LabReportResults!
}

input LaboratoryEventDateSearch {
  type: LaboratoryReportEventDateType!
  from: Date!
  to: Date!
}

input LabReportProviderSearch {
  providerType: ProviderType!
  providerId: ID!
}

enum ProviderType {
  ORDERING_FACILITY
  ORDERING_PROVIDER
  REPORTING_FACILITY
}

enum LaboratoryEventIdType {
  ACCESSION_NUMBER
  LAB_ID
}

enum LaboratoryReportEventDateType {
  DATE_OF_REPORT
  DATE_RECEIVED_BY_PUBLIC_HEALTH
  DATE_OF_SPECIMEN_COLLECTION
  LAB_REPORT_CREATE_DATE
  LAST_UPDATE_DATE
}

enum EntryMethod {
  ELECTRONIC
  MANUAL
}

enum UserType {
  INTERNAL
  EXTERNAL
}

enum EventStatus {
  NEW
  UPDATE
}

enum LaboratoryReportStatus {
  PROCESSED
  UNPROCESSED
}

input LabReportFilter {
  patientId: Int
  programAreas: [String!]
  jurisdictions: [Int!]
  pregnancyStatus: PregnancyStatus
  eventId: LabReportEventId
  eventDate: LaboratoryEventDateSearch
  entryMethods: [EntryMethod!]
  enteredBy: [UserType!]
  eventStatus: [EventStatus!]
  processingStatus: [LaboratoryReportStatus!]
  createdBy: Int
  lastUpdatedBy: Int
  providerSearch: LabReportProviderSearch
  resultedTest: String
  codedResult: String
  orderingLabId: Int
  orderingProviderId: Int
  reportingLabId: Int
}

input LabReportEventId {
  labEventType: LaboratoryEventIdType!
  labEventId: String!
}

type LabReportResults {
  content: [LabReport!]!
  total: Int!
  page: Int!
  size: Int!
}

type LabTestSummary {
  name: String
  status: String
  coded: String
  numeric: Float
  high: String
  low: String
  unit: String
}

type LabReport {
  relevance: Float!
  id: String!
  jurisdictionCd: Int!
  localId: String!
  addTime: Date!
  personParticipations: [LabReportPersonParticipation!]!
  organizationParticipations: [LabReportOrganizationParticipation!]!
  observations: [Observation!]!
  associatedInvestigations: [AssociatedInvestigation!]!
  tests: [LabTestSummary!]!
}

type LabReportPersonParticipation {
  birthTime: Date
  currSexCd: String
  typeCd: String
  firstName: String
  lastName: String
  personCd: String!
  personParentUid: Int
  shortId: Int
}

type LabReportOrganizationParticipation {
  typeCd: String!
  name: String!
}

type Observation {
  cdDescTxt: String
  statusCd: String
  altCd: String
  displayName: String
}

type AssociatedInvestigation {
  cdDescTxt: String!
  localId: String!
}
extend type Query {
  findDistinctCodedResults(searchText: String!): [CodedResult!]!
}

type CodedResult {
  name: String!
}
extend type Query {
  findDistinctResultedTest(searchText: String!): [ResultedTest!]!
}

type ResultedTest {
  name: String!
}
extend type Query {
    findAllOutbreaks(page: Page): OutbreakResults!
}

type OutbreakResults {
    content: [Outbreak]!
    total: Int!
}

type Outbreak {
    id: OutbreakId!
    codeShortDescTxt: String
}

type OutbreakId {
    codeSetNm: String!
    code: String!
}
type NamedContact {
  id: ID!
  name: String!
}

type TracedCondition {
  id: String,
  description: String
}

type PatientContactInvestigation {
  id: ID!
  local: String!
  condition: String!
}

type NamedByPatient {
  contactRecord: ID!
  createdOn: DateTime!
  condition: TracedCondition!
  contact: NamedContact!
  namedOn: DateTime!
  priority: String
  disposition: String
  event: String!
  associatedWith: PatientContactInvestigation
}

type ContactsNamedByPatientResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}

type NamedByContact {
  contactRecord: ID!
  createdOn: DateTime!
  contact: NamedContact!
  namedOn: DateTime!
  condition: TracedCondition!
  event: String!
  associatedWith: PatientContactInvestigation
}

type PatientNamedByContactResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}


extend type Query {

  findContactsNamedByPatient(patient:ID!, page: Page) : ContactsNamedByPatientResults

  findPatientNamedByContact(patient:ID!, page: Page) : PatientNamedByContactResults
}
type DocumentRequiringReview {
  id: ID!
  localId: String!
  type: String!
  dateReceived: DateTime!
  eventDate: DateTime
  isElectronic: Boolean!
  facilityProviders: FacilityProviders!
  descriptions: [Description]!
}

type FacilityProviders {
  reportingFacility: ReportingFacility
  orderingProvider: OrderingProvider
  sendingFacility: SendingFacility
}

type ReportingFacility {
  name: String
}

type OrderingProvider {
  name: String
}

type SendingFacility {
  name: String
}

type Description {
  title: String
  value: String
}

type PatientDocumentRequiringReviewResults {
  content: [DocumentRequiringReview]!
  total: Int!
  number: Int!
}

enum DocumentRequiringReviewSortableField {
  type
  dateReceived
  eventDate
  localId
}

input DocumentRequiringReviewSortablePage {
  pageSize: Int
  pageNumber: Int
  sortField: DocumentRequiringReviewSortableField
  sortDirection: SortDirection
}

extend type Query {
  findDocumentsRequiringReviewForPatient(
    patient: Int!
    page: DocumentRequiringReviewSortablePage
  ): PatientDocumentRequiringReviewResults!
}
type PatientDocument {
    document: ID!
    receivedOn: DateTime!
    type: String!
    sendingFacility: String!
    reportedOn: DateTime!
    condition: String
    event: String!
    associatedWith: PatientDocumentInvestigation
}

type PatientDocumentInvestigation {
    id: ID!
    local: String!
}

type PatientDocumentResults {
    content: [PatientDocument]!
    total: Int!
    number: Int!
}

extend type Query {
    findDocumentsForPatient(patient: ID!, page: Page): PatientDocumentResults
}
type PatientInvestigation {
    investigation: ID!
    startedOn: Date
    condition: String!
    status: String!
    caseStatus: String
    jurisdiction: String!
    event: String!
    coInfection: String
    notification: String
    investigator: String
    comparable: Boolean!
}

type PatientInvestigationResults {
    content: [PatientInvestigation]!
    total: Int!
    number: Int!
}

extend type Query {
    findInvestigationsForPatient(patient: ID!, page: Page, openOnly: Boolean): PatientInvestigationResults
}
extend type Query {
  findLabReportsForPatient(personUid: Int!, page: Page): PatientLabReportResults
}

type PatientLabReportResults {
  content: [PatientLabReport]!
  total: Int!
  number: Int!
}

input PatientLabReportFilter {
  patientId: Int
  programAreas: [String]
  jurisdictions: [ID]
  pregnancyStatus: PregnancyStatus
  eventId: LabReportEventId
  eventDate: LaboratoryEventDateSearch
  entryMethods: [EntryMethod]
  enteredBy: [UserType]
  eventStatus: [EventStatus]
  processingStatus: [LaboratoryReportStatus]
  createdBy: ID
  lastUpdatedBy: ID
  providerSearch: LabReportProviderSearch
  resultedTest: String
  codedResult: String
  orderingLabId: ID
  orderingProviderId: ID
  reportingLabId: ID
}

type PatientLabReport {
  id: String!
  observationUid: Int!
  addTime: DateTime!
  effectiveFromTime: DateTime
  programAreaCd: String!
  jurisdictionCodeDescTxt: String!
  localId: String!
  electronicInd: String
  associatedInvestigations: [AssociatedInvestigation2!]!
  personParticipations: [PersonParticipation2!]!
  organizationParticipations: [OrganizationParticipation2!]!
  observations: [Observation2!]!
}

type PersonParticipation2 {
  typeCd: String!
  personCd: String!
  firstName: String
  lastName: String
}

type OrganizationParticipation2 {
  typeCd: String
  name: String
}

type MaterialParticipation2 {
  actUid: Int!
  typeCd: String!
  entityId: String
  subjectClassCd: String!
  typeDescTxt: String
  participationRecordStatus: String
  participationLastChangeTime: DateTime
  cd: String!
  cdDescTxt: String!
}

type Observation2 {
  domainCd: String!
  cdDescTxt: String!
  displayName: String
}

type AssociatedInvestigation2 {
  publicHealthCaseUid: Int!
  cdDescTxt: String!
  localId: String!
}
type PatientMorbidity {
    morbidity: ID!
    receivedOn: DateTime!
    provider: String
    reportedOn: DateTime!
    condition: String!
    jurisdiction: String!
    event: String!
    associatedWith: PatientMorbidityInvestigation
    treatments: [String]!
    labResults: [PatientMorbidityLabResult]!
}

type PatientMorbidityInvestigation {
    id: ID!
    local: String!
    condition: String!
}

type PatientMorbidityLabResult {
    labTest: String!
    status: String
    codedResult: String
    numericResult: String
    textResult: String
}

type PatientMorbidityResults {
    content: [PatientMorbidity]!
    total: Int!
    number: Int!
}

extend type Query {
    findMorbidityReportsForPatient(patient: ID! page: Page ): PatientMorbidityResults
}

type PatientIndicatorCodedValue {
    id: String!
    description: String!
}

type PatientSummaryAddress {
    use: String!
    address: String
    address2: String
    city: String
    state: String
    zipcode: String
    country: String
}

type PatientSummaryPhone {
    use: String
    number: String
}

type PatientSummaryEmail {
    use: String
    address: String
}

type PatientSummaryIdentification {
    type: String!
    value: String!
}

type PatientSummary {
    legalName: PatientLegalName
    birthday: Date
    age: Int
    gender: String
    ethnicity: String
    races: [String!]
    home: PatientSummaryAddress
    address: [PatientSummaryAddress!]!
    identification: [PatientSummaryIdentification!]
    phone: [PatientSummaryPhone!]
    email: [PatientSummaryEmail!]
}

type PatientLegalName {
    prefix: String
    first: String
    middle: String
    last: String
    suffix: String
}

type PatientAdministrative {
    patient: ID!
    id: ID!
    version: Int!
    asOf: DateTime!
    comment: String
}

type PatientAdministrativeResults {
    content: [PatientAdministrative!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientNameUse {
    id: String!
    description: String!
}

type PatientNamePrefix{
    id: String!
    description: String!
}

type PatientNameSuffix{
    id: String!
    description: String!
}

type PatientNameDegree {
    id: String!
    description: String!
}

type PatientName {
    patient: Int!
    version: Int!
    asOf: DateTime!
    sequence: Int!
    use: PatientNameUse!
    prefix: PatientNamePrefix
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: PatientNameSuffix
    degree: PatientNameDegree
}

type PatientNameResults {
    content: [PatientName!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientAddressType {
    id: String!
    description: String!
}

type PatientAddressUse {
    id: String!
    description: String!
}

type PatientCounty {
    id: String!
    description: String!
}

type PatientState {
    id: String!
    description: String!
}

type PatientCountry {
    id: String!
    description: String!
}

type PatientAddress {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    type: PatientAddressType!
    use: PatientAddressUse!
    address1: String
    address2: String
    city: String
    county: PatientCounty
    state: PatientState
    zipcode: String
    country: PatientCountry
    censusTract: String
    comment: String
}

type PatientAddressResults {
    content: [PatientAddress!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientPhoneType {
    id: String!
    description: String!
}

type PatientPhoneUse {
    id: String!
    description: String!
}

type PatientPhone {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    type: PatientPhoneType
    use: PatientPhoneUse
    countryCode: String
    number: String
    extension: String
    email: String
    url: String
    comment: String
}

type PatientPhoneResults {
    content: [PatientPhone!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientBirth {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    bornOn: Date
    age: Int
    multipleBirth: PatientIndicatorCodedValue
    birthOrder: Int
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientGenderCodedValue {
    id: String!
    description: String!
}

type PatientPreferredGender {
    id: String!
    description: String!
}

type PatientGenderUnknownReason {
    id: String!
    description: String!
}

type PatientGender {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    birth: PatientGenderCodedValue
    current: PatientGenderCodedValue
    unknownReason: PatientGenderUnknownReason
    preferred: PatientPreferredGender
    additional: String
}



type PatientIdentificationType {
    id: String!
    description: String!
}

type PatientIdentificationAuthority {
    id: String!
    description: String!
}

type PatientIdentification {
    patient: Int!
    sequence: Int!
    version: Int!
    asOf: DateTime!
    type: PatientIdentificationType!
    authority: PatientIdentificationAuthority
    value: String
}

type PatientIdentificationResults {
    content: [PatientIdentification!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientMortality {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    deceased: PatientIndicatorCodedValue
    deceasedOn: Date
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientMaritalStatus {
    id: String!
    description: String!
}

type PatientOccupation {
    id: String!
    description: String!
}

type PatientEducationLevel {
    id: String!
    description: String!
}

type PatientPrimaryLanguage {
    id: String!
    description: String!
}

type Allowed {
    value: String
}
type Restricted {
    reason: String!
}

union Sensitive = Allowed | Restricted

type PatientGeneral {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    maritalStatus: PatientMaritalStatus
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: PatientOccupation
    educationLevel: PatientEducationLevel
    primaryLanguage: PatientPrimaryLanguage
    speaksEnglish: PatientIndicatorCodedValue
    stateHIVCase: Sensitive
}

type PatientEthnicGroup {
    id: String!
    description: String!
}

type PatientEthnicityUnknownReason {
    id: String!
    description: String!
}

type PatientDetailedEthnicity {
    id: String!
    description: String!
}

type PatientEthnicity {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    ethnicGroup: PatientEthnicGroup!
    unknownReason: PatientEthnicityUnknownReason
    detailed: [PatientDetailedEthnicity!]!
}

type PatientRaceCategory {
    id: String!
    description: String!
}

type PatientRaceDetail {
    id: String!
    description: String!
}

type PatientRace {
    patient: Int!
    id: Int!
    version: Int!
    asOf: DateTime!
    category: PatientRaceCategory!
    detailed: [PatientRaceDetail!]!
}

type PatientRaceResults {
    content: [PatientRace!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientProfile {
    id: ID!
    local: String!
    shortId: Int!
    version: Int!
    status: String!
    deletable: Boolean!
    summary(asOf: DateTime): PatientSummary
    names(page: Page): PatientNameResults!
    administrative(page: Page): PatientAdministrativeResults!
    addresses(page: Page): PatientAddressResults!
    phones(page: Page): PatientPhoneResults!
    identification(page: Page): PatientIdentificationResults!
    races(page: Page): PatientRaceResults!
    birth: PatientBirth
    gender: PatientGender
    mortality: PatientMortality
    general: PatientGeneral
    ethnicity: PatientEthnicity
}

extend type Query {
    findPatientProfile(patient: ID, shortId: Int): PatientProfile
}
input IdentificationCriteria {
  identificationNumber: String
  identificationType: String
  assigningAuthority: String
}

input PersonFilter {
  id: String
  lastName: String
  firstName: String
  race: String
  identification: IdentificationCriteria
  phoneNumber: String
  email: String
  dateOfBirth: Date
  dateOfBirthOperator: Operator
  gender: String
  deceased: Deceased
  address: String
  city: String
  state: String
  country: String
  zip: String
  mortalityStatus: String
  ethnicity: String
  vaccinationId: String
  morbidityId: String
  documentId: String
  stateCaseId: String
  abcCaseId: String
  cityCountyCaseId: String
  notificationId: String
  treatmentId: String
  labReportId: String
  accessionNumberId: String
  disableSoundex: Boolean
  recordStatus: [RecordStatus!]!
}

enum Gender {
  M
  F
  U
}

enum Deceased {
  Y
  N
  UNK
}

enum Operator {
  EQUAL
  BEFORE
  AFTER
}

type PatientSearchResultIdentification {
  type: String!
  value: String!
}

type PatientSearchResultName {
  type: String
  first: String
  middle: String
  last: String
  suffix: String
}

type PatientSearchResultPhone {
  extension: String
  number: String
  type: String
  use: String
}

type PatientSearchResultAddress {
  type: String
  use: String
  address: String
  address2: String
  city: String
  county: String
  state: String
  zipcode: String
}

type PatientSearchResult {
  patient: Int!
  birthday: Date
  age: Int
  gender: String
  status: String!
  shortId: Int!
  legalName: PatientSearchResultName
  names: [PatientSearchResultName!]!
  identification: [PatientSearchResultIdentification!]!
  addresses: [PatientSearchResultAddress!]!
  phones: [String!]!
  emails: [String!]!
  detailedPhones: [PatientSearchResultPhone!]!
}

type PatientSearchResults {
  content: [PatientSearchResult!]!
  total: Int!
  page: Int!
  size: Int!
}

type Query {
  findPatientsByFilter(
    filter: PersonFilter!
    page: SortablePage
    share: String
  ): PatientSearchResults!
}
type PatientTreatment {
  treatment: ID!
  createdOn: DateTime!
  provider: String
  treatedOn: DateTime!
  description: String!
  event: String!
  associatedWith: PatientTreatmentInvestigation!
}

type PatientTreatmentInvestigation {
  id: ID!
  local: String!
  condition: String!
}

type PatientTreatmentResults {
  content: [PatientTreatment]!
  total: Int!
  number: Int!
}

extend type Query {
  findTreatmentsForPatient(patient: ID!, page: Page): PatientTreatmentResults
}
type PatientVaccination {
    vaccination: ID!
    createdOn: DateTime!
    provider: String
    administeredOn: DateTime
    administered: String!
    event: String!
    associatedWith: PatientVaccinationInvestigation
}

type PatientVaccinationInvestigation {
    id: ID!
    local: String!
    condition: String!
}

type PatientVaccinationResults {
    content: [PatientVaccination]!
    total: Int!
    number: Int!
}

extend type Query {
    findVaccinationsForPatient(patient: ID!, page: Page): PatientVaccinationResults
}
type PatientDeleteSuccessful {
    patient: Int!
}

type PatientDeleteFailed {
    patient: Int!
    reason: String!
}

union PatientDeleteResult = PatientDeleteSuccessful | PatientDeleteFailed

type Mutation {
    createPatient(patient: PersonInput!): PatientCreatedResponse!
    deletePatient(patient: ID!): PatientDeleteResult!
    updatePatientGeneralInfo(input: GeneralInfoInput!): PatientGeneralChangeResult!
    updatePatientBirthAndGender(input: UpdateBirthAndGenderInput!): PatientBirthAndGenderChangeResult!
    updatePatientMortality(input: MortalityInput!): PatientMortalityChangeResult!
    updatePatientAdministrative(input: AdministrativeInput!): PatientAdministrativeChangeResult!
    deletePatientEmail(patientId: Int!, personSeqNum: Int!): PatientUpdateResponse!
    updateEthnicity(input: EthnicityInput!): PatientEthnicityChangeResult!
    addPatientRace(input: RaceInput!): PatientRaceAddResult!
    updatePatientRace(input: RaceInput!): PatientRaceChangeSuccessful!
    deletePatientRace(input: DeletePatientRace!): PatientRaceChangeSuccessful!
    addPatientName(input: NewPatientNameInput!): PatientNameChangeResult!
    updatePatientName(input: UpdatePatientNameInput!): PatientNameChangeResult!
    deletePatientName(input: DeletePatientNameInput!): PatientNameChangeResult!
    addPatientAddress(input: NewPatientAddressInput!): PatientAddressChangeResult!
    updatePatientAddress(input: UpdatePatientAddressInput!): PatientAddressChangeResult!
    deletePatientAddress(input: DeletePatientAddressInput): PatientAddressChangeResult!
    addPatientPhone(input: NewPatientPhoneInput!): PatientPhoneChangeResult!
    updatePatientPhone(input: UpdatePatientPhoneInput!): PatientPhoneChangeResult!
    deletePatientPhone(input: DeletePatientPhoneInput): PatientPhoneChangeResult!
    addPatientIdentification(input: NewPatientIdentificationInput!): PatientIdentificationChangeResult!
    updatePatientIdentification(input: UpdatePatientIdentificationInput!): PatientIdentificationChangeResult!
    deletePatientIdentification(input: DeletePatientIdentificationInput): PatientIdentificationChangeResult!
}

type PatientCreatedResponse {
    id: Int!
    shortId: Int!
}

type PatientUpdateResponse {
    patientId: ID!
}

enum Suffix {
    ESQ
    II
    III
    IV
    JR
    SR
    V
}

enum NameUseCd {
    AD # Adopted Name
    AL # Alias Name
    A # Artist/Stage Name
    S # Coded Pseudo
    I # Indigenous/Tribal
    L # Legal
    C # License
    M # Maiden Name
    MO # Mother's Name
    BR # Name at Birth
    P # Name of Partner/Spouse
    R # Religious
    U
}

input NewPatientName {
    first: String
    middle: String
    last: String
    suffix: Suffix
    use: NameUseCd!
}

input NewPatientAddress {
    streetAddress1: String
    streetAddress2: String
    city: String
    state: String
    county: String
    country: String
    zip: String
    censusTract: String
}

input NewPatientPhoneNumber {
    number: String!
    extension: String
    type: String!
    use: String!
}

input NewPatientIdentification {
    value: String!
    type: String!
    authority: String
}

input PersonInput {
    names: [NewPatientName]
    dateOfBirth: Date
    birthGender: Gender
    currentGender: Gender
    deceased: Deceased
    deceasedTime: DateTime
    maritalStatus: String
    addresses: [NewPatientAddress!]
    phoneNumbers: [NewPatientPhoneNumber!]
    emailAddresses: [String]
    identifications: [NewPatientIdentification!]
    ethnicity: String
    races: [String]
    asOf: DateTime
    comments: String
    stateHIVCase: String
}

input GeneralInfoInput {
    patient: Int!
    asOf: DateTime!
    maritalStatus: String
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: String
    educationLevel: String
    primaryLanguage: String
    speaksEnglish: String
    stateHIVCase: String
}

type PatientGeneralChangeResult {
    patient: Int!
}

input MortalityInput {
    patient: Int!
    asOf: DateTime!
    deceased: String
    deceasedOn: Date
    city: String
    state: String
    county: String
    country: String
}

type PatientMortalityChangeResult {
    patient: Int!
}

input AdministrativeInput {
    patient: Int!
    asOf: DateTime
    comment: String
}

type PatientAdministrativeChangeResult {
    patient: Int!
}


input EthnicityInput {
    patient: String!
    asOf: DateTime!
    ethnicGroup: String
    unknownReason: String
    detailed: [String!]
}

type PatientEthnicityChangeResult {
    patient: String!
}

input RaceInput {
    patient: Int!
    asOf: DateTime
    category: String!
    detailed: [String!]
}

input DeletePatientRace {
    patient: Int!
    category: String!
}

type PatientRaceChangeSuccessful {
    patient: Int!
}

type PatientRaceChangeFailureExistingCategory {
    patient: Int!
    category: String!
}

union PatientRaceAddResult = PatientRaceChangeSuccessful | PatientRaceChangeFailureExistingCategory

input NewPatientNameInput {
    patient: Int!
    type: String!
    asOf: DateTime
    prefix: String
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: String
    degree: String
}

input UpdatePatientNameInput {
    patient: Int!
    sequence: Int!
    type: String!
    asOf: DateTime
    prefix: String
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: String
    degree: String
}

input DeletePatientNameInput {
    patient: Int!
    sequence: Int!
}

type PatientNameChangeResult {
    patient: Int!
    sequence: Int!
}

input NewPatientAddressInput {
    patient: Int!
    asOf: DateTime!
    type: String!
    use: String!
    address1: String
    address2: String
    city: String
    state: String
    zipcode: String
    county: String
    censusTract: String
    country: String
    comment: String
}

input UpdatePatientAddressInput {
    patient: Int!
    id: Int!
    asOf: DateTime!
    type: String!
    use: String!
    address1: String
    address2: String
    city: String
    state: String
    zipcode: String
    county: String
    censusTract: String
    country: String
    comment: String
}

input DeletePatientAddressInput {
    patient: Int!
    id: Int!
}

type PatientAddressChangeResult {
    patient: Int!
    id: Int!
}

input NewPatientPhoneInput {
    patient: Int!
    asOf: DateTime!
    type: String!
    use: String!
    countryCode: String
    number: String
    extension: String
    email:String
    url:String
    comment: String
}

input UpdatePatientPhoneInput {
    patient: Int!
    id: Int!
    asOf: DateTime!
    type: String!
    use: String!
    countryCode: String
    number: String
    extension: String
    email:String
    url:String
    comment: String
}

input DeletePatientPhoneInput {
    patient: Int!
    id: Int!
}

type PatientPhoneChangeResult {
    patient: Int!
    id: Int!
}

input NewPatientIdentificationInput {
    patient: Int!
    asOf: DateTime!
    type: String!
    authority: String
    value: String!
}

input UpdatePatientIdentificationInput {
    patient: Int!
    sequence: Int!
    asOf: DateTime!
    type: String!
    authority: String
    value: String!
}

input DeletePatientIdentificationInput {
    patient: Int!
    sequence: Int!
}

type PatientIdentificationChangeResult {
    patient: Int!
    sequence: Int!
}

input UpdateBirthAndGenderInput {
    patient: ID!
    asOf: DateTime!
    birth: UpdateBirthInput
    gender: UpdateGenderInput
}

input UpdateBirthInput {
    bornOn: Date
    gender:String
    multipleBirth: String
    birthOrder: Int
    city: String
    state: String
    county: String
    country: String
}

input UpdateGenderInput {
    current: String
    unknownReason: String
    preferred: String
    additional: String
}

type PatientBirthAndGenderChangeResult {
    patient: Int!
}
extend type Query {
  findAllProgramAreas(page: Page): [ProgramAreaCode]!
}

type ProgramAreaCode {
  id: String!
  progAreaDescTxt: String
  nbsUid: ID
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  codeSeq: Int
}
extend type Query {
    findAllRaceValues(page: Page): RaceResults!
}

type RaceResults {
    content: [Race]!
    total: Int!
}

type Race {
    id: RaceId!
    codeDescTxt: String!
}

type RaceId {
    code: String!
}
scalar Date
scalar DateTime

input Page {
  pageSize: Int!
  pageNumber: Int!
}

enum SortDirection {
  ASC
  DESC
}

scalar Direction

input Sort {
  property: String!
  direction: Direction!
}

input SortablePage {
  pageSize: Int
  pageNumber: Int
  sort: Sort
  sortField: SortField
  sortDirection: SortDirection
}

enum SortField {
  address
  birthTime
  city
  condition
  country
  county
  email
  firstNm
  id
  identification
  investigator
  investigationId
  jurisdiction
  lastNm
  local_id
  notification
  phoneNumber
  relevance
  startDate
  state
  status
  sex
  zip
}

enum RecordStatus {
  ACTIVE
  INACTIVE
  LOG_DEL
  SUPERCEDED
}

enum PregnancyStatus {
  YES
  NO
  UNKNOWN
}
extend type Query {
    findAllUsers(page: Page): UserResults!
}

type UserResults {
    content: [User]!
    total: Int!
}

type User {
    nedssEntryId: ID!
    userId: String!
    userFirstNm: String!
    userLastNm: String!
    recordStatusCd: RecordStatus
}
