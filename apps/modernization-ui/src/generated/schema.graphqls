extend type Query {
  findInvestigationsByFilter(
    filter: InvestigationFilter!
    page: SortablePage
  ): InvestigationResults!
}

type InvestigationResults {
  content: [Investigation!]!
  total: Int!
  page: Int!
  size: Int!
}

type InvestigationPersonParticipation {
  birthTime: Date
  currSexCd: String
  typeCd: String!
  firstName: String
  lastName: String
  personCd: String!
  personParentUid: Int
  shortId: Int
}

type Investigation {
  relevance: Float!
  id: ID
  cdDescTxt: String
  jurisdictionCodeDescTxt: String
  localId: String
  addTime: Date
  startedOn: Date
  investigationStatusCd: String
  notificationRecordStatusCd: String
  investigatorLastName: String
  personParticipations: [InvestigationPersonParticipation!]!
}

input InvestigationFilter {
  patientId: Int
  conditions: [String!]
  programAreas: [String!]
  jurisdictions: [Int!]
  pregnancyStatus: PregnancyStatus
  eventId: EventId
  eventDate: InvestigationEventDateSearch
  createdBy: String
  lastUpdatedBy: String
  providerFacilitySearch: ProviderFacilitySearch
  investigatorId: Int
  investigationStatus: InvestigationStatus
  outbreakNames: [String]
  caseStatuses: [CaseStatus!]
  notificationStatuses: [NotificationStatus]
  processingStatuses: [ProcessingStatus]
  reportingFacilityId: String
  reportingProviderId: String
}

input EventId {
  investigationEventType: InvestigationEventIdType!
  id: String!
}

input InvestigationEventDateSearch {
  type: InvestigationEventDateType!
  from: Date!
  to: Date!
}

input ProviderFacilitySearch {
  entityType: ReportingEntityType!
  id: ID!
}

enum InvestigationEventIdType {
  ABCS_CASE_ID
  CITY_COUNTY_CASE_ID
  INVESTIGATION_ID
  NOTIFICATION_ID
  STATE_CASE_ID
}

enum ReportingEntityType {
  FACILITY
  PROVIDER
}

enum ProcessingStatus {
  UNASSIGNED
  AWAITING_INTERVIEW
  CLOSED_CASE
  FIELD_FOLLOW_UP
  NO_FOLLOW_UP
  OPEN_CASE
  SURVEILLANCE_FOLLOW_UP
}

enum NotificationStatus {
  UNASSIGNED
  APPROVED
  COMPLETED
  MESSAGE_FAILED
  PENDING_APPROVAL
  REJECTED
}

enum CaseStatus {
  UNASSIGNED
  CONFIRMED
  NOT_A_CASE
  PROBABLE
  SUSPECT
  UNKNOWN
}

enum InvestigationEventDateType {
  DATE_OF_REPORT
  INVESTIGATION_CLOSED_DATE
  INVESTIGATION_CREATE_DATE
  INVESTIGATION_START_DATE
  LAST_UPDATE_DATE
  NOTIFICATION_CREATE_DATE
}

enum InvestigationStatus {
  OPEN
  CLOSED
}
extend type Query {
  findAllJurisdictions(page: Page): [Jurisdiction]!
}

type Jurisdiction {
  id: String!
  typeCd: String!
  assigningAuthorityCd: String
  assigningAuthorityDescTxt: String
  codeDescTxt: String
  codeShortDescTxt: String
  effectiveFromTime: DateTime
  effectiveToTime: DateTime
  indentLevelNbr: Int
  isModifiableInd: String
  parentIsCd: String
  stateDomainCd: String
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  codeSeqNum: Int
  nbsUid: ID
  sourceConceptId: String
  codeSystemCd: String
  codeSystemDescTxt: String
  exportInd: String
}
extend type Query {
  findLabReportsByFilter(
    filter: LabReportFilter!
    page: SortablePage
  ): LabReportResults!
}

input LaboratoryEventDateSearch {
  type: LaboratoryReportEventDateType!
  from: Date!
  to: Date!
}

input LabReportProviderSearch {
  providerType: ProviderType!
  providerId: ID!
}

enum ProviderType {
  ORDERING_FACILITY
  ORDERING_PROVIDER
  REPORTING_FACILITY
}

enum LaboratoryEventIdType {
  ACCESSION_NUMBER
  LAB_ID
}

enum LaboratoryReportEventDateType {
  DATE_OF_REPORT
  DATE_RECEIVED_BY_PUBLIC_HEALTH
  DATE_OF_SPECIMEN_COLLECTION
  LAB_REPORT_CREATE_DATE
  LAST_UPDATE_DATE
}

enum EntryMethod {
  ELECTRONIC
  MANUAL
}

enum UserType {
  INTERNAL
  EXTERNAL
}

enum EventStatus {
  NEW
  UPDATE
}

enum LaboratoryReportStatus {
  PROCESSED
  UNPROCESSED
}

input LabReportFilter {
  patientId: Int
  programAreas: [String!]
  jurisdictions: [Int!]
  pregnancyStatus: PregnancyStatus
  eventId: LabReportEventId
  eventDate: LaboratoryEventDateSearch
  entryMethods: [EntryMethod!]
  enteredBy: [UserType!]
  eventStatus: [EventStatus!]
  processingStatus: [LaboratoryReportStatus!]
  createdBy: Int
  lastUpdatedBy: Int
  providerSearch: LabReportProviderSearch
  resultedTest: String
  codedResult: String
  orderingLabId: Int
  orderingProviderId: Int
  reportingLabId: Int
}

input LabReportEventId {
  labEventType: LaboratoryEventIdType!
  labEventId: String!
}

type LabReportResults {
  content: [LabReport!]!
  total: Int!
  page: Int!
  size: Int!
}

type LabTestSummary {
  name: String
  status: String
  coded: String
  numeric: Float
  high: String
  low: String
  unit: String
}

type LabReport {
  relevance: Float!
  id: String!
  jurisdictionCd: Int!
  localId: String!
  addTime: Date!
  personParticipations: [LabReportPersonParticipation!]!
  organizationParticipations: [LabReportOrganizationParticipation!]!
  observations: [Observation!]!
  associatedInvestigations: [AssociatedInvestigation!]!
  tests: [LabTestSummary!]!
}

type LabReportPersonParticipation {
  birthTime: Date
  currSexCd: String
  typeCd: String
  firstName: String
  lastName: String
  personCd: String!
  personParentUid: Int
  shortId: Int
}

type LabReportOrganizationParticipation {
  typeCd: String!
  name: String!
}

type Observation {
  cdDescTxt: String
  statusCd: String
  altCd: String
  displayName: String
}

type AssociatedInvestigation {
  cdDescTxt: String!
  localId: String!
}
type NamedContact {
  id: ID!
  name: String!
}

type TracedCondition {
  id: String,
  description: String
}

type PatientContactInvestigation {
  id: ID!
  local: String!
  condition: String!
}

type NamedByPatient {
  contactRecord: ID!
  createdOn: DateTime!
  condition: TracedCondition!
  contact: NamedContact!
  namedOn: DateTime!
  priority: String
  disposition: String
  event: String!
  associatedWith: PatientContactInvestigation
}

type ContactsNamedByPatientResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}

type NamedByContact {
  contactRecord: ID!
  createdOn: DateTime!
  contact: NamedContact!
  namedOn: DateTime!
  condition: TracedCondition!
  event: String!
  associatedWith: PatientContactInvestigation
}

type PatientNamedByContactResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}


extend type Query {

  findContactsNamedByPatient(patient:ID!, page: Page) : ContactsNamedByPatientResults

  findPatientNamedByContact(patient:ID!, page: Page) : PatientNamedByContactResults
}
type PatientDocument {
    document: ID!
    receivedOn: DateTime!
    type: String!
    sendingFacility: String!
    reportedOn: DateTime!
    condition: String
    event: String!
    associatedWith: PatientDocumentInvestigation
}

type PatientDocumentInvestigation {
    id: ID!
    local: String!
}

type PatientDocumentResults {
    content: [PatientDocument]!
    total: Int!
    number: Int!
}

extend type Query {
    findDocumentsForPatient(patient: ID!, page: Page): PatientDocumentResults
}
type PatientInvestigation {
    investigation: ID!
    startedOn: Date
    condition: String!
    status: String!
    caseStatus: String
    jurisdiction: String!
    event: String!
    coInfection: String
    notification: String
    investigator: String
    comparable: Boolean!
}

type PatientInvestigationResults {
    content: [PatientInvestigation]!
    total: Int!
    number: Int!
}

extend type Query {
    findInvestigationsForPatient(patient: ID!, page: Page, openOnly: Boolean): PatientInvestigationResults
}
type PatientMorbidity {
    morbidity: ID!
    receivedOn: DateTime!
    provider: String
    reportedOn: DateTime!
    condition: String!
    jurisdiction: String!
    event: String!
    associatedWith: PatientMorbidityInvestigation
    treatments: [String]!
    labResults: [PatientMorbidityLabResult]!
}

type PatientMorbidityInvestigation {
    id: ID!
    local: String!
    condition: String!
}

type PatientMorbidityLabResult {
    labTest: String!
    status: String
    codedResult: String
    numericResult: String
    textResult: String
}

type PatientMorbidityResults {
    content: [PatientMorbidity]!
    total: Int!
    number: Int!
}

extend type Query {
    findMorbidityReportsForPatient(patient: ID! page: Page ): PatientMorbidityResults
}

type PatientIndicatorCodedValue {
    id: String!
    description: String!
}

type PatientSummaryAddress {
    use: String!
    address: String
    address2: String
    city: String
    state: String
    zipcode: String
    country: String
}

type PatientSummaryPhone {
    use: String
    number: String
}

type PatientSummaryEmail {
    use: String
    address: String
}

type PatientSummaryIdentification {
    type: String!
    value: String!
}

type PatientSummary {
    legalName: PatientLegalName
    birthday: Date
    age: Int
    gender: String
    ethnicity: String
    races: [String!]
    home: PatientSummaryAddress
    address: [PatientSummaryAddress!]!
    identification: [PatientSummaryIdentification!]
    phone: [PatientSummaryPhone!]
    email: [PatientSummaryEmail!]
}

type PatientLegalName {
    prefix: String
    first: String
    middle: String
    last: String
    suffix: String
}

type PatientNameUse {
    id: String!
    description: String!
}

type PatientNamePrefix{
    id: String!
    description: String!
}

type PatientNameSuffix{
    id: String!
    description: String!
}

type PatientNameDegree {
    id: String!
    description: String!
}

type PatientName {
    patient: Int!
    version: Int!
    asOf: Date!
    sequence: Int!
    use: PatientNameUse!
    prefix: PatientNamePrefix
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: PatientNameSuffix
    degree: PatientNameDegree
}

type PatientNameResults {
    content: [PatientName!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientAddressType {
    id: String!
    description: String!
}

type PatientAddressUse {
    id: String!
    description: String!
}

type PatientCounty {
    id: String!
    description: String!
}

type PatientState {
    id: String!
    description: String!
}

type PatientCountry {
    id: String!
    description: String!
}

type PatientBirth {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    bornOn: Date
    age: Int
    multipleBirth: PatientIndicatorCodedValue
    birthOrder: Int
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientGenderCodedValue {
    id: String!
    description: String!
}

type PatientPreferredGender {
    id: String!
    description: String!
}

type PatientGenderUnknownReason {
    id: String!
    description: String!
}

type PatientGender {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    birth: PatientGenderCodedValue
    current: PatientGenderCodedValue
    unknownReason: PatientGenderUnknownReason
    preferred: PatientPreferredGender
    additional: String
}

type PatientMortality {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    deceased: PatientIndicatorCodedValue
    deceasedOn: Date
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientMaritalStatus {
    id: String!
    description: String!
}

type PatientOccupation {
    id: String!
    description: String!
}

type PatientEducationLevel {
    id: String!
    description: String!
}

type PatientPrimaryLanguage {
    id: String!
    description: String!
}

type Allowed {
    value: String
}
type Restricted {
    reason: String!
}

union Sensitive = Allowed | Restricted

type PatientGeneral {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    maritalStatus: PatientMaritalStatus
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: PatientOccupation
    educationLevel: PatientEducationLevel
    primaryLanguage: PatientPrimaryLanguage
    speaksEnglish: PatientIndicatorCodedValue
    stateHIVCase: Sensitive
}

type PatientEthnicGroup {
    id: String!
    description: String!
}

type PatientEthnicityUnknownReason {
    id: String!
    description: String!
}

type PatientDetailedEthnicity {
    id: String!
    description: String!
}

type PatientEthnicity {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    ethnicGroup: PatientEthnicGroup!
    unknownReason: PatientEthnicityUnknownReason
    detailed: [PatientDetailedEthnicity!]!
}

type PatientRaceCategory {
    id: String!
    description: String!
}

type PatientRaceDetail {
    id: String!
    description: String!
}

type PatientRace {
    patient: Int!
    id: Int!
    version: Int!
    asOf: Date!
    category: PatientRaceCategory!
    detailed: [PatientRaceDetail!]!
}

type PatientRaceResults {
    content: [PatientRace!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientProfile {
    id: ID!
    local: String!
    shortId: Int!
    version: Int!
    status: String!
    deletable: Boolean!
    summary(asOf: Date): PatientSummary
    names(page: Page): PatientNameResults!
    races(page: Page): PatientRaceResults!
    birth: PatientBirth
    gender: PatientGender
    mortality: PatientMortality
    general: PatientGeneral
    ethnicity: PatientEthnicity
}

extend type Query {
    findPatientProfile(patient: ID, shortId: Int): PatientProfile
}
input DateEqualsCriteria {
  day: Int
  month: Int
  year: Int
}

input DateBetweenCriteria {
  from: Date
  to: Date
}

input DateCriteria {
  equals: DateEqualsCriteria
  between: DateBetweenCriteria
}

input TextCriteria {
  equals: String
  not: String
  startsWith: String
  contains: String
  soundsLike: String
}

input IdentificationCriteria {
  identificationNumber: String
  identificationType: String
  assigningAuthority: String
}

input PatientNameCriteria {
  first: TextCriteria
  last: TextCriteria
}

input LocationCriteria {
  street: TextCriteria
  city: TextCriteria
}

input Filter {
  id: String
  address: String
  ageOrDateOfBirth: String
  name: String
  sex: String
  email: String
  phone: String
  identification: String
}

input PersonFilter {
  id: String
  name: PatientNameCriteria
  lastName: String
  firstName: String
  race: String
  identification: IdentificationCriteria
  phoneNumber: String
  email: String
  dateOfBirth: Date
  bornOn: DateCriteria
  dateOfBirthOperator: Operator
  gender: String
  deceased: Deceased
  location: LocationCriteria
  address: String
  city: String
  state: String
  country: String
  zip: String
  mortalityStatus: String
  ethnicity: String
  vaccination: String
  morbidity: String
  document: String
  stateCase: String
  abcCase: String
  cityCountyCase: String
  notification: String
  treatment: String
  investigation: String
  labReport: String
  accessionNumber: String
  disableSoundex: Boolean
  recordStatus: [RecordStatus!]!
  filter: Filter
}

enum Gender {
  M
  F
  U
}

enum Deceased {
  Y
  N
  UNK
}

enum Operator {
  EQUAL
  BEFORE
  AFTER
}

type PatientSearchResultIdentification {
  type: String!
  value: String!
}

type PatientSearchResultName {
  type: String
  first: String
  middle: String
  last: String
  suffix: String
}

type PatientSearchResultPhone {
  type: String!
  use: String!
  number: String
}

type PatientSearchResultAddress {
  type: String
  use: String
  address: String
  address2: String
  city: String
  county: String
  state: String
  zipcode: String
}

type PatientSearchResult {
  patient: Int!
  birthday: Date
  age: Int
  gender: String
  status: String!
  shortId: Int!
  legalName: PatientSearchResultName
  names: [PatientSearchResultName!]!
  identification: [PatientSearchResultIdentification!]!
  addresses: [PatientSearchResultAddress!]!
  phones: [String!]!
  emails: [String!]!
  detailedPhones: [PatientSearchResultPhone!]!
}

type PatientSearchResults {
  content: [PatientSearchResult!]!
  total: Int!
  page: Int!
  size: Int!
}

type Query {
  findPatientsByFilter(
    filter: PersonFilter!
    page: SortablePage
    share: String
  ): PatientSearchResults!
}
type PatientTreatment {
  treatment: ID!
  createdOn: DateTime!
  provider: String
  treatedOn: DateTime!
  description: String!
  event: String!
  associatedWith: PatientTreatmentInvestigation!
}

type PatientTreatmentInvestigation {
  id: ID!
  local: String!
  condition: String!
}

type PatientTreatmentResults {
  content: [PatientTreatment]!
  total: Int!
  number: Int!
}

extend type Query {
  findTreatmentsForPatient(patient: ID!, page: Page): PatientTreatmentResults
}
type PatientVaccination {
    vaccination: ID!
    createdOn: DateTime!
    provider: String
    administeredOn: DateTime
    administered: String!
    event: String!
    associatedWith: PatientVaccinationInvestigation
}

type PatientVaccinationInvestigation {
    id: ID!
    local: String!
    condition: String!
}

type PatientVaccinationResults {
    content: [PatientVaccination]!
    total: Int!
    number: Int!
}

extend type Query {
    findVaccinationsForPatient(patient: ID!, page: Page): PatientVaccinationResults
}
type Mutation {
    updatePatientGeneralInfo(input: GeneralInfoInput!): PatientGeneralChangeResult!
    updatePatientBirthAndGender(input: UpdateBirthAndGenderInput!): PatientBirthAndGenderChangeResult!
    updatePatientMortality(input: MortalityInput!): PatientMortalityChangeResult!
    updateEthnicity(input: EthnicityInput!): PatientEthnicityChangeResult!
    addPatientRace(input: RaceInput!): PatientRaceAddResult!
    updatePatientRace(input: RaceInput!): PatientRaceChangeSuccessful!
    deletePatientRace(input: DeletePatientRace!): PatientRaceChangeSuccessful!
    addPatientName(input: NewPatientNameInput!): PatientNameChangeResult!
    updatePatientName(input: UpdatePatientNameInput!): PatientNameChangeResult!
    deletePatientName(input: DeletePatientNameInput!): PatientNameChangeResult!
}

type PatientUpdateResponse {
    patientId: ID!
}

enum Suffix {
    ESQ
    II
    III
    IV
    JR
    SR
    V
}

enum NameUseCd {
    AD # Adopted Name
    AL # Alias Name
    A # Artist/Stage Name
    S # Coded Pseudo
    I # Indigenous/Tribal
    L # Legal
    C # License
    M # Maiden Name
    MO # Mother's Name
    BR # Name at Birth
    P # Name of Partner/Spouse
    R # Religious
    U
}

input GeneralInfoInput {
    patient: Int!
    asOf: Date!
    maritalStatus: String
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: String
    educationLevel: String
    primaryLanguage: String
    speaksEnglish: String
    stateHIVCase: String
}

type PatientGeneralChangeResult {
    patient: Int!
}

input MortalityInput {
    patient: Int!
    asOf: Date!
    deceased: String
    deceasedOn: Date
    city: String
    state: String
    county: String
    country: String
}

type PatientMortalityChangeResult {
    patient: Int!
}

input AdministrativeInput {
    patient: Int!
    asOf: Date!
    comment: String
}

type PatientAdministrativeChangeResult {
    patient: Int!
}


input EthnicityInput {
    patient: String!
    asOf: Date!
    ethnicGroup: String
    unknownReason: String
    detailed: [String!]
}

type PatientEthnicityChangeResult {
    patient: String!
}

input RaceInput {
    patient: Int!
    asOf: Date
    category: String!
    detailed: [String!]
}

input DeletePatientRace {
    patient: Int!
    category: String!
}

type PatientRaceChangeSuccessful {
    patient: Int!
}

type PatientRaceChangeFailureExistingCategory {
    patient: Int!
    category: String!
}

union PatientRaceAddResult = PatientRaceChangeSuccessful | PatientRaceChangeFailureExistingCategory

input NewPatientNameInput {
    patient: Int!
    type: String!
    asOf: Date!
    prefix: String
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: String
    degree: String
}

input UpdatePatientNameInput {
    patient: Int!
    sequence: Int!
    type: String!
    asOf: Date!
    prefix: String
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: String
    degree: String
}

input DeletePatientNameInput {
    patient: Int!
    sequence: Int!
}

type PatientNameChangeResult {
    patient: Int!
    sequence: Int!
}

input UpdateBirthAndGenderInput {
    patient: ID!
    asOf: Date!
    birth: UpdateBirthInput
    gender: UpdateGenderInput
}

input UpdateBirthInput {
    bornOn: Date
    gender:String
    multipleBirth: String
    birthOrder: Int
    city: String
    state: String
    county: String
    country: String
}

input UpdateGenderInput {
    current: String
    unknownReason: String
    preferred: String
    additional: String
}

type PatientBirthAndGenderChangeResult {
    patient: Int!
}
extend type Query {
  findAllProgramAreas(page: Page): [ProgramAreaCode]!
}

type ProgramAreaCode {
  id: String!
  progAreaDescTxt: String
  nbsUid: ID
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  codeSeq: Int
}
scalar Date
scalar DateTime

input Page {
  pageSize: Int!
  pageNumber: Int!
}

enum SortDirection {
  ASC
  DESC
}

scalar Direction

input Sort {
  property: String!
  direction: Direction!
}

input SortablePage {
  pageSize: Int
  pageNumber: Int
  sort: Sort
  sortField: SortField
  sortDirection: SortDirection
}

enum SortField {
  address
  birthTime
  city
  condition
  country
  county
  email
  firstNm
  id
  identification
  investigator
  investigationId
  jurisdiction
  lastNm
  local_id
  notification
  phoneNumber
  relevance
  startDate
  state
  status
  sex
  zip
}

enum RecordStatus {
  ACTIVE
  INACTIVE
  LOG_DEL
  SUPERCEDED
}

enum PregnancyStatus {
  YES
  NO
  UNKNOWN
}
