extend type Query {
    findAllConditionCodes(page: Page): [ConditionCode]!
}

type ConditionCode {
    id: String!
    conditionDescTxt: String
}
extend type Query {
  findAllCountryCodes(page: Page): [CountryCode]!
}

type CountryCode {
  id: ID
  assigningAuthorityCd: String
  assigningAuthorityDescTxt: String
  codeDescTxt: String
  codeShortDescTxt: String
  effectiveFromTime: DateTime
  effectiveToTime: DateTime
  excludedTxt: String
  keyInfoTxt: String
  indentLevelNbr: Int
  isModifiableInd: String
  parentIsCd: String
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  seqNum: Int
  nbsUid: Int
  sourceConceptId: String
  codeSystemCd: String
  codeSystemDescTxt: String
}
extend type Query {
    findAllCountyCodesForState(stateCode: String!, page: Page): [CountyCode]!
}

type CountyCode {
    id: String!
    codeDescTxt: String
    codeShortDescTxt: String
}
extend type Query {
    findAllEthnicityValues(page: Page): EthnicityResults!
}

type EthnicityResults {
    content: [Ethnicity]!
    total: Int!
}

type Ethnicity {
    id: EthnicityId!
    codeDescTxt: String!
}

type EthnicityId {
    code: String!
}
extend type Query {
    findAllPatientIdentificationTypes(page: Page): PatientIdentificationTypeResults!
}

type PatientIdentificationTypeResults {
    content: [IdentificationType]!
    total: Int!
}

type IdentificationType {
    id: IdentificationTypeId!
    codeDescTxt: String!
}

type IdentificationTypeId {
    code: String!
}
extend type Query {
  findInvestigationsByFilter(
    filter: InvestigationFilter!
    page: SortablePage
  ): InvestigationResults!
}

type InvestigationResults {
  content: [Investigation]!
  total: Int!
}

type Investigation {
  id: ID
  recordStatus: String
  lastChangeTime: DateTime
  publicHealthCaseUid: Int
  caseClassCd: String
  outbreakName: String
  caseTypeCd: String
  cdDescTxt: String
  progAreaCd: String
  jurisdictionCd: Int
  jurisdictionCodeDescTxt: String
  pregnantIndCd: String
  localId: String
  rptFormCmpltTime: DateTime
  activityToTime: DateTime
  activityFromTime: DateTime
  addTime: DateTime
  publicHealthCaseLastChgTime: DateTime
  addUserId: Int
  lastChangeUserId: Int
  currProcessStateCd: String
  investigationStatusCd: String
  moodCd: String
  notificationLocalId: String
  notificationAddTime: DateTime
  notificationRecordStatusCd: String
  notificationLastChgTime: DateTime
  personParticipations: [PersonParticipation]
  organizationParticipations: [OrganizationParticipation]
  actIds: [ActId]
}

type ActId {
  id: Int
  recordStatus: String
  actIdSeq: Int
  rootExtensionTxt: String
  typeCd: String
  lastChangeTime: DateTime
}

input InvestigationFilter {
  patientId: Int
  conditions: [String]
  programAreas: [String]
  jurisdictions: [ID]
  pregnancyStatus: PregnancyStatus
  eventIdType: InvestigationEventIdType
  eventId: String
  eventDateSearch: InvestigationEventDateSearch
  createdBy: String
  lastUpdatedBy: String
  providerFacilitySearch: ProviderFacilitySearch
  investigatorId: ID
  investigationStatus: InvestigationStatus
  outbreakNames: [String]
  caseStatuses: CaseStatuses
  notificationStatuses: NotificationStatuses
  processingStatuses: ProcessingStatuses
}

input CaseStatuses {
  includeUnassigned: Boolean!
  statusList: [CaseStatus!]!
}

input NotificationStatuses {
  includeUnassigned: Boolean!
  statusList: [NotificationStatus!]!
}

input ProcessingStatuses {
  includeUnassigned: Boolean!
  statusList: [ProcessingStatus!]!
}

input InvestigationEventDateSearch {
  eventDateType: InvestigationEventDateType!
  from: DateTime!
  to: DateTime!
}

input ProviderFacilitySearch {
  entityType: ReportingEntityType!
  id: ID!
}

enum InvestigationEventIdType {
  ABCS_CASE_ID
  CITY_COUNTY_CASE_ID
  INVESTIGATION_ID
  NOTIFICATION_ID
  STATE_CASE_ID
}

enum ReportingEntityType {
  FACILITY
  PROVIDER
}

enum ProcessingStatus {
  UNASSIGNED
  AWAITING_INTERVIEW
  CLOSED_CASE
  FIELD_FOLLOW_UP
  NO_FOLLOW_UP
  OPEN_CASE
  SURVEILLANCE_FOLLOW_UP
}

enum NotificationStatus {
  UNASSIGNED
  APPROVED
  COMPLETED
  MESSAGE_FAILED
  PENDING_APPROVAL
  REJECTED
}

enum CaseStatus {
  UNASSIGNED
  CONFIRMED
  NOT_A_CASE
  PROBABLE
  SUSPECT
  UNKNOWN
}

enum InvestigationEventDateType {
  DATE_OF_REPORT
  INVESTIGATION_CLOSED_DATE
  INVESTIGATION_CREATE_DATE
  INVESTIGATION_START_DATE
  LAST_UPDATE_DATE
  NOTIFICATION_CREATE_DATE
}

enum InvestigationStatus {
  OPEN
  CLOSED
}
extend type Query {
  findAllJurisdictions(page: Page): [Jurisdiction]!
}

type Jurisdiction {
  id: String!
  typeCd: String!
  assigningAuthorityCd: String
  assigningAuthorityDescTxt: String
  codeDescTxt: String
  codeShortDescTxt: String
  effectiveFromTime: DateTime
  effectiveToTime: DateTime
  indentLevelNbr: Int
  isModifiableInd: String
  parentIsCd: String
  stateDomainCd: String
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  codeSeqNum: Int
  nbsUid: ID
  sourceConceptId: String
  codeSystemCd: String
  codeSystemDescTxt: String
  exportInd: String
}
extend type Query {
  findLabReportsByFilter(
    filter: LabReportFilter!
    page: SortablePage
  ): LabReportResults!
}

type LabReportResults {
  content: [LabReport]!
  total: Int!
}

input LabReportFilter {
  patientId: Int
  programAreas: [String]
  jurisdictions: [ID]
  pregnancyStatus: PregnancyStatus
  eventIdType: LaboratoryEventIdType
  eventId: String
  eventDateSearch: LaboratoryEventDateSearch
  entryMethods: [EntryMethod]
  enteredBy: [UserType]
  eventStatus: [EventStatus]
  processingStatus: [LaboratoryReportStatus]
  createdBy: ID
  lastUpdatedBy: ID
  providerSearch: LabReportProviderSearch
  resultedTest: String
  codedResult: String
}

type LabReport {
  id: String
  observationUid: Int
  lastChange: DateTime
  classCd: String
  moodCd: String
  observationLastChgTime: DateTime
  cdDescTxt: String
  recordStatusCd: String
  programAreaCd: String
  jurisdictionCd: Int
  jurisdictionCodeDescTxt: String
  pregnantIndCd: String
  localId: String
  activityToTime: DateTime
  effectiveFromTime: DateTime
  rptToStateTime: DateTime
  addTime: DateTime
  electronicInd: String
  versionCtrlNbr: Int
  addUserId: Int
  lastChgUserId: Int
  personParticipations: [PersonParticipation]
  organizationParticipations: [OrganizationParticipation]
  materialParticipations: [MaterialParticipation]
  observations: [Observation]
  actIds: [ActId]
  associatedInvestigations: [AssociatedInvestigation]
}

type MaterialParticipation {
  actUid: Int
  typeCd: String
  entityId: String
  subjectClassCd: String
  typeDescTxt: String
  participationRecordStatus: String
  participationLastChangeTime: DateTime
  cd: String
  cdDescTxt: String
}

type Observation {
  cd: String
  cdDescTxt: String
  domainCd: String
  statusCd: String
  altCd: String
  altDescTxt: String
  altCdSystemCd: String
  displayName: String
  ovcCode: String
  ovcAltCode: String
  ovcAltDescTxt: String
  ovcAltCdSystemCd: String
}

type AssociatedInvestigation {
  publicHealthCaseUid: Int
  cdDescTxt: String
  localId: String
  lastChgTime: DateTime
  actRelationshipLastChgTime: DateTime
}

input LaboratoryEventDateSearch {
  eventDateType: LaboratoryReportEventDateType!
  from: DateTime!
  to: DateTime!
}

input LabReportProviderSearch {
  providerType: ProviderType!
  providerId: ID!
}

enum ProviderType {
  ORDERING_FACILITY
  ORDERING_PROVIDER
  REPORTING_FACILITY
}

enum LaboratoryEventIdType {
  ACCESSION_NUMBER
  LAB_ID
}

enum LaboratoryReportEventDateType {
  DATE_OF_REPORT
  DATE_RECEIVED_BY_PUBLIC_HEALTH
  DATE_OF_SPECIMEN_COLLECTION
  LAB_REPORT_CREATE_DATE
  LAST_UPDATE_DATE
}

enum EntryMethod {
  ELECTRONIC
  MANUAL
}

enum UserType {
  INTERNAL
  EXTERNAL
}

enum EventStatus {
  NEW
  UPDATE
}

enum LaboratoryReportStatus {
  PROCESSED
  UNPROCESSED
}
extend type Query {
    findLocalCodedResults(searchText: String!, page: Page): LocalCodedResults!
}

type LocalCodedResults {
    content: [LabResult]!
    total: Int!
}
type LabResult {
    id: LabResultId
    nbsUid: ID
    labResultDescTxt: String
}

type LabResultId {
    labResultCd: String
    laboratoryId: String
}
extend type Query {
    findLocalLabTest(searchText: String!, page: Page): LocalLabTestResults!
}

type LocalLabTestResults {
    content: [LabTest]!
    total: Int!
}

type LabTest {
    id: LabTestId
    labTestDescTxt: String
    organismResultTestInd: String
}

type LabTestId {
    labTestCd: String
    laboratoryId: String
}
extend type Query {
    findLoincLabTest(searchText: String!, page: Page): LoincLabTestResults!
}

type LoincLabTestResults {
    content: [LoincCode]!
    total: Int!
}

type LoincCode {
    id: String
    componentName: String
    methodType: String
    systemCd: String
    property: String
    relatedClassCd: String
}
extend type Query {
  findOrganizationById(id: ID!): Organization
  findAllOrganizations(page: Page): OrganizationResults!
  findOrganizationsByFilter(
    filter: OrganizationFilter!
    page: Page
  ): OrganizationResults!
}

type OrganizationResults {
  content: [Organization]!
  total: Int!
}

input OrganizationFilter {
  id: ID
  displayNm: String
  streetAddr1: String
  streetAddr2: String
  cityCd: String
  cityDescTxt: String
  stateCd: String
  zipCd: String
}

type Organization {
  id: ID
  addReasonCd: String
  addTime: DateTime
  addUserId: ID
  cd: String
  cdDescTxt: String
  description: String
  durationAmt: String
  durationUnitCd: String
  fromTime: DateTime
  lastChgReasonCd: String
  lastChgTime: DateTime
  lastChgUserId: Int
  localId: String
  recordStatusCd: RecordStatus
  recordStatusTime: DateTime
  standardIndustryClassCd: String
  standardIndustryDescTxt: String
  statusCd: String
  statusTime: DateTime
  toTime: DateTime
  userAffiliationTxt: String
  displayNm: String
  streetAddr1: String
  streetAddr2: String
  cityCd: String
  cityDescTxt: String
  stateCd: String
  cntyCd: String
  cntryCd: String
  zipCd: String
  phoneNbr: String
  phoneCntryCd: String
  versionCtrlNbr: Int
  electronicInd: String
  edxInd: String
}
extend type Query {
    findAllOutbreaks(page: Page): OutbreakResults!
}

type OutbreakResults {
    content: [Outbreak]!
    total: Int!
}

type Outbreak {
    id: OutbreakId!
    codeShortDescTxt: String
}

type OutbreakId {
    codeSetNm: String!
    code: String!
}
type NamedContact {
  id: ID!
  name: String!
}

type PatientContactInvestigation {
  id: ID!
  local: String!
  condition: String!
}

type NamedByPatient {
  contactRecord: ID!
  createdOn: DateTime!
  condition: String
  contact: NamedContact!
  namedOn: DateTime!
  priority: String
  disposition: String
  event: String!
  associatedWith: PatientContactInvestigation
}

type ContactsNamedByPatientResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}

type NamedByContact {
  contactRecord: ID!
  createdOn: DateTime!
  contact: NamedContact!
  namedOn: DateTime!
  condition: String
  event: String!
  associatedWith: PatientContactInvestigation
}

type PatientNamedByContactResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}


extend type Query {

  findContactsNamedByPatient(patient:ID!, page: Page) : ContactsNamedByPatientResults

  findPatientNamedByContact(patient:ID!, page: Page) : PatientNamedByContactResults
}
type PatientDocument {
    document: ID!
    receivedOn: DateTime!
    type: String!
    sendingFacility: String!
    reportedOn: DateTime!
    condition: String
    event: String!
    associatedWith: PatientDocumentInvestigation
}

type PatientDocumentInvestigation {
    id: ID!
    local: String!
}

type PatientDocumentResults {
    content: [PatientDocument]!
    total: Int!
    number: Int!
}

extend type Query {
    findDocumentsForPatient(patient: ID!, page: Page): PatientDocumentResults
}
type PatientMorbidity {
    morbidity: ID!
    receivedOn: DateTime!
    provider: String
    reportedOn: DateTime!
    condition: String!
    jurisdiction: String!
    event: String!
    associatedWith: PatientMorbidityInvestigation
    treatments: [String]!
    labResults: [PatientMorbidityLabResult]!
}

type PatientMorbidityInvestigation {
    id: ID!
    local: String!
    condition: String!
}

type PatientMorbidityLabResult {
    labTest: String!
    status: String
    codedResult: String
    numericResult: String
    textResult: String
}

type PatientMorbidityResults {
    content: [PatientMorbidity]!
    total: Int!
    number: Int!
}

extend type Query {
    findMorbidityReportsForPatient(patient: ID! page: Page ): PatientMorbidityResults
}

type PatientCodedValue {
    id: String!
    description: String!
}

type PatientSummaryAddress {
    street: String
    city: String
    state: String
    zipcode: String
    country: String
}

type PatientSummaryPhone {
    use: String
    number: String
}

type PatientSummaryEmail {
    use: String
    address: String
}

type PatientSummary {
    legalName: PatientLegalName
    birthday: Date
    age: Int
    gender: String
    ethnicity: String
    race: String
    phone: [PatientSummaryPhone]
    email: [PatientSummaryEmail]
    address: PatientSummaryAddress
}

type PatientLegalName {
    prefix: String
    first: String
    middle: String
    last: String
    suffix: String
}

type PatientAdministrative {
    patient: ID!
    id: ID!
    version: Int!
    asOf: DateTime!
    comment: String
}

type PatientAdministrativeResults {
    content: [PatientAdministrative]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientName {
    patient: ID!
    version: Int!
    asOf: DateTime!
    sequence: Int!
    use: PatientCodedValue!
    prefix: PatientCodedValue
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: PatientCodedValue
    degree: PatientCodedValue
}

type PatientNameResults {
    content: [PatientName]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientAddress {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    type: PatientCodedValue
    use: PatientCodedValue
    address1: String
    address2: String
    city: String
    county: PatientCodedValue
    state: PatientCodedValue
    zipcode: String
    country: PatientCodedValue
    censusTract: String
    comment: String
}

type PatientAddressResults {
    content: [PatientAddress]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientPhone {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    type: PatientCodedValue
    use: PatientCodedValue
    countryCode: String
    number: String
    extension: String
    email: String
    url: String
    comment: String
}

type PatientPhoneResults {
    content: [PatientPhone]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientBirth {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    bornOn: Date
    age: Int
    multipleBirth: PatientCodedValue
    city: String
    state: PatientCodedValue
    country: PatientCodedValue
}

type PatientGender {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    birth: PatientCodedValue
    current: PatientCodedValue
    unknownReason: PatientCodedValue
    preferred: PatientCodedValue
    additional: String
}

type PatientIdentification {
    patient: Int!
    id: ID!
    sequence: Int!
    version: Int!
    asOf: DateTime!
    type: PatientCodedValue!
    authority: PatientCodedValue
    value: String
}

type PatientIdentificationResults {
    content: [PatientIdentification]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientMortality {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    deceased: PatientCodedValue
    deceasedOn: Date
    city: String
    state: PatientCodedValue
    country: PatientCodedValue
}

type PatientGeneral {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    maritalStatus: PatientCodedValue
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: PatientCodedValue
    educationLevel: PatientCodedValue
    primaryLanguage: PatientCodedValue
    speaksEnglish: PatientCodedValue
    stateHIVCase: String
}

type PatientEthnicity {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    ethnicGroup: PatientCodedValue!
    unknownReason: PatientCodedValue
    detailed: [PatientCodedValue]!
}

type PatientRace {
    patient: Int!
    id: ID!
    sequence: Int!
    version: Int!
    asOf: DateTime!
    category: PatientCodedValue!
    detailed: [PatientCodedValue]
}

type PatientRaceResults {
    content: [PatientRace]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientProfile {
    id: ID!
    asOf: DateTime!
    local: String!
    version: Int!
    summary(asOf: DateTime): PatientSummary
    names(page: Page): PatientNameResults
    administrative(page: Page): PatientAdministrativeResults
    addresses(page: Page): PatientAddressResults
    phones(page: Page): PatientPhoneResults
    identification(page: Page): PatientIdentificationResults
    races(page: Page): PatientRaceResults
    birth: PatientBirth
    gender: PatientGender
    mortality: PatientMortality
    general: PatientGeneral
    ethnicity: PatientEthnicity
}

extend type Query {
    findPatientProfile(patient: ID!): PatientProfile
}
type PatientTreatment {
  treatment: ID!
  createdOn: DateTime!
  provider: String
  treatedOn: DateTime!
  description: String!
  event: String!
  associatedWith: PatientTreatmentInvestigation!
}

type PatientTreatmentInvestigation {
  id: ID!
  local: String!
  condition: String!
}

type PatientTreatmentResults {
  content: [PatientTreatment]!
  total: Int!
  number: Int!
}

extend type Query {
  findTreatmentsForPatient(patient: ID!, page: Page): PatientTreatmentResults
}
type Query {
    findPatientById(id: ID!): Person
    findAllPatients(page: SortablePage): PersonResults!
    findPatientsByFilter(filter: PersonFilter!, page: SortablePage): PersonResults!
    findPatientsByOrganizationFilter(filter: OrganizationFilter!, page: SortablePage): PersonResults!
    findDocumentsRequiringReviewForPatient(patientId: Int!, page: Page): LabReportResults!
    findOpenInvestigationsForPatient(patientId: Int!, page: Page): InvestigationResults!
}

type Mutation {
    createPatient(patient: PersonInput!): PatientEventResponse!
    updatePatientGeneralInfo(input: GeneralInfoInput!): PatientEventResponse!
    updatePatientSexBirth(input: UpdateSexAndBirthInput!): PatientEventResponse!
    updateMortality(input: MortalityInput!): PatientEventResponse!
    deletePatient(patientId: ID!): PatientEventResponse!
}

type PatientEventResponse {
    requestId: String!
    patientId: ID!
}

type PersonResults {
    content: [Person!]!
    total: Int!
}

input PersonFilter {
    id: ID
    lastName: String
    firstName: String
    race: String
    identification: Identification
    ssn: String
    phoneNumber: String
    email: String
    dateOfBirth: Date
    dateOfBirthOperator: Operator
    gender: Gender
    deceased: Deceased
    address: String
    city: String
    state: String
    country: String
    zip: String
    mortalityStatus: String
    ethnicity: String
    vaccinationId: String
    treatmentId: String
    recordStatus: [RecordStatus!]!
}

type Person {
  id: ID
  nbsEntity: NBSEntity!
  entityIds: [PersonIdentification]
  races: [PersonRace]
  names: [PersonName]
  addReasonCd: String
  addTime: DateTime
  addUserId: ID
  administrativeGenderCd: String
  ageCalc: Int
  ageCalcTime: DateTime
  ageCalcUnitCd: String
  ageCategoryCd: String
  ageReported: String
  ageReportedTime: DateTime
  ageReportedUnitCd: String
  birthGenderCd: Gender
  birthOrderNbr: Int
  birthTime: DateTime
  birthTimeCalc: DateTime
  cd: String
  cdDescTxt: String
  currSexCd: String
  deceasedIndCd: String
  deceasedTime: DateTime
  description: String
  educationLevelCd: String
  educationLevelDescTxt: String
  ethnicGroupInd: String
  lastChgReasonCd: String
  lastChgTime: DateTime
  lastChgUserId: ID
  localId: String
  maritalStatusCd: String
  maritalStatusDescTxt: String
  mothersMaidenNm: String
  multipleBirthInd: String
  occupationCd: String
  preferredGenderCd: String
  primLangCd: String
  primLangDescTxt: String
  recordStatusCd: RecordStatus
  recordStatusTime: DateTime
  statusCd: String
  statusTime: DateTime
  survivedIndCd: String
  userAffiliationTxt: String
  firstNm: String
  lastNm: String
  middleNm: String
  nmPrefix: String
  nmSuffix: String
  preferredNm: String
  hmStreetAddr1: String
  hmStreetAddr2: String
  hmCityCd: String
  hmCityDescTxt: String
  hmStateCd: String
  hmZipCd: String
  hmCntyCd: String
  hmCntryCd: String
  hmPhoneNbr: String
  hmPhoneCntryCd: String
  hmEmailAddr: String
  cellPhoneNbr: String
  wkStreetAddr1: String
  wkStreetAddr2: String
  wkCityCd: String
  wkCityDescTxt: String
  wkStateCd: String
  wkZipCd: String
  wkCntyCd: String
  wkCntryCd: String
  wkPhoneNbr: String
  wkPhoneCntryCd: String
  wkEmailAddr: String
  ssn: String
  medicaidNum: String
  dlNum: String
  dlStateCd: String
  raceCd: String
  raceSeqNbr: Int
  raceCategoryCd: String
  ethnicityGroupCd: String
  ethnicGroupSeqNbr: Int
  adultsInHouseNbr: Int
  childrenInHouseNbr: Int
  birthCityCd: String
  birthCityDescTxt: String
  birthCntryCd: String
  birthStateCd: String
  raceDescTxt: String
  ethnicGroupDescTxt: String
  versionCtrlNbr: Int
  asOfDateAdmin: DateTime
  asOfDateEthnicity: DateTime
  asOfDateGeneral: DateTime
  asOfDateMorbidity: DateTime
  asOfDateSex: DateTime
  electronicInd: String
  personParentUid: personParentUid
  dedupMatchInd: String
  groupNbr: Int
  groupTime: DateTime
  edxInd: String
  speaksEnglishCd: String
  additionalGenderCd: String
  eharsId: String
  ethnicUnkReasonCd: String
  sexUnkReasonCd: String
}

type personParentUid {
    id: ID
}

input PersonInput {
    names: [Name]
    ssn: String
    DateOfBirth: Date
    birthGender: Gender
    currentGender: Gender
    deceased: Deceased
    deceasedTime: DateTime
    maritalStatus: String
    addresses: [PostalAddress]
    phoneNumbers: [PhoneNumber]
    emailAddresses: [String]
    identifications: [Identification]
    ethnicityCode: String
    raceCodes: [String]
    asOf: DateTime
    comments: String
    mothersMaidenName: String
    adultNbrInHouse: Int
    childrenNbrinHouse: Int
    primaryOccupation: String
    highestEducationLvl: String
    primaryLang: String
    speaksEnglish: String
    hIVCaseId: String
}

input GeneralInfoInput {
    patientId: ID!
    asOf: DateTime
    maritalStatus: String
    mothersMaidenName: String
    adultsInHouseNumber: Int
    childrenInHouseNumber: Int
    occupationCode: String
    educationLevelCode: String
    primaryLanguageCode: String
    speaksEnglishCode: String
    eharsId: String
}

input MortalityInput {
    patientId: ID!
    asOf: DateTime
    deceased: Deceased
    deceasedTime: DateTime
    cityOfDeath: String
    stateOfDeath: String
    countyOfDeath: String
    countryOfDeath: String
}

input UpdateSexAndBirthInput {
    patientId: ID!
    asOf: DateTime
    dateOfBirth: Date
    birthGender: Gender
    currentGender: Gender
    additionalGender: String
    transGenderInfo: String
    birthCity: String
    birthCntry: String
    birthState: String
    birthOrderNbr: Int
    multipleBirth: String
    sexUnknown: String
    currentAge: String
    ageReportedTime: DateTime
}

input Name {
    firstName: String
    middleName: String
    lastName: String
    suffix: Suffix
    nameUseCd: NameUseCd!
}

input PostalAddress {
    streetAddress1: String
    streetAddress2: String
    city: String
    stateCode: String
    countyCode: String
    countryCode: String
    zip: String
    censusTract: String
}

input PhoneNumber {
    number: String!
    extension: String
    phoneType: PhoneType!
}

input Identification {
    identificationNumber: String!
    identificationType: String!
    assigningAuthority: String
}

enum NameUseCd {
    AD # Adopted Name
    AL # Alias Name
    A # Artist/Stage Name
    S # Coded Pseudo
    I # Indigenous/Tribal
    L # Legal
    C # License
    M # Maiden Name
    MO # Mother's Name
    BR # Name at Birth
    P # Name of Partner/Spouse
    R # Religious
    U
}

enum Suffix {
    ESQ
    II
    III
    IV
    JR
    SR
    V
}

enum PhoneType {
    HOME
    CELL
    WORK
}

enum Gender {
    M
    F
    U
}

enum Deceased {
    Y
    N
    UNK
}

enum Operator {
    EQUAL
    BEFORE
    AFTER
}

enum SortDirection {
    ASC
    DESC
}

type PersonIdentification {
    typeDescTxt: String
    typeCd: String
    rootExtensionTxt: String
    assigningAuthorityCd: String
    assigningAuthorityDescTxt: String
}

type PersonRace {
  raceCd: String 
  recordStatusCd: String
}

type PersonName {
    firstNm: String
    middleNm: String
    lastNm: String
    nmSuffix: String
    nmPrefix: String
}

type Locator {
    emailAddress: String
    extenstionTxt: String
    phoneNbrTxt: String
    urlAddress: String
    censusBlockCd: String
    censusMinorCivilDivisionCd: String
    censusTrackCd: String
    cityCd: String
    cityDescTxt: String
    cntryCd: String
    cntryDescTxt: String
    cntyCd: String
    cntyDescTxt: String
    msaCongressDistrictCd: String
    regionDistrictCd: String
    stateCd: String
    streetAddr1: String
    streetAddr2: String
    zipCd: String
    geocodeMatchInd: String
    withinCityLimitsInd: String
    censusTract: String
}

type LocatorParticipations {
    classCd: String
    locator: Locator
}

type NBSEntity {
    entityLocatorParticipations: [LocatorParticipations]
}
extend type Query {
  findPlaceById(id: ID!): Place
  findAllPlaces(page: Page): [Place]!
  findPlacesByFilter(filter: PlaceFilter!, page: Page): [Place]!
}

input PlaceFilter {
  id: ID
  description: String
  nm: String
  streetAddr1: String
  streetAddr2: String
  cityCd: String
  cityDescTxt: String
  stateCd: String
  zipCd: String
}

type Place {
  id: ID
  addReasonCd: String
  addTime: DateTime
  addUserId: Int
  cd: String
  cdDescTxt: String
  description: String
  durationAmt: String
  durationUnitCd: String
  fromTime: DateTime
  lastChgReasonCd: String
  lastChgTime: DateTime
  lastChgUserId: Int
  localId: String
  nm: String
  recordStatusCd: String
  recordStatusTime: DateTime
  statusCd: String
  statusTime: DateTime
  toTime: DateTime
  userAffiliationTxt: String
  streetAddr1: String
  streetAddr2: String
  cityCd: String
  cityDescTxt: String
  stateCd: String
  zipCd: String
  cntyCd: String
  cntryCd: String
  phoneNbr: String
  phoneCntryCd: String
  versionCtrlNbr: Int
}
extend type Query {
  findAllProgramAreas(page: Page): [ProgramAreaCode]!
}

type ProgramAreaCode {
  id: String!
  progAreaDescTxt: String
  nbsUid: ID
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  codeSeq: Int
}
extend type Query {
    findAllRaceValues(page: Page): RaceResults!
}

type RaceResults {
    content: [Race]!
    total: Int!
}

type Race {
    id: RaceId!
    codeDescTxt: String!
}

type RaceId {
    code: String!
}
scalar Date
scalar DateTime

input Page {
  pageSize: Int!
  pageNumber: Int!
}

input SortablePage {
  pageSize: Int
  pageNumber: Int
  sortField: SortField
  sortDirection: SortDirection
}

type PersonParticipation {
  actUid: Int!
  localId: String
  typeCd: String
  entityId: Int!
  subjectClassCd: String
  participationRecordStatus: String
  typeDescTxt: String
  participationLastChangeTime: DateTime
  firstName: String
  lastName: String
  birthTime: DateTime
  currSexCd: String
  personCd: String!
  personParentUid: Int
  personRecordStatus: String!
  personLastChangeTime: DateTime
}

type OrganizationParticipation {
  actUid: Int
  typeCd: String
  entityId: Int
  subjectClassCd: String
  typeDescTxt: String
  participationRecordStatus: String
  participationLastChangeTime: DateTime
  name: String
  organizationLastChangeTime: DateTime
}

enum SortField {
  lastNm
  birthTime
}

enum RecordStatus {
  ACTIVE
  INACTIVE
  LOG_DEL
  SUPERCEDED
}

enum PregnancyStatus {
  YES
  NO
  UNKNOWN
}
extend type Query {
    findSnomedCodedResults(searchText: String!, page: Page): SnomedCodedResults!
}

type SnomedCodedResults {
    content: [SnomedCode]!
    total: Int!
}

type SnomedCode {
    id: String
    snomedDescTxt: String
}
extend type Query {
  findAllStateCodes(page: Page): [StateCode]!
}

type StateCode {
  id: String
  assigningAuthorityCd: String
  assigningAuthorityDescTxt: String
  stateNm: String
  codeDescTxt: String
  effectiveFromTime: DateTime
  effectiveToTime: DateTime
  excludedTxt: String
  indentLevelNbr: Int
  isModifiableInd: String
  keyInfoTxt: String
  parentIsCd: String
  statusCd: String
  statusTime: DateTime
  codeSetNm: String
  seqNum: Int
  nbsUid: Int
  sourceConceptId: String
  codeSystemCd: String
  codeSystemDescTxt: String
}
extend type Query {
    findAllUsers(page: Page): UserResults!
}

type UserResults {
    content: [User]!
    total: Int!
}

type User {
    nedssEntryId: ID!
    userId: String!
    userFirstNm: String!
    userLastNm: String!
    recordStatusCd: RecordStatus
}
