import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    alias libs.plugins.springBoot
    alias libs.plugins.springDependencies
}
group = 'gov.cdc'
version = '1.0.0-SNAPSHOT'

apply from: "${rootDir}/gradle/cucumber-logging.gradle"

bootJar {
    manifest {
        attributes 'API-Version': archiveVersion
    }
}

jar {
    //  packages the application and spring into one jar
    enabled = false
}

dependencies {

    implementation project(':accumulation')
    implementation project(':database-entities')
    implementation project(':event-schema')
    implementation project(':authentication')
    implementation project(':id-generator')

    //  feature modules
    implementation project(':me-api')

    // configuration module
    implementation project(':configuration-api')

    implementation platform(SpringBootPlugin.BOM_COORDINATES)

    // core
    implementation libs.bundles.jpa
    annotationProcessor libs.springBoot.jpa

    implementation libs.bundles.security
    implementation libs.springBoot.web

    // graphql
    implementation libs.springBoot.graphql
    // database
    implementation libs.mssql.jdbc

    // querydsl
    implementation libs.bundles.queryDSL
    annotationProcessor(variantOf(libs.queryDSL.apt) { classifier('jpa') })

    // blazebit for querydsl paging
    implementation libs.bundles.blaze.persistence.queryDSL
    implementation libs.bundles.jackson

    // elasticsearch
    implementation libs.bundles.elasticsearch

    // swagger
    implementation libs.bundles.swagger

    // lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    // itext pdf generation
    implementation "com.itextpdf:itextpdf:5.5.13.3"

    implementation "commons-codec:commons-codec:1.15"

    implementation libs.bundles.jackson

    // Kafka
    implementation libs.spring.kafka

    // testing
    testImplementation project(':testing:support')
    testImplementation project(':testing:identity')
    testImplementation project(':testing:auth')
    testImplementation project(':testing:auth-cucumber')
    testImplementation project(':testing:http-interaction')

    testImplementation libs.bundles.cucumber

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation libs.bundles.testing
    testImplementation libs.spring.test
    testImplementation libs.spring.security.test
    testImplementation libs.bundles.testcontainers.elasticsearch
    testImplementation libs.bundles.javafaker
    testImplementation libs.spring.kafka.test

    testImplementation libs.awaitility

    //  Required for testing multipart form-data from Classic NBS
    testImplementation "commons-fileupload:commons-fileupload:1.5"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    //  Cucumber only supports the JUnit Platform
    useJUnitPlatform()
    // always re-run tests
    test.outputs.upToDateWhen { false }
    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
    // support Github actions overriding the configured database image
    if (System.getProperty("testing.database.image") != null) {
        systemProperty "testing.database.image", System.getProperty("testing.database.image")
    }
}

tasks.withType(JavaExec).configureEach {

    debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(5005)
    }
}

processResources {
    from("../modernization-ui/build") {
        into "static"
    }
}

compileJava.mustRunAfter(":database-entities:build")
compileJava.mustRunAfter(":event-schema:build")
compileJava.mustRunAfter(":authentication:build")
compileJava.mustRunAfter(":id-generator:build")
