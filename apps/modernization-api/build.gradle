plugins {
    id 'distribution'
    alias libs.plugins.springBoot
}
apply from: "${rootDir}/gradle/cucumber-logging.gradle"

group = 'gov.cdc.nbs.modernization'
version = '1.0.0-SNAPSHOT'

springBoot {
    buildInfo {
        properties {
            additional = [
                    'commit': rootProject.ext.commit
            ]
        }
    }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

dependencies {

    implementation(project(':accumulation'))
    implementation(project(':database-entities'))
    implementation(project(':event-schema'))
    implementation(project(':authentication'))
    implementation(project(':id-generator'))
    implementation(project(':libs:web'))
    implementation(project(':libs:classic-interaction'))

    //  feature modules
    implementation project(':me-api')
    implementation project(':configuration-api')
    implementation project(':options-api')

    implementation libs.snake.yaml
    implementation libs.guava

    implementation libs.mssql.jdbc
    implementation libs.bundles.jpa
    annotationProcessor libs.springBoot.jpa
    implementation(variantOf(libs.queryDSL.jpa) { classifier("jakarta") })
    annotationProcessor(variantOf(libs.queryDSL.apt) { classifier("jakarta") })

    implementation libs.bundles.jackson

    implementation libs.bundles.security
    implementation libs.springBoot.web

    // graphql
    implementation libs.bundles.graphql

    // elasticsearch
    implementation libs.bundles.elasticsearch

    // swagger
    implementation libs.bundles.swagger

    // lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    // itext pdf generation
    implementation libs.itextpdf
    implementation "commons-codec:commons-codec:1.15"

    implementation libs.bundles.jackson

    // Kafka
    implementation libs.spring.kafka

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

testing {
    suites {
        test {
            useJUnitJupiter()

            dependencies {
                implementation project(':testing:support')
                implementation project(':testing:identity')
                implementation project(':testing:auth')
                implementation project(':testing:auth-cucumber')
                implementation project(':testing:http-interaction')
                implementation project(':testing:classic-interaction-cucumber')

                implementation.bundle(libs.bundles.cucumber)

                compileOnly libs.lombok
                annotationProcessor libs.lombok

                implementation.bundle(libs.bundles.testing)
                implementation libs.spring.test
                implementation libs.spring.security.test
                implementation.bundle(libs.bundles.testcontainers.elasticsearch)
                implementation 'net.datafaker:datafaker:2.0.2'
                implementation libs.spring.kafka.test

                implementation libs.awaitility

            }

            targets {
                configureEach {
                    testTask.configure {
                        outputs.upToDateWhen { false }

                        systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
                        // support Github actions overriding the configured database image
                        if (System.getProperty("testing.database.image") != null) {
                            systemProperty "testing.database.image", System.getProperty("testing.database.image")
                        }
                    }
                }
            }
        }
    }
}


tasks.withType(JavaExec).configureEach {

    debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(5005)
    }
}

processResources {
    from("../modernization-ui/build") {
        into "static"
    }
}

bootRun {
    systemProperty('spring.profiles.active', 'default,development')
}

distributions {
    main {
        contents {
            from jar
            into('lib') {
                from(project.configurations.runtimeClasspath)
            }
        }
    }
}
