extend type Query {
  findLabReportsForPatient(personUid: Int!, page: Page): PatientLabReportResults
}

type PatientLabReportResults {
  content: [PatientLabReport]!
  total: Int!
  number: Int!
}

input PatientLabReportFilter {
  patientId: Int
  programAreas: [String]
  jurisdictions: [ID]
  pregnancyStatus: PregnancyStatus
  eventId: LabReportEventId
  eventDate: LaboratoryEventDateSearch
  entryMethods: [EntryMethod]
  enteredBy: [UserType]
  eventStatus: [EventStatus]
  processingStatus: [LaboratoryReportStatus]
  createdBy: ID
  lastUpdatedBy: ID
  providerSearch: LabReportProviderSearch
  resultedTest: String
  codedResult: String
  orderingLabId: ID
  orderingProviderId: ID
}

type PatientLabReport {
  id: String!
  observationUid: Int!
  addTime: DateTime!
  effectiveFromTime: DateTime
  programAreaCd: String!
  jurisdictionCodeDescTxt: String!
  localId: String!
  electronicInd: String
  associatedInvestigations: [AssociatedInvestigation2!]!
  personParticipations: [PersonParticipation2!]!
  organizationParticipations: [OrganizationParticipation2!]!
  observations: [Observation2!]!
}

type PersonParticipation2 {
  typeCd: String!
  personCd: String!
  firstName: String
  lastName: String
}

type OrganizationParticipation2 {
  typeCd: String
  name: String
}

type MaterialParticipation2 {
  actUid: Int!
  typeCd: String!
  entityId: String
  subjectClassCd: String!
  typeDescTxt: String
  participationRecordStatus: String
  participationLastChangeTime: DateTime
  cd: String!
  cdDescTxt: String!
}

type Observation2 {
  domainCd: String!
  cdDescTxt: String!
  displayName: String
}

type AssociatedInvestigation2 {
  publicHealthCaseUid: Int!
  cdDescTxt: String!
  localId: String!
}
