type NamedContact {
  id: ID!
  name: String!
}

type TracedCondition {
  id: String,
  description: String
}

type PatientContactInvestigation {
  id: ID!
  local: String!
  condition: String!
}

type NamedByPatient {
  contactRecord: ID!
  createdOn: DateTime!
  condition: TracedCondition!
  contact: NamedContact!
  namedOn: DateTime!
  priority: String
  disposition: String
  event: String!
  associatedWith: PatientContactInvestigation
}

type ContactsNamedByPatientResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}

type NamedByContact {
  contactRecord: ID!
  createdOn: DateTime!
  contact: NamedContact!
  namedOn: DateTime!
  condition: TracedCondition!
  event: String!
  associatedWith: PatientContactInvestigation
}

type PatientNamedByContactResults {
  content: [NamedByPatient]!
  total: Int!
  number: Int!
}


extend type Query {

  findContactsNamedByPatient(patient:ID!, page: Page) : ContactsNamedByPatientResults

  findPatientNamedByContact(patient:ID!, page: Page) : PatientNamedByContactResults
}
