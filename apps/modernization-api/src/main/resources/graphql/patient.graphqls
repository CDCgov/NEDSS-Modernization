type Query {
    findPatientById(id: ID!): Person
    findAllPatients(page: SortablePage): PersonResults!
    findPatientsByFilter(
        filter: PersonFilter!
        page: SortablePage
    ): PersonResults!
    findPatientsByOrganizationFilter(
        filter: OrganizationFilter!
        page: SortablePage
    ): PersonResults!
    findDocumentsRequiringReviewForPatient(
        patientId: Int!
        page: Page
    ): LabReportResults!
    findOpenInvestigationsForPatient(
        patientId: Int!
        page: Page
    ): InvestigationResults!
}

type PatientDeleteSuccessful {
    patient: Int!
}

type PatientDeleteFailed {
    patient: Int!
    reason: String!
}

union PatientDeleteResult = PatientDeleteSuccessful | PatientDeleteFailed

type Mutation {
    createPatient(patient: PersonInput!): PatientCreatedResponse!
    deletePatient(patient: ID!): PatientDeleteResult!
    updatePatientGeneralInfo(input: GeneralInfoInput!): PatientEventResponse!
    updatePatientSexBirth(input: UpdateSexAndBirthInput!): PatientEventResponse!
    updateMortality(input: MortalityInput!): PatientEventResponse!
    addPatientAddress(input: AddressInput!): PatientEventResponse!
    addPatientEmail(input: EmailInput!): PatientEventResponse!
    addPatientIdentification(input: IdentificationInput!): PatientEventResponse!
    addPatientName(input: NameInput!): PatientEventResponse!
    addPatientPhone(input: PhoneInput!): PatientEventResponse!
    updateAdministrative(input: AdministrativeInput!): PatientEventResponse!
    updatePatientAddress(input: AddressInput!): PatientEventResponse!
    updatePatientEmail(input: EmailInput!): PatientEventResponse!
    updatePatientIdentification(
        input: IdentificationInput!
    ): PatientEventResponse!
    updatePatientName(input: NameInput!): PatientEventResponse!
    updatePatientPhone(input: PhoneInput!): PatientEventResponse!
    deletePatientAddress(
        patientId: Int!
        personSeqNum: Int!
    ): PatientEventResponse!
    deletePatientEmail(patientId: Int!, personSeqNum: Int!): PatientEventResponse!
    deletePatientIdentification(
        patientId: Int!
        entitySeqNum: Int!
    ): PatientEventResponse!
    deletePatientName(patientId: Int!, personSeqNum: Int!): PatientEventResponse!
    deletePatientPhone(patientId: Int!, personSeqNum: Int!): PatientEventResponse!
    updateEthnicity(input: EthnicityInput!): PatientEthnicityChangeResult!
    addPatientRace(input: RaceInput!): PatientRaceChangeResult!
    updatePatientRace(input: RaceInput!): PatientRaceChangeResult!
    deletePatientRace(input: DeletePatientRace!): PatientRaceChangeResult!
}

type PatientCreatedResponse {
    id: Int!
    shortId: Int!
}

type PatientEventResponse {
    requestId: String!
    patientId: ID!
}

type PersonResults {
    content: [Person!]!
    total: Int!
}

input IdentificationCriteria {
    identificationNumber: String!
    identificationType: String!
    assigningAuthority: String
}

input PersonFilter {
    id: ID
    lastName: String
    firstName: String
    race: String
    identification: IdentificationCriteria
    ssn: String
    phoneNumber: String
    email: String
    dateOfBirth: Date
    dateOfBirthOperator: Operator
    gender: Gender
    deceased: Deceased
    address: String
    city: String
    state: String
    country: String
    zip: String
    mortalityStatus: String
    ethnicity: String
    vaccinationId: String
    treatmentId: String
    recordStatus: [RecordStatus!]!
}

type Person {
    shortId: Int
    id: ID
    nbsEntity: NBSEntity!
    entityIds: [PersonIdentification]
    races: [PersonRace]
    names: [PersonName]
    addReasonCd: String
    addTime: DateTime
    addUserId: ID
    administrativeGenderCd: String
    ageCalc: Int
    ageCalcTime: DateTime
    ageCalcUnitCd: String
    ageCategoryCd: String
    ageReported: String
    ageReportedTime: DateTime
    ageReportedUnitCd: String
    birthGenderCd: Gender
    birthOrderNbr: Int
    birthTime: DateTime
    birthTimeCalc: DateTime
    cd: String
    cdDescTxt: String
    currSexCd: String
    deceasedIndCd: String
    deceasedTime: DateTime
    description: String
    educationLevelCd: String
    educationLevelDescTxt: String
    ethnicGroupInd: String
    lastChgReasonCd: String
    lastChgTime: DateTime
    lastChgUserId: ID
    localId: String
    maritalStatusCd: String
    maritalStatusDescTxt: String
    mothersMaidenNm: String
    multipleBirthInd: String
    occupationCd: String
    preferredGenderCd: String
    primLangCd: String
    primLangDescTxt: String
    recordStatusCd: RecordStatus
    recordStatusTime: DateTime
    statusCd: String
    statusTime: DateTime
    survivedIndCd: String
    userAffiliationTxt: String
    firstNm: String
    lastNm: String
    middleNm: String
    nmPrefix: String
    nmSuffix: String
    preferredNm: String
    hmStreetAddr1: String
    hmStreetAddr2: String
    hmCityCd: String
    hmCityDescTxt: String
    hmStateCd: String
    hmZipCd: String
    hmCntyCd: String
    hmCntryCd: String
    hmPhoneNbr: String
    hmPhoneCntryCd: String
    hmEmailAddr: String
    cellPhoneNbr: String
    wkStreetAddr1: String
    wkStreetAddr2: String
    wkCityCd: String
    wkCityDescTxt: String
    wkStateCd: String
    wkZipCd: String
    wkCntyCd: String
    wkCntryCd: String
    wkPhoneNbr: String
    wkPhoneCntryCd: String
    wkEmailAddr: String
    ssn: String
    medicaidNum: String
    dlNum: String
    dlStateCd: String
    raceCd: String
    raceSeqNbr: Int
    raceCategoryCd: String
    ethnicityGroupCd: String
    ethnicGroupSeqNbr: Int
    adultsInHouseNbr: Int
    childrenInHouseNbr: Int
    birthCityCd: String
    birthCityDescTxt: String
    birthCntryCd: String
    birthStateCd: String
    raceDescTxt: String
    ethnicGroupDescTxt: String
    versionCtrlNbr: Int
    asOfDateAdmin: DateTime
    asOfDateEthnicity: DateTime
    asOfDateGeneral: DateTime
    asOfDateMorbidity: DateTime
    asOfDateSex: DateTime
    electronicInd: String
    personParentUid: personParentUid
    dedupMatchInd: String
    groupNbr: Int
    groupTime: DateTime
    edxInd: String
    speaksEnglishCd: String
    additionalGenderCd: String
    eharsId: String
    ethnicUnkReasonCd: String
    sexUnkReasonCd: String
}

type personParentUid {
    id: ID
}

input NewPatientName {
    first: String
    middle: String
    last: String
    suffix: Suffix
    use: NameUseCd!
}

input NewPatientAddress {
    streetAddress1: String
    streetAddress2: String
    city: String
    state: String
    county: String
    country: String
    zip: String
    censusTract: String
}

input NewPatientPhoneNumber {
    number: String!
    extension: String
    type: String!
    use: String!
}

input NewPatientIdentification {
    value: String!
    type: String!
    authority: String
}

input PersonInput {
    names: [NewPatientName]
    dateOfBirth: Date
    birthGender: Gender
    currentGender: Gender
    deceased: Deceased
    deceasedTime: DateTime
    maritalStatus: String
    addresses: [NewPatientAddress]
    phoneNumbers: [NewPatientPhoneNumber]
    emailAddresses: [String]
    identifications: [NewPatientIdentification]
    ethnicity: String
    races: [String]
    asOf: DateTime
    comments: String
    stateHIVCase: String
}

input GeneralInfoInput {
    patientId: ID!
    asOf: DateTime
    maritalStatus: String
    mothersMaidenName: String
    adultsInHouseNumber: Int
    childrenInHouseNumber: Int
    occupationCode: String
    educationLevelCode: String
    primaryLanguageCode: String
    speaksEnglishCode: String
    eharsId: String
}

input AddressInput {
    patientId: ID!
    id: Int
    streetAddress1: String
    streetAddress2: String
    city: String
    stateCode: String
    countyCode: String
    countryCode: String
    zip: String
    censusTract: String
}

input AdministrativeInput {
    patientId: ID!
    description: String
}

input EmailInput {
    patientId: ID!
    id: Int
    emailAddress: String
}

input EthnicityInput {
    patient: String!
    asOf: DateTime!
    ethnicGroup: String
    unknownReason: String
    detailed: [String]
}

type PatientEthnicityChangeResult {
    patient: String!
}

input RaceInput {
    patient: ID!
    asOf: DateTime
    category: String!
    detailed: [String]
}

input DeletePatientRace {
    patient: Int!
    category: String!
}

type PatientRaceChangeResult {
    patient: Int!
}

input IdentificationInput {
    patientId: ID!
    id: Int
    identificationNumber: String!
    identificationType: String!
    assigningAuthority: String
}

input NameInput {
    patientId: ID!
    personNameSeq: Int
    firstName: String
    middleName: String
    lastName: String
    suffix: Suffix
    nameUseCd: NameUseCd!
}

input PhoneInput {
    patientId: ID!
    id: Int
    number: String
    extension: String
    phoneType: PhoneType!
}

input MortalityInput {
    patientId: ID!
    asOf: DateTime
    deceased: Deceased
    deceasedTime: DateTime
    cityOfDeath: String
    stateOfDeath: String
    countyOfDeath: String
    countryOfDeath: String
}

input UpdateSexAndBirthInput {
    patientId: ID!
    asOf: DateTime
    dateOfBirth: Date
    birthGender: Gender
    currentGender: Gender
    additionalGender: String
    transGenderInfo: String
    birthCity: String
    birthCntry: String
    birthState: String
    birthOrderNbr: Int
    multipleBirth: String
    sexUnknown: String
    currentAge: String
    ageReportedTime: DateTime
}

enum NameUseCd {
    AD # Adopted Name
    AL # Alias Name
    A # Artist/Stage Name
    S # Coded Pseudo
    I # Indigenous/Tribal
    L # Legal
    C # License
    M # Maiden Name
    MO # Mother's Name
    BR # Name at Birth
    P # Name of Partner/Spouse
    R # Religious
    U
}

enum Suffix {
    ESQ
    II
    III
    IV
    JR
    SR
    V
}

enum PhoneType {
    HOME
    CELL
    WORK
}

enum Gender {
    M
    F
    U
}

enum Deceased {
    Y
    N
    UNK
}

enum Operator {
    EQUAL
    BEFORE
    AFTER
}

enum SortDirection {
    ASC
    DESC
}

type PersonIdentification {
    typeDescTxt: String
    typeCd: String
    rootExtensionTxt: String
    assigningAuthorityCd: String
    assigningAuthorityDescTxt: String
}

type PersonRace {
    raceCd: String
    recordStatusCd: String
}

type PersonName {
    firstNm: String
    middleNm: String
    lastNm: String
    nmSuffix: String
    nmPrefix: String
}

type Locator {
    emailAddress: String
    extenstionTxt: String
    phoneNbrTxt: String
    urlAddress: String
    censusBlockCd: String
    censusMinorCivilDivisionCd: String
    censusTrackCd: String
    cityCd: String
    cityDescTxt: String
    cntryCd: String
    cntryDescTxt: String
    cntyCd: String
    cntyDescTxt: String
    msaCongressDistrictCd: String
    regionDistrictCd: String
    stateCd: String
    streetAddr1: String
    streetAddr2: String
    zipCd: String
    geocodeMatchInd: String
    withinCityLimitsInd: String
    censusTract: String
}

type LocatorParticipations {
    classCd: String
    locator: Locator
}

type NBSEntity {
    entityLocatorParticipations: [LocatorParticipations]
}
