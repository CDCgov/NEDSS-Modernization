type PatientDeleteSuccessful {
    patient: Int!
}

type PatientDeleteFailed {
    patient: Int!
    reason: String!
}

union PatientDeleteResult = PatientDeleteSuccessful | PatientDeleteFailed

type Mutation {
    createPatient(patient: PersonInput!): PatientCreatedResponse!
    deletePatient(patient: ID!): PatientDeleteResult!
    updatePatientGeneralInfo(input: GeneralInfoInput!): PatientGeneralChangeResult!
    updatePatientBirthAndGender(input: UpdateBirthAndGenderInput!): PatientBirthAndGenderChangeResult!
    updatePatientMortality(input: MortalityInput!): PatientMortalityChangeResult!
    deletePatientEmail(patientId: Int!, personSeqNum: Int!): PatientUpdateResponse!
    updateEthnicity(input: EthnicityInput!): PatientEthnicityChangeResult!
    addPatientRace(input: RaceInput!): PatientRaceAddResult!
    updatePatientRace(input: RaceInput!): PatientRaceChangeSuccessful!
    deletePatientRace(input: DeletePatientRace!): PatientRaceChangeSuccessful!
    addPatientName(input: NewPatientNameInput!): PatientNameChangeResult!
    updatePatientName(input: UpdatePatientNameInput!): PatientNameChangeResult!
    deletePatientName(input: DeletePatientNameInput!): PatientNameChangeResult!
    addPatientAddress(input: NewPatientAddressInput!): PatientAddressChangeResult!
    updatePatientAddress(input: UpdatePatientAddressInput!): PatientAddressChangeResult!
    deletePatientAddress(input: DeletePatientAddressInput): PatientAddressChangeResult!
    addPatientPhone(input: NewPatientPhoneInput!): PatientPhoneChangeResult!
    updatePatientPhone(input: UpdatePatientPhoneInput!): PatientPhoneChangeResult!
    deletePatientPhone(input: DeletePatientPhoneInput): PatientPhoneChangeResult!
    addPatientIdentification(input: NewPatientIdentificationInput!): PatientIdentificationChangeResult!
    updatePatientIdentification(input: UpdatePatientIdentificationInput!): PatientIdentificationChangeResult!
    deletePatientIdentification(input: DeletePatientIdentificationInput): PatientIdentificationChangeResult!
}

type PatientCreatedResponse {
    id: Int!
    shortId: Int!
}

type PatientUpdateResponse {
    patientId: ID!
}

enum Suffix {
    ESQ
    II
    III
    IV
    JR
    SR
    V
}

enum NameUseCd {
    AD # Adopted Name
    AL # Alias Name
    A # Artist/Stage Name
    S # Coded Pseudo
    I # Indigenous/Tribal
    L # Legal
    C # License
    M # Maiden Name
    MO # Mother's Name
    BR # Name at Birth
    P # Name of Partner/Spouse
    R # Religious
    U
}

input NewPatientName {
    first: String
    middle: String
    last: String
    suffix: Suffix
    use: NameUseCd!
}

input NewPatientAddress {
    streetAddress1: String
    streetAddress2: String
    city: String
    state: String
    county: String
    country: String
    zip: String
    censusTract: String
}

input NewPatientPhoneNumber {
    number: String!
    extension: String
    type: String!
    use: String!
}

input NewPatientIdentification {
    value: String!
    type: String!
    authority: String
}

input PersonInput {
    names: [NewPatientName]
    dateOfBirth: Date
    birthGender: Gender
    currentGender: Gender
    deceased: Deceased
    deceasedTime: Date
    maritalStatus: String
    addresses: [NewPatientAddress!]
    phoneNumbers: [NewPatientPhoneNumber!]
    emailAddresses: [String]
    identifications: [NewPatientIdentification!]
    ethnicity: String
    races: [String]
    asOf: Date
    comments: String
    stateHIVCase: String
}

input GeneralInfoInput {
    patient: Int!
    asOf: Date!
    maritalStatus: String
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: String
    educationLevel: String
    primaryLanguage: String
    speaksEnglish: String
    stateHIVCase: String
}

type PatientGeneralChangeResult {
    patient: Int!
}

input MortalityInput {
    patient: Int!
    asOf: Date!
    deceased: String
    deceasedOn: Date
    city: String
    state: String
    county: String
    country: String
}

type PatientMortalityChangeResult {
    patient: Int!
}

input AdministrativeInput {
    patient: Int!
    asOf: Date!
    comment: String
}

type PatientAdministrativeChangeResult {
    patient: Int!
}


input EthnicityInput {
    patient: String!
    asOf: Date!
    ethnicGroup: String
    unknownReason: String
    detailed: [String!]
}

type PatientEthnicityChangeResult {
    patient: String!
}

input RaceInput {
    patient: Int!
    asOf: Date
    category: String!
    detailed: [String!]
}

input DeletePatientRace {
    patient: Int!
    category: String!
}

type PatientRaceChangeSuccessful {
    patient: Int!
}

type PatientRaceChangeFailureExistingCategory {
    patient: Int!
    category: String!
}

union PatientRaceAddResult = PatientRaceChangeSuccessful | PatientRaceChangeFailureExistingCategory

input NewPatientNameInput {
    patient: Int!
    type: String!
    asOf: Date!
    prefix: String
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: String
    degree: String
}

input UpdatePatientNameInput {
    patient: Int!
    sequence: Int!
    type: String!
    asOf: Date!
    prefix: String
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: String
    degree: String
}

input DeletePatientNameInput {
    patient: Int!
    sequence: Int!
}

type PatientNameChangeResult {
    patient: Int!
    sequence: Int!
}

input NewPatientAddressInput {
    patient: Int!
    asOf: Date!
    type: String!
    use: String!
    address1: String
    address2: String
    city: String
    state: String
    zipcode: String
    county: String
    censusTract: String
    country: String
    comment: String
}

input UpdatePatientAddressInput {
    patient: Int!
    id: Int!
    asOf: Date!
    type: String!
    use: String!
    address1: String
    address2: String
    city: String
    state: String
    zipcode: String
    county: String
    censusTract: String
    country: String
    comment: String
}

input DeletePatientAddressInput {
    patient: Int!
    id: Int!
}

type PatientAddressChangeResult {
    patient: Int!
    id: Int!
}

input NewPatientPhoneInput {
    patient: Int!
    asOf: Date!
    type: String!
    use: String!
    countryCode: String
    number: String
    extension: String
    email:String
    url:String
    comment: String
}

input UpdatePatientPhoneInput {
    patient: Int!
    id: Int!
    asOf: Date!
    type: String!
    use: String!
    countryCode: String
    number: String
    extension: String
    email:String
    url:String
    comment: String
}

input DeletePatientPhoneInput {
    patient: Int!
    id: Int!
}

type PatientPhoneChangeResult {
    patient: Int!
    id: Int!
}

input NewPatientIdentificationInput {
    patient: Int!
    asOf: Date!
    type: String!
    authority: String
    value: String!
}

input UpdatePatientIdentificationInput {
    patient: Int!
    sequence: Int!
    asOf: Date!
    type: String!
    authority: String
    value: String!
}

input DeletePatientIdentificationInput {
    patient: Int!
    sequence: Int!
}

type PatientIdentificationChangeResult {
    patient: Int!
    sequence: Int!
}

input UpdateBirthAndGenderInput {
    patient: ID!
    asOf: Date!
    birth: UpdateBirthInput
    gender: UpdateGenderInput
}

input UpdateBirthInput {
    bornOn: Date
    gender:String
    multipleBirth: String
    birthOrder: Int
    city: String
    state: String
    county: String
    country: String
}

input UpdateGenderInput {
    current: String
    unknownReason: String
    preferred: String
    additional: String
}

type PatientBirthAndGenderChangeResult {
    patient: Int!
}
