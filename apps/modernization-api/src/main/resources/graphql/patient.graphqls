type Query {
  findPatientById(id: ID!): Person
  findAllPatients(page: SortablePage): PersonResults!
  findPatientsByFilter(
    filter: PersonFilter!
    page: SortablePage
  ): PersonResults!
  findPatientsByOrganizationFilter(
    filter: OrganizationFilter!
    page: SortablePage
  ): PersonResults!
  findDocumentsRequiringReviewForPatient(
    patientId: Int!
    page: Page
  ): LabReportResults!
  findOpenInvestigationsForPatient(
    patientId: Int!
    page: Page
  ): InvestigationResults!
}

type Mutation {
  createPatient(patient: PersonInput!): String!
  updatePatientGeneralInfo(id: ID!, patient: PersonInput!): UpdateResult
  updatePatientSexBirth(id: ID!, patient: UpdateSexAndBirthInput!): UpdateResult
  updateMortality(id: ID!, patient: MortalityInput!): UpdateResult
}

type UpdateResult {
  requestId: String
}

type PersonResults {
  content: [Person!]!
  total: Int!
}

input PersonFilter {
  id: ID
  lastName: String
  firstName: String
  race: String
  identification: Identification
  ssn: String
  phoneNumber: String
  email: String
  dateOfBirth: Date
  dateOfBirthOperator: Operator
  gender: Gender
  deceased: Deceased
  address: String
  city: String
  state: String
  country: String
  zip: String
  mortalityStatus: String
  ethnicity: String
  vaccinationId: String
  treatmentId: String
  recordStatus: [RecordStatus!]!
}

type Person {
  id: ID
  nbsEntity: NBSEntity!
  entityIds: [PersonIdentification]
  names: [PersonName]
  addReasonCd: String
  addTime: DateTime
  addUserId: ID
  administrativeGenderCd: String
  ageCalc: Int
  ageCalcTime: DateTime
  ageCalcUnitCd: String
  ageCategoryCd: String
  ageReported: String
  ageReportedTime: DateTime
  ageReportedUnitCd: String
  birthGenderCd: Gender
  birthOrderNbr: Int
  birthTime: DateTime
  birthTimeCalc: DateTime
  cd: String
  cdDescTxt: String
  currSexCd: String
  deceasedIndCd: String
  deceasedTime: DateTime
  description: String
  educationLevelCd: String
  educationLevelDescTxt: String
  ethnicGroupInd: String
  lastChgReasonCd: String
  lastChgTime: DateTime
  lastChgUserId: ID
  localId: String
  maritalStatusCd: String
  maritalStatusDescTxt: String
  mothersMaidenNm: String
  multipleBirthInd: String
  occupationCd: String
  preferredGenderCd: String
  primLangCd: String
  primLangDescTxt: String
  recordStatusCd: RecordStatus
  recordStatusTime: DateTime
  statusCd: String
  statusTime: DateTime
  survivedIndCd: String
  userAffiliationTxt: String
  firstNm: String
  lastNm: String
  middleNm: String
  nmPrefix: String
  nmSuffix: String
  preferredNm: String
  hmStreetAddr1: String
  hmStreetAddr2: String
  hmCityCd: String
  hmCityDescTxt: String
  hmStateCd: String
  hmZipCd: String
  hmCntyCd: String
  hmCntryCd: String
  hmPhoneNbr: String
  hmPhoneCntryCd: String
  hmEmailAddr: String
  cellPhoneNbr: String
  wkStreetAddr1: String
  wkStreetAddr2: String
  wkCityCd: String
  wkCityDescTxt: String
  wkStateCd: String
  wkZipCd: String
  wkCntyCd: String
  wkCntryCd: String
  wkPhoneNbr: String
  wkPhoneCntryCd: String
  wkEmailAddr: String
  ssn: String
  medicaidNum: String
  dlNum: String
  dlStateCd: String
  raceCd: String
  raceSeqNbr: Int
  raceCategoryCd: String
  ethnicityGroupCd: String
  ethnicGroupSeqNbr: Int
  adultsInHouseNbr: Int
  childrenInHouseNbr: Int
  birthCityCd: String
  birthCityDescTxt: String
  birthCntryCd: String
  birthStateCd: String
  raceDescTxt: String
  ethnicGroupDescTxt: String
  versionCtrlNbr: Int
  asOfDateAdmin: DateTime
  asOfDateEthnicity: DateTime
  asOfDateGeneral: DateTime
  asOfDateMorbidity: DateTime
  asOfDateSex: DateTime
  electronicInd: String
  personParentUid: personParentUid
  dedupMatchInd: String
  groupNbr: Int
  groupTime: DateTime
  edxInd: String
  speaksEnglishCd: String
  additionalGenderCd: String
  eharsId: String
  ethnicUnkReasonCd: String
  sexUnkReasonCd: String
}

type personParentUid {
  id: ID
}

input PersonInput {
  names: [Name]
  ssn: String
  DateOfBirth: Date
  birthGender: Gender
  currentGender: Gender
  deceased: Deceased
  deceasedTime: DateTime
  maritalStatus: String
  addresses: [PostalAddress]
  phoneNumbers: [PhoneNumber]
  emailAddresses: [String]
  identifications: [Identification]
  ethnicityCode: String
  raceCodes: [String]
  asOf: DateTime
  comments: String
  mothersMaidenName: String
  adultNbrInHouse: Int
  childrenNbrinHouse: Int
  primaryOccupation: String
  highestEducationLvl: String
  primaryLang: String
  speaksEnglish: String
  hIVCaseId: String
}

input MortalityInput {
  asOf: DateTime
  deceased: Deceased
  deceasedTime: DateTime
  cityOfDeath: String
  stateOfDeath: String
  countyOfDeath: String
  countryOfDeath: String
}

input UpdateSexAndBirthInput {
  asOf: DateTime
  DateOfBirth: DateTime
  birthGender: Gender
  currentGender: Gender
  additionalGender: Gender
  transGenderInfo: Gender
  birthCity: String
  birthCntry: String
  birthState: String
  birthOrderNbr: Int
  multipleBirth: String
  sexunknown: String
  currentAge: String
  ageReportedTime: DateTime
}
input Name {
  firstName: String
  middleName: String
  lastName: String
  suffix: Suffix
  nameUseCd: NameUseCd!
}

input PostalAddress {
  streetAddress1: String
  streetAddress2: String
  city: String
  stateCode: String
  countyCode: String
  countryCode: String
  zip: String
  censusTract: String
}

input PhoneNumber {
  number: String!
  extension: String
  phoneType: PhoneType!
}

input Identification {
  identificationNumber: String!
  identificationType: String!
  assigningAuthority: String
}

enum NameUseCd {
  AD # Adopted Name
  AL # Alias Name
  A # Artist/Stage Name
  S # Coded Pseudo
  I # Indigenous/Tribal
  L # Legal
  C # License
  M # Maiden Name
  MO # Mother's Name
  BR # Name at Birth
  P # Name of Partner/Spouse
  R # Religious
  U
}

enum Suffix {
  ESQ
  II
  III
  IV
  JR
  SR
  V
}

enum PhoneType {
  HOME
  CELL
  WORK
}

enum Gender {
  M
  F
  U
}

enum Deceased {
  Y
  N
  UNK
}

enum Operator {
  EQUAL
  BEFORE
  AFTER
}

enum SortDirection {
  ASC
  DESC
}

type PersonIdentification {
  typeDescTxt: String
  typeCd: String
  rootExtensionTxt: String
  assigningAuthorityCd: String
  assigningAuthorityDescTxt: String
}

type PersonName {
  firstNm: String
  middleNm: String
  lastNm: String
  nmSuffix: String
  nmPrefix: String
}

type Locator {
  emailAddress: String
  extenstionTxt: String
  phoneNbrTxt: String
  urlAddress: String
  censusBlockCd: String
  censusMinorCivilDivisionCd: String
  censusTrackCd: String
  cityCd: String
  cityDescTxt: String
  cntryCd: String
  cntryDescTxt: String
  cntyCd: String
  cntyDescTxt: String
  msaCongressDistrictCd: String
  regionDistrictCd: String
  stateCd: String
  streetAddr1: String
  streetAddr2: String
  zipCd: String
  geocodeMatchInd: String
  withinCityLimitsInd: String
  censusTract: String
}

type LocatorParticipations {
  classCd: String
  locator: Locator
}

type NBSEntity {
  entityLocatorParticipations: [LocatorParticipations]
}
