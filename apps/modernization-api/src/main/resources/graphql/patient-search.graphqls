input DateEqualsCriteria {
  day: Int
  month: Int
  year: Int
}

input DateBetweenCriteria {
  from: Date
  to: Date
}

input DateCriteria {
  equals: DateEqualsCriteria
  between: DateBetweenCriteria
}

input NameCriteria {
  name: String!
  operator: NameOperator!
}

input IdentificationCriteria {
  identificationNumber: String
  identificationType: String
  assigningAuthority: String
}

input PersonFilter {
  id: String
  lastName: String
  lastNameCriteria: NameCriteria
  firstName: String
  race: String
  identification: IdentificationCriteria
  phoneNumber: String
  email: String
  dateOfBirth: Date
  bornOn: DateCriteria
  dateOfBirthOperator: Operator
  gender: String
  deceased: Deceased
  address: String
  city: String
  state: String
  country: String
  zip: String
  mortalityStatus: String
  ethnicity: String
  vaccination: String
  morbidity: String
  document: String
  stateCase: String
  abcCase: String
  cityCountyCase: String
  notification: String
  treatment: String
  investigation: String
  labReport: String
  accessionNumber: String
  disableSoundex: Boolean
  recordStatus: [RecordStatus!]!
}

enum Gender {
  M
  F
  U
}

enum Deceased {
  Y
  N
  UNK
}

enum Operator {
  EQUAL
  BEFORE
  AFTER
}

enum NameOperator {
  EQUAL
  NOT_EQUAL
  STARTS_WITH
  CONTAINS
  SOUNDS_LIKE
}

type PatientSearchResultIdentification {
  type: String!
  value: String!
}

type PatientSearchResultName {
  type: String
  first: String
  middle: String
  last: String
  suffix: String
}

type PatientSearchResultPhone {
  type: String!
  use: String!
  number: String
}

type PatientSearchResultAddress {
  type: String
  use: String
  address: String
  address2: String
  city: String
  county: String
  state: String
  zipcode: String
}

type PatientSearchResult {
  patient: Int!
  birthday: Date
  age: Int
  gender: String
  status: String!
  shortId: Int!
  legalName: PatientSearchResultName
  names: [PatientSearchResultName!]!
  identification: [PatientSearchResultIdentification!]!
  addresses: [PatientSearchResultAddress!]!
  phones: [String!]!
  emails: [String!]!
  detailedPhones: [PatientSearchResultPhone!]!
}

type PatientSearchResults {
  content: [PatientSearchResult!]!
  total: Int!
  page: Int!
  size: Int!
}

type Query {
  findPatientsByFilter(
    filter: PersonFilter!
    page: SortablePage
    share: String
  ): PatientSearchResults!
}
