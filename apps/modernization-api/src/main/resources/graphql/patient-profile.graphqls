type PatientIndicatorCodedValue {
    id: String!
    description: String!
}

type PatientSummaryAddress {
    use: String!
    address: String
    address2: String
    city: String
    state: String
    zipcode: String
    country: String
}

type PatientSummaryPhone {
    use: String
    number: String
}

type PatientSummaryEmail {
    use: String
    address: String
}

type PatientSummaryIdentification {
    type: String!
    value: String!
}

type PatientSummary {
    legalName: PatientLegalName
    birthday: Date
    age: Int
    gender: String
    ethnicity: String
    races: [String!]
    home: PatientSummaryAddress
    address: [PatientSummaryAddress!]!
    identification: [PatientSummaryIdentification!]
    phone: [PatientSummaryPhone!]
    email: [PatientSummaryEmail!]
}

type PatientLegalName {
    prefix: String
    first: String
    middle: String
    last: String
    suffix: String
}

type PatientNameUse {
    id: String!
    description: String!
}

type PatientNamePrefix{
    id: String!
    description: String!
}

type PatientNameSuffix{
    id: String!
    description: String!
}

type PatientNameDegree {
    id: String!
    description: String!
}

type PatientName {
    patient: Int!
    version: Int!
    asOf: Date!
    sequence: Int!
    use: PatientNameUse!
    prefix: PatientNamePrefix
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: PatientNameSuffix
    degree: PatientNameDegree
}

type PatientNameResults {
    content: [PatientName!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientAddressType {
    id: String!
    description: String!
}

type PatientAddressUse {
    id: String!
    description: String!
}

type PatientCounty {
    id: String!
    description: String!
}

type PatientState {
    id: String!
    description: String!
}

type PatientCountry {
    id: String!
    description: String!
}

type PatientAddress {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    type: PatientAddressType!
    use: PatientAddressUse!
    address1: String
    address2: String
    city: String
    county: PatientCounty
    state: PatientState
    zipcode: String
    country: PatientCountry
    censusTract: String
    comment: String
}

type PatientAddressResults {
    content: [PatientAddress!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientPhoneType {
    id: String!
    description: String!
}

type PatientPhoneUse {
    id: String!
    description: String!
}

type PatientPhone {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    type: PatientPhoneType
    use: PatientPhoneUse
    countryCode: String
    number: String
    extension: String
    email: String
    url: String
    comment: String
}

type PatientPhoneResults {
    content: [PatientPhone!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientBirth {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    bornOn: Date
    age: Int
    multipleBirth: PatientIndicatorCodedValue
    birthOrder: Int
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientGenderCodedValue {
    id: String!
    description: String!
}

type PatientPreferredGender {
    id: String!
    description: String!
}

type PatientGenderUnknownReason {
    id: String!
    description: String!
}

type PatientGender {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    birth: PatientGenderCodedValue
    current: PatientGenderCodedValue
    unknownReason: PatientGenderUnknownReason
    preferred: PatientPreferredGender
    additional: String
}



type PatientIdentificationType {
    id: String!
    description: String!
}

type PatientIdentificationAuthority {
    id: String!
    description: String!
}

type PatientIdentification {
    patient: Int!
    sequence: Int!
    version: Int!
    asOf: Date!
    type: PatientIdentificationType!
    authority: PatientIdentificationAuthority
    value: String
}

type PatientIdentificationResults {
    content: [PatientIdentification!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientMortality {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    deceased: PatientIndicatorCodedValue
    deceasedOn: Date
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientMaritalStatus {
    id: String!
    description: String!
}

type PatientOccupation {
    id: String!
    description: String!
}

type PatientEducationLevel {
    id: String!
    description: String!
}

type PatientPrimaryLanguage {
    id: String!
    description: String!
}

type Allowed {
    value: String
}
type Restricted {
    reason: String!
}

union Sensitive = Allowed | Restricted

type PatientGeneral {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    maritalStatus: PatientMaritalStatus
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: PatientOccupation
    educationLevel: PatientEducationLevel
    primaryLanguage: PatientPrimaryLanguage
    speaksEnglish: PatientIndicatorCodedValue
    stateHIVCase: Sensitive
}

type PatientEthnicGroup {
    id: String!
    description: String!
}

type PatientEthnicityUnknownReason {
    id: String!
    description: String!
}

type PatientDetailedEthnicity {
    id: String!
    description: String!
}

type PatientEthnicity {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    ethnicGroup: PatientEthnicGroup!
    unknownReason: PatientEthnicityUnknownReason
    detailed: [PatientDetailedEthnicity!]!
}

type PatientRaceCategory {
    id: String!
    description: String!
}

type PatientRaceDetail {
    id: String!
    description: String!
}

type PatientRace {
    patient: Int!
    id: Int!
    version: Int!
    asOf: Date!
    category: PatientRaceCategory!
    detailed: [PatientRaceDetail!]!
}

type PatientRaceResults {
    content: [PatientRace!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientProfile {
    id: ID!
    local: String!
    shortId: Int!
    version: Int!
    status: String!
    deletable: Boolean!
    summary(asOf: Date): PatientSummary
    names(page: Page): PatientNameResults!
    addresses(page: Page): PatientAddressResults!
    phones(page: Page): PatientPhoneResults!
    identification(page: Page): PatientIdentificationResults!
    races(page: Page): PatientRaceResults!
    birth: PatientBirth
    gender: PatientGender
    mortality: PatientMortality
    general: PatientGeneral
    ethnicity: PatientEthnicity
}

extend type Query {
    findPatientProfile(patient: ID, shortId: Int): PatientProfile
}
