type PatientIndicatorCodedValue {
    id: String!
    description: String!
}

type PatientAddressType {
    id: String!
    description: String!
}

type PatientAddressUse {
    id: String!
    description: String!
}

type PatientCounty {
    id: String!
    description: String!
}

type PatientState {
    id: String!
    description: String!
}

type PatientCountry {
    id: String!
    description: String!
}

type PatientBirth {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    bornOn: Date
    age: Int
    multipleBirth: PatientIndicatorCodedValue
    birthOrder: Int
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientGenderCodedValue {
    id: String!
    description: String!
}

type PatientPreferredGender {
    id: String!
    description: String!
}

type PatientGenderUnknownReason {
    id: String!
    description: String!
}

type PatientGender {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    birth: PatientGenderCodedValue
    current: PatientGenderCodedValue
    unknownReason: PatientGenderUnknownReason
    preferred: PatientPreferredGender
    additional: String
}

type PatientMortality {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    deceased: PatientIndicatorCodedValue
    deceasedOn: Date
    city: String
    state: PatientState
    county: PatientCounty
    country: PatientCountry
}

type PatientMaritalStatus {
    id: String!
    description: String!
}

type PatientOccupation {
    id: String!
    description: String!
}

type PatientEducationLevel {
    id: String!
    description: String!
}

type PatientPrimaryLanguage {
    id: String!
    description: String!
}

type Allowed {
    value: String
}
type Restricted {
    reason: String!
}

union Sensitive = Allowed | Restricted

type PatientGeneral {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    maritalStatus: PatientMaritalStatus
    maternalMaidenName: String
    adultsInHouse: Int
    childrenInHouse: Int
    occupation: PatientOccupation
    educationLevel: PatientEducationLevel
    primaryLanguage: PatientPrimaryLanguage
    speaksEnglish: PatientIndicatorCodedValue
    stateHIVCase: Sensitive
}

type PatientEthnicGroup {
    id: String!
    description: String!
}

type PatientEthnicityUnknownReason {
    id: String!
    description: String!
}

type PatientDetailedEthnicity {
    id: String!
    description: String!
}

type PatientEthnicity {
    patient: Int!
    id: ID!
    version: Int!
    asOf: Date!
    ethnicGroup: PatientEthnicGroup!
    unknownReason: PatientEthnicityUnknownReason
    detailed: [PatientDetailedEthnicity!]!
}

type PatientRaceCategory {
    id: String!
    description: String!
}

type PatientRaceDetail {
    id: String!
    description: String!
}

type PatientRace {
    patient: Int!
    id: Int!
    version: Int!
    asOf: Date!
    category: PatientRaceCategory!
    detailed: [PatientRaceDetail!]!
}

type PatientRaceResults {
    content: [PatientRace!]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientProfile {
    id: ID!
    local: String!
    version: Int!
    status: String!
    races(page: Page): PatientRaceResults!
    birth: PatientBirth
    gender: PatientGender
    mortality: PatientMortality
    general: PatientGeneral
    ethnicity: PatientEthnicity
}

extend type Query {
    findPatientProfile(patient: ID, shortId: Int): PatientProfile
}
