type PatientCodedValue {
    id: String!
    description: String!
}

type PatientSummary {
    legalName: PatientLegalName
    birthday: Date
    age: Int
    gender: String
    ethnicity: String
    race: String
}

type PatientLegalName {
    prefix: String
    first: String
    middle: String
    last: String
    suffix: String
}

type PatientAdministrative {
    patient: ID!
    id: ID!
    version: Int!
    asOf: DateTime!
    comment: String
}

type PatientAdministrativeResults {
    content: [PatientAdministrative]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientName {
    patient: ID!
    version: Int!
    asOf: DateTime!
    sequence: Int!
    use: PatientCodedValue!
    prefix: PatientCodedValue
    first: String
    middle: String
    secondMiddle: String
    last: String
    secondLast: String
    suffix: PatientCodedValue
    degree: PatientCodedValue
}

type PatientNameResults {
    content: [PatientName]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientAddress {
    patient: Int!
    id: ID!
    version: Int!
    asOf: DateTime!
    type: PatientCodedValue
    use: PatientCodedValue
    address1: String
    address2: String
    city: String
    county: PatientCodedValue
    state: PatientCodedValue
    zipcode: String
    country: PatientCodedValue
    censusTract: String
    comment: String
}

type PatientAddressResults {
    content: [PatientAddress]!
    total: Int!
    number: Int!
    size: Int!
}

type PatientProfile {
    id: ID!
    asOf: DateTime!
    local: String!
    version: Int!
    summary: PatientSummary
    names(page: Page): PatientNameResults
    administrative(page: Page): PatientAdministrativeResults
    addresses(page: Page): PatientAddressResults
}

extend type Query {
    findPatientProfile(patient: ID!, asOf: DateTime): PatientProfile
}
