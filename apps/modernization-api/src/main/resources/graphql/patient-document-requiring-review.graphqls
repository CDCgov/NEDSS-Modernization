type DocumentRequiringReview {
  id: ID!
  localId: String!
  type: String!
  dateReceived: DateTime!
  eventDate: DateTime
  isElectronic: Boolean!
  facilityProviders: FacilityProviders!
  descriptions: [Description]!
}

type FacilityProviders {
  reportingFacility: ReportingFacility
  orderingProvider: OrderingProvider
  sendingFacility: SendingFacility
}

type ReportingFacility {
  name: String
}

type OrderingProvider {
  name: String
}

type SendingFacility {
  name: String
}

type Description {
  title: String
  value: String
}

type PatientDocumentRequiringReviewResults {
  content: [DocumentRequiringReview]!
  total: Int!
  number: Int!
}

enum DocumentRequiringReviewSortableField {
  type
  dateReceived
  eventDate
  localId
}

input DocumentRequiringReviewSortablePage {
  pageSize: Int
  pageNumber: Int
  sortField: DocumentRequiringReviewSortableField
  sortDirection: SortDirection
}

extend type Query {
  findDocumentsRequiringReviewForPatient(
    patient: Int!
    page: DocumentRequiringReviewSortablePage
  ): PatientDocumentRequiringReviewResults!
}
