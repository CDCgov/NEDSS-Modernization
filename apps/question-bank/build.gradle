import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'distribution'
    alias libs.plugins.springBoot
}
apply from: "${rootDir}/gradle/cucumber-logging.gradle"

group = 'gov.cdc.nbs.page.builder'
version = '0.0.1-SNAPSHOT'


springBoot {
    buildInfo {
        properties {
            additional = [
                    'commit': rootProject.ext.commit
            ]
        }
    }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

test {
    // always re-run tests
    test.outputs.upToDateWhen { false }

    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")

    // support Github actions overriding the configured database image
    if (System.getProperty("testing.database.image") != null) {
        systemProperty "testing.database.image", System.getProperty("testing.database.image")
    }

   debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(5105)
    }
}

testing {
    suites {
        test {
            useJUnitJupiter()

            dependencies {
                compileOnly libs.lombok
                annotationProcessor libs.lombok

                implementation.bundle(libs.bundles.testing)
                implementation libs.spring.test
                implementation libs.awaitility

                implementation.bundle(libs.bundles.testcontainers)

                implementation.bundle(libs.bundles.cucumber)

                implementation project(':testing-support')
                implementation project(':testing-identity')
                implementation project(':testing-auth')
                implementation project(':testing-auth-cucumber')
                implementation project(':testing-http-interaction')
                implementation project(':testing-classic-interaction-cucumber')

            }

            targets {
                all {
                    testTask.configure {
                        outputs.upToDateWhen { false }

                        systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
                        // support Github actions overriding the configured database image
                        if (System.getProperty("testing.database.image") != null) {
                            systemProperty "testing.database.image", System.getProperty("testing.database.image")
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation platform(SpringBootPlugin.BOM_COORDINATES)

    implementation project(':authentication')
    implementation project(':accumulation')
    implementation project(':audit')
    implementation project(':id-generator')
    implementation(project(':web'))
    implementation(project(':classic-interaction'))
    implementation(project(':redirect'))

    implementation libs.guava

    implementation libs.springBoot.web
    implementation libs.bundles.jpa
    annotationProcessor libs.springBoot.jpa

    implementation libs.bundles.security

    // swagger
    implementation libs.bundles.swagger

    // querydsl
    implementation(variantOf(libs.queryDSL.jpa) { classifier("jakarta") })
    annotationProcessor(variantOf(libs.queryDSL.apt) { classifier("jakarta") })

    implementation libs.bundles.jackson

    // database
    implementation libs.mssql.jdbc

    // lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok


    // csv
    implementation "org.apache.commons:commons-csv:1.10.0"

    // itext pdf generation
    implementation libs.itextpdf

    implementation 'org.apache.poi:poi:5.2.5'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'

    constraints {
        implementation 'org.apache.commons:commons-compress:1.26.0'
    }

}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=com.querydsl.core.annotations.Generated'
}

tasks.withType(JavaExec).configureEach {

    debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(18095)
    }
}

bootRun {
    systemProperty('spring.profiles.active', 'default,development,local');
}

distributions {
    main {
        contents {
            from jar
            into ('lib') {
                from(project.configurations.runtimeClasspath)
            }
        }
    }
}
