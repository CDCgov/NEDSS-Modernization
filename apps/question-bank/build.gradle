import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'jvm-test-suite'
    alias libs.plugins.springBoot
    alias libs.plugins.springDependencies
}

group = 'gov.cdc'
version = '0.0.1-SNAPSHOT'

test {
    // always re-run tests
    test.outputs.upToDateWhen { false }
    
    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")

    // support Github actions overriding the configured database image
    if (System.getProperty("testing.database.image") != null) {
        systemProperty "testing.database.image", System.getProperty("testing.database.image")
    }

        debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(5105)
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['gov/cdc/nbs/questionbank/QuestionBankApplication.class'])
        }))
    }
}

testing {
    suites {
        test {
            useJUnitJupiter()

            dependencies {
                implementation libs.bundles.jpa
                implementation libs.bundles.testing
                implementation libs.spring.test
                implementation libs.spring.kafka.test
                implementation 'org.awaitility:awaitility:4.2.0'


                compileOnly libs.lombok
                annotationProcessor libs.lombok
                implementation libs.bundles.testcontainers

                implementation libs.bundles.cucumber

            }
        }
    }
}

dependencies {    
    // Spring
    implementation libs.springBoot.web
    implementation libs.bundles.jpa
    annotationProcessor libs.springBoot.jpa

    implementation libs.bundles.security

    // swagger
    implementation "io.springfox:springfox-boot-starter:3.0.0"

    // querydsl
    implementation libs.bundles.queryDSL
    annotationProcessor(variantOf(libs.queryDSL.apt) { classifier('jpa') })

    // blazebit for querydsl paging
    implementation libs.bundles.blaze.persistence.queryDSL
    implementation libs.bundles.jackson

    // database
    implementation libs.mssql.jdbc

    // Kafka
    implementation libs.spring.kafka

    // lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    // auth
    implementation project(':authentication')

    // id generation
    implementation project(':id-generator')
    

}

compileJava.mustRunAfter(":authentication:build")
compileJava.mustRunAfter(":id-generator:build")

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=com.querydsl.core.annotations.Generated'
}

tasks.withType(JavaExec).configureEach {

    debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(18095)
    }
}
