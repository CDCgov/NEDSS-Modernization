type Mutation {
  createTextQuestion(data: TextQuestionData!): TextQuestion!
  createDateQuestion(data: DateQuestionData!): DateQuestion!
  createDropdownQuestion(data: DropDownQuestionData!): DropdownQuestion!
  createNumericQuestion(data: NumericQuestionData!): NumericQuestion!
  deleteQuestion(questionId: ID!): QuestionBankEventResponse!
}

extend type Query {
  findQuestions(filter: QuestionFilter!, page: QuestionPage): QuestionResults
}

type QuestionResults {
  content: [Question!]!
  total: Int!
}

type TextQuestion {
  id: ID!
  version: Int!
  codeSet: CodeSet!
  label: String
  tooltip: String
  maxLength: Int
  placeholder: String
}

type DateQuestion {
  id: ID!
  version: Int!
  codeSet: CodeSet!
  label: String
  tooltip: String
  allowFutureDate: Boolean!
}

type DropdownQuestion {
  id: ID!
  version: Int!
  codeSet: CodeSet!
  label: String
  tooltip: String
  optionSet: OptionSet
  defaultOption: Option
  isMultiSelect: Boolean!
}

type NumericQuestion {
  id: ID!
  version: Int!
  codeSet: CodeSet!
  label: String
  tooltip: String
  minValue: Int
  maxValue: Int
  unitOptions: OptionSet
}

type QuestionBankEventResponse {
    message: String!
    questionId: ID!
}

enum CodeSet {
  PHIN
  LOCAL
}

input TextQuestionData {
  label: String!
  tooltip: String
  maxLength: Int
  placeholder: String
  defaultValue: String
  codeSet: CodeSet!
}

input DateQuestionData {
  labael: String!
  tooltip: String
  allowFutureDates: Boolean!
  codeSet: CodeSet!
}

input DropDownQuestionData {
  label: String!
  tooltip: String
  valueSet: String
  defaultValue: String
  isMultiSelect: Boolean!
  codeSet: CodeSet!
}

input NumericQuestionData {
  label: String!
  tooltip: String
  minValue: Int
  maxValue: Int
  defaultValue: Int
  unitValueSet: String
  codeSet: CodeSet!
}

input QuestionFilter {
  searchText: String!
}

union Question =
    TextQuestion
  | NumericQuestion
  | DropdownQuestion
  | DateQuestion

input QuestionPage {
  pageSize: Int
  pageNumber: Int
}

enum SortDirection {
  ASC
  DESC
}
