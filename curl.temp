//Fix NBS Context issues by disabling Backspace(8) and Enter(13) for appropriate PAGE elements
if (typeof window.event != 'undefined')
  document.onkeydown = function () {
    var t = event.srcElement.type;
    if (t == '' || t == 'undefined' || t == 'button') {
      return;
    }
    var kc = event.keyCode;
    return ((kc != 8 && kc != 13) || (t == 'text' && kc != 13) ||
      (t == 'textarea') || (t == 'submit' && kc == 13) || (t == 'image' && kc == 13));
    
    return preventF12(event);
  }


function disableSubmitBeforePageLoadsFlag(flagValue){
	if (flagValue=='T')
		blockUIDuringFormSubmissionNoGraphic();
}


$j(document).ready(function() {
    $j("#SubmitTop").removeAttr("disabled");
    $j("#SubmitBottom").removeAttr("disabled");
    unblockUIDuringFormSubmissionNoGraphic();
  });

var newwindow = null;
function parent_disable() {
  if (newwindow && !newwindow.closed) {
    newwindow.focus();
  }
  if (newwindow && newwindow.closed) {
    getElementByIdOrByName("pageview").style.display = "none";
  }
}

function getPage(target) {
  document.forms[0].target = "";
  document.forms[0].action = target;
}


//Pass in the ID of the Jurisdiction Element and the Valid jurisdiactions string found in attributeMap
//If returns "true" new to forward to: SubmitNoViewAccess
function validatePageJurisdiction(jurisID, NBSSecJurisdictionParseString)
{
    var jurisd = getElementByIdOrByName(jurisID);
    if(jurisd == null || jurisd=='undefined' || (jurisd != null && (jurisd.value == "" || jurisd.value=='NONE'))) {
        return "valid";
    }
    if(NBSSecJurisdictionParseString == null || NBSSecJurisdictionParseString.value == "") {
        return "valid";
    }
    var items = NBSSecJurisdictionParseString.split("|");
    var containsJurisdiction = false;
    var confirmMsg = "If you save the Event, you will not be able to view the data because it is outside your permitted Program Area/Jurisdiction. Select OK to continue, or Cancel to not continue.";
    if (items.length > 1) {
        for (var i=0; i < items.length; i++)
        {
            if (items[i]!=""  && items[i] == jurisd.value ) {
                containsJurisdiction = true;
            }
        }
    }
    if(!containsJurisdiction) {
        if(confirm(confirmMsg)) {
            return "true";
        }
        else {
            return "false";
        }
    }

    return "valid";
}

function printAllForms(){
	    var divElt = getElementByIdOrByName("pageview");
	    divElt.style.display = "block";
	    var o = new Object();
	    o.opener = self;

	   // window.showModalDialog("/nbs/PageAction.do?method=printLoadFormPage", o, GetDialogFeatures(400, 340, false));
	    
	    var URL = "/nbs/PageAction.do?method=printLoadFormPage";
	    var modWin = openWindow(URL, o,GetDialogFeatures(400, 420, false, false), divElt, "");
	    
	    return false;
}

function closepopup() {
	self.close();
	var opener = getDialogArgument();
	var invest = getElementByIdOrByName("pageview");
	if (invest == null)
		invest = getElementByIdOrByNameNode("pageview", opener.document);
	if (invest != null)
		invest.style.display = "none";
}

function printPageForm() {
	
	     	var errorMsgArray = new Array();
	     	var errorText;
	var frmName = $j("#formNameid").attr("value");
	var frmContent = $j("input:radio[name=formContent]:checked").val(); 
	         if($j("#formNameid").attr("value")=="") {
	        	 errorText = " Please select a form to print.";
	    	     	errorMsgArray.push(errorText);
	    	     	$j("#formNameid").focus();
	         }
			var params = "&formName="+frmName +"&formContent=" + frmContent;
	         if(getElementByIdOrByName("coinfInv") != null){
	        	 if($j("#coinfInv").attr("value")=="") {
	            	 errorText = " Please select another condition.";
	        	     	errorMsgArray.push(errorText);
	        	     	$j("#coinfInv").focus();
	             }
				var coinf = $j("#coinfInv").attr("value");
				params = params  +"&coinfCondInvUid=" + coinf;
	         }

	     	 if(errorMsgArray.length > 0){
	             displayGlobalErrorMessage(errorMsgArray);
	             return false;
	         }
	     	 
	     	 
	     	//if(window.showModalDialog){
	     		var opener = getDialogArgument();
		opener.document.forms[0].action="/nbs/PageAction.do?method=printSelectedLoad" + params;
		opener.document.forms[0].target = "_blank";
		opener.document.forms[0].submit();
		//Defect 8855 - 2016-05-02
		opener.document.forms[0].target = "_self";
		self.close();
}
/**
    Function used by the popup calendar widget to populate
    the date selected in the text box.
*/
function getCalDate(obj, anchor)
{
    var cal = new CalendarPopup();
    //cal.showNavigationDropdowns(); // dropdowns for year & month

    // do not allow dates starting from the next day.
    var tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate()+1);
    cal.addDisabledDates(formatDate(tomorrow, "yyyy-MM-dd"), null);

    cal.showYearNavigation(); // << and >> arrows to navigate year & month
    var newObj = getElementByIdOrByName(obj);
    cal.select(newObj,anchor,'MM/dd/yyyy');
}


/**
    Function used by the popup calendar widget to populate
    the date selected in the text box. Allow future dates
*/
function getCalDateFuture(obj, anchor)
{
  var cal = new CalendarPopup();
  cal.showYearNavigation();
  var newObj = getElementByIdOrByName(obj);
  cal.select(newObj,anchor,'MM/dd/yyyy');
}


/** Create a new notification from a PAGE module */
function createPageNotification()
{
    var divElt = getElementByIdOrByName("pageview");
    divElt.style.display = "block";
    var o = new Object();
    o.opener = self;
    //window.showModalDialog("/nbs/page/notification/Notification.jsp", o, GetDialogFeatures(560, 300, false));
    
    var URL = "/nbs/page/notification/Notification.jsp";
    var modWin = openWindow(URL, o,GetDialogFeatures(560, 300, false, true), divElt, "");
    return false;
}

function createNotifications(comments)
{
    JPageForm.updateNotifications(comments, function(data)
    {
        if(data.length == 1) {
            displayGlobalErrorMessage(data[0]);
        }
        else {
            displayGlobalSuccessMessage(data[0]);
        }
        var notifications = data[1];
        if(notifications != null) {
            var notif = getElementByIdOrByName("notificationSection");
            notif.innerHTML = notifications;
            var notifExists = getElementByIdOrByName("NotificationExists");
            notifExists.value="true";

            // set the current value of notification data in the patient summary part of view JSP.
            var tr0 = $j(notif).find("tbody tr").get(0);
            var td5 = $j(tr0).find("td").get(5); // 6th cell contains notification status
            $j("#patientSummaryJSP_view_notificationStatus").html($j(td5).html());
        }
    });
}

function displayNotifications(parentClass)
{
	var childClass = parentClass.replace("parent", "child");
	var tableId = "notificationHistoryTable";
	var tableElt = $j("#" + tableId);
	var parentRowElt = $j(tableElt).find("." + parentClass).get(0);

	var imgSrc = $j($j(parentRowElt).find("img").get(0)).attr("src");
	if (imgSrc.indexOf("minus_sign.gif") >= 0) {
		$j($j(parentRowElt).find("img").get(0)).attr("src", "plus_sign.gif");
		$j($j(parentRowElt).find("img").get(0)).attr("alt", "Expand");
		
	}
	else if (imgSrc.indexOf("plus_sign.gif") >= 0) {
		$j($j(parentRowElt).find("img").get(0)).attr("src", "minus_sign.gif");
		$j($j(parentRowElt).find("img").get(0)).attr("alt", "Collapse");
		
	}

	var childRowsElts = $j(tableElt).find("." + childClass);
	for (var i = 0; i < childRowsElts.length; i++) {
		var singleChildRow = $j(childRowsElts[i]);
		if ($j(singleChildRow).css("display") == "none") {
			$j(singleChildRow).removeClass("none");
		}
		else {
			$j(singleChildRow).addClass("none");
		}
	}

}

/** Transfer Ownership of investigation for a PAGE */
function transferPageOwnership()
{
    var divElt = getElementByIdOrByName("pageview");
    divElt.style.display = "block";
    var o = new Object();
    o.opener = self;
    //window.showModalDialog("/nbs/PageAction.do?method=transferOwnershipLoad", o, GetDialogFeatures(850, 500, false));
    var URL = "/nbs/PageAction.do?method=transferOwnershipLoad";
    var modWin = openWindow(URL, o,GetDialogFeatures(850, 500, false, true), divElt, "");
    
    return false;
}

function pageTOwnership(jurisd,exportFacility,comment,documentType ) {
    document.forms[0].action ="/nbs/PageAction.do?method=transferOwnershipSubmit&INV107=" + jurisd+ '&exportFacility=' + exportFacility + '&comment=' + comment;
    
    if (documentType == 'undefined' || documentType == null)
      		document.forms[0].action ="/nbs/PageAction.do?method=transferOwnershipSubmit&INV107=" + jurisd+ '&exportFacility=' + exportFacility + '&comment=' + comment;
      	else
      		document.forms[0].action ="/nbs/PageAction.do?method=transferOwnershipSubmit&INV107=" + jurisd+ '&exportFacility=' + exportFacility + '&comment=' + comment +"&documentType=" +documentType;
    document.forms[0].submit();
}
/** Share PAGE case with other facility*/
function sharePageCaseLoad()
{
    var divElt = getElementByIdOrByName("pageview");
    divElt.style.display = "block";
    var o = new Object();
    o.opener = self;
    //window.showModalDialog("/nbs/PageAction.do?method=sharePageCaseLoad", o, GetDialogFeatures(700, 400, false));
    var URL = "/nbs/PageAction.do?method=sharePageCaseLoad";
    var modWin = openWindow(URL, o,GetDialogFeatures(700, 400, false, true), divElt, "");
    
    return false;
}


function checkAsianRaces()
{
  JBaseForm.clearDetailsAsian(function(data) {
      DWRUtil.removeAllOptions("DEM243");
      DWRUtil.addOptions("DEM243", data, "key", "value");
    });
    var asianRace = getElementByIdOrByName("pageClientVO.asianRace").checked;
    if(asianRace)
    {
        getElementByIdOrByName("DEM243").className="";
        getElementByIdOrByName("asian-multi").className="";
    }
    else
    {
        getElementByIdOrByName("DEM243").className="none";
        getElementByIdOrByName("asian-multi").className="none";

        // reset the selected values displayed
        var selectBox = getElementByIdOrByName("DEM243");
        for (i = 0; i < selectBox.options.length; i++) {
            selectBox.options[i].selected = false;
        }
        displaySelectedOptions(selectBox, "DEM243-selectedValues");
    }
}

function checkHawaiianRaces()
{
  JBaseForm.clearDetailsHawaii(function(data) {
      DWRUtil.removeAllOptions("DEM245");
      DWRUtil.addOptions("DEM245", data, "key", "value");
    });

    var hawaiianRace= getElementByIdOrByName("pageClientVO.hawaiianRace").checked;
    if(hawaiianRace){
        getElementByIdOrByName("DEM245").className="";
        getElementByIdOrByName("hawaiian-multi").className="";
    }
    else
    {
        getElementByIdOrByName("DEM245").className="none";
        getElementByIdOrByName("hawaiian-multi").className="none";

        // reset the selected values displayed
        var selectBox = getElementByIdOrByName("DEM245");
        for (i = 0; i < selectBox.options.length; i++) {
            selectBox.options[i].selected = false;
        }
        displaySelectedOptions(selectBox, "DEM245-selectedValues");
    }
}

function getSelectedOptsString(opts)
{
    var returnVar = "";
    for (var i= 0; i< opts.length; i++)
    {
        if (opts[i].selected) {
            returnVar = returnVar + opts[i].value + ",";
        }
    }

    if(returnVar.length == 0) {
        returnVar = "abcxyz";
    }

    returnVar = returnVar.substring(0,(returnVar.length-1));
    //alert(returnVar);
    return returnVar;
}

/**
    Function called from the window.onload of create/edit of TB and Varicella pages. It gathers all the
    HTML select elements with fireRule function defined in the onchange event. It then proceeds to
    create a new onKeyDown event to all those select boxes found. The onKeyDown event is programmed to look
    for the 'tab key' press, i.e., with a keyCode = 9. If tab key press is detected, the
    MoveFocusToNextField() function to move the focus to the next valid element is called.
*/
function attachMoveFocusFunctionToTabKey()
{
    // attach onKeyDown events for all the select boxes that has a fireRule call assigned to it.
    var selectElts = $j("select[onchange]");
    for (var i = 0; i < selectElts.length; i++)
    {
        var onchangeEvt = "" + $j(selectElts[i]).attr("onchange");
        if (onchangeEvt.indexOf("fireRule") != -1)
        {
            var tmp = onchangeEvt.substring(onchangeEvt.indexOf("fireRule"), onchangeEvt.length);
            var fn = tmp.substring(0, tmp.indexOf(")")+1);
            var fnParamsList = fn.substring(fn.indexOf("(")+1, fn.indexOf(")"));
            var fnParamsArr = fnParamsList.split(",");

            if (fnParamsArr.length >= 2) {
                // fnParamsArr[0] is the HTML id of the select element
                // fnParamsArr[1] is the reference to the select element

                // attach the fireRule call to the onkeydown event for this select box
                $j(selectElts[i]).bind("keydown", function(e){
                    //alert("calling fireRuleAndChangeFocusOnTabKey with params.." + fnParamsArr[0] + ";" + fnParamsArr[1]);
                    var varKey = null;
                    if(window.event!=null) {
                        varKey = window.event.keyCode;
                        // look for tab key. i.e., keyCode = 9
                        if (varKey == "9") {
                            if (window.event.shiftKey) {
                                // if the shiftKey is pressed, return true so that
                                // default tab focus is carried out. i.e., the
                                // focus is moved to the valid HTML element that precedes
                                // this element
                                return true;
                            }
                            else {
                                // if shift key is not pressed, then call the
                                // MoveFocusToNextField() by passing the current element
                                // (select elt) and supress the default browser operation
                                MoveFocusToNextField(this);
                                return false;
                            }
                        }
                    }
                });
            }
        }
    }
}

function fireRuleAndChangeFocusOnTabKey(fieldId, element)
{
    var varKey = null;
    if(window.event!=null) {
        varKey = window.event.keyCode;
        if (varKey == "9") {
            if (window.event.shiftKey) {
                fireRule(fieldId, element, false);
            }
            else {
                fireRule(fieldId, element, true);
            }
        }
    }
}

function fireRule(field, newValue, updateCursorFocus)
{
    var actionMode = getElementByIdOrByName("actionMode") == null ? "" : getElementByIdOrByName("actionMode").value;
    if(actionMode == 'Preview') {
        return;
    }

    var newValueValue = "abcxyz";
    if(newValue.type == 'select-multiple') {
        newValueValue = getSelectedOptsString(newValue.options);
    }
    else {
        if (newValue.value != null && newValue.value != "") {
            newValueValue = newValue.value;
        }
    }

    var fieldAndValue = field + ':' + newValueValue;
    JPageForm.fireRule(fieldAndValue, function(data) {
    	if (data.length == 0) return;
        for (var i = 0; i < data.length; i++) {
            updateFormField(data[i]);
        }

        // move the focus to the first valid field that follows the field that fired this rule.
         if (updateCursorFocus == true) {
            MoveFocusToNextField(newValue);
        }
    });
}

function updateFormField(formField)
{
    // alert("Form Field is changed" + formField.fieldId + ", " +
    // "value is " + formField.string);
    // alert(formField.state.disabled);

    var currentField = $(formField.fieldId);
    var currentFieldTxtBox = $(formField.fieldAutoCompId);
    var currentFieldBtn = $(formField.fieldAutoCompBtn);
    var currentFieldLabelID = formField.fieldId +"L";
    var currentFieldLabel="";
    //alert("currentFieldLabelID. :"+currentFieldLabelID);
    //if(formField.fieldId == "DEM128"){

    currentFieldLabel = getElementByIdOrByName(currentFieldLabelID);
    //alert("currentFieldLabel inside IF :"+currentFieldLabel);
    //}

    // Sets enabled/disabled status, option values, and selected value //
    if (formField.fieldType == "Coded" && currentField != null)
    {
        // alert("Made it into drop-down handler");
        var optionsList = formField.state.values;
        var Lcurrent = currentField.options.length;
        var Lnew = optionsList.length;
        // var newListLarger = Lnew > Lcurrent;
        if (Lnew > Lcurrent) {
            for (var i = 0; i < Lcurrent; i++) {
                currentField.options[i].text = optionsList[i].value;
                currentField.options[i].value = optionsList[i].key;
                currentField.options[i].selected = false;
            }
            for (var i = Lcurrent; i < Lnew; i++) {
                currentField.options[i] = new Option(optionsList[i].value,
                optionsList[i].key);
            }
        }
        else {
            //alert("Is smaller");
            for (var i = 0; i < Lnew; i++) {
                currentField.options[i].text = optionsList[i].value;
                currentField.options[i].value = optionsList[i].key;
                currentField.options[i].selected = false;
            }
            //Temporary Fix for TUB114, Countries multiselect (Need to revisit !!)
            if((formField.fieldId != "TUB228") && (formField.fieldId != "TUB229") && (formField.fieldId != "INV153") && (formField.fieldId != "INV154") && (formField.fieldId != "INV156")){
                currentField.options.length = Lnew;
            }
        }

        // dwr.util.removeAllOptions(formField.fieldId);
        // dwr.util.addOptions(formField.fieldId, formField.state.values, "key", "value" );
        // alert(formField.fieldId+"  " +formField.fieldAutoCompId+" "+formField.state.multiSelVals);
        // alert(formField.value);
        if(formField.value!=null && formField.value!=""){
            dwr.util.setValue(formField.fieldId, formField.value);
            dwr.util.setValue(formField.fieldAutoCompId, formField.value);
            autocompTxtValuesForJSPByElement(formField.fieldId);
         // alert("Here if");
         }else if(formField.state.multiSelVals != null && formField.state.multiSelVals !="" ){

            //alert("Here else");

             dwr.util.setValue(formField.fieldId, formField.state.multiSelVals);
             displaySelectedOptions(getElementByIdOrByName(formField.fieldId), formField.fieldId+'-selectedValues');
         }else if((formField.state.multiSelVals==null || formField.state.multiSelVals=="")){

              dwr.util.setValue(formField.fieldId, "");
	      dwr.util.setValue(formField.fieldAutoCompId, "");
         }

    }

    // Set main control state/value //
    if (currentField != null)
    {
        currentField.disabled = formField.state.disabled;
        if(currentField.disabled) {
            if(currentField.type == 'select-multiple') {
                for (var i=0; i<currentField.options.length; i++) {
                    currentField.options[i].selected = false;
                }
            displaySelectedOptions(getElementByIdOrByName(formField.fieldId), formField.fieldId+'-selectedValues');
            }
            else {
                dwr.util.setValue(formField.fieldId, "");
            }

            dwr.util.setValue(formField.fieldAutoCompId, "");
        }
        //alert("currentFieldLabel In here :"+currentFieldLabel);
        //alert("fieldId In here :"+formField.fieldId);
        //if(formField.fieldId == "DEM128"){
        //alert("currentFieldLabel enabling:"+currentFieldLabel);
        //alert("formField.state.disabled :" +formField.state.disabled);
        //currentFieldLabel.disabled = formField.state.disabled;

        if(currentFieldLabel != null) {
            currentFieldLabel.className = formField.state.disabledString;
        }
        // }

        if (formField.fieldType == "Coded") {
            if(currentFieldTxtBox != null && currentFieldBtn != null) {
                currentFieldTxtBox.disabled = formField.state.disabled;
                currentFieldBtn.disabled = formField.state.disabled;
            }
        }
    }

    //*** Defect15152:This is a temporary fix for "TUB202". Needs to be reworked.
    if((formField.fieldId == "TUB106" || formField.fieldId == "TUB202") && currentField.disabled == false ){
    }
    else
    {
        if(formField.fieldType != "Coded"){
            dwr.util.setValue(formField.fieldId, formField.value);
            dwr.util.setValue(formField.fieldAutoCompId, formField.value);
        }
    }

    if( getElementByIdOrByName(formField.fieldId).type == 'select-multiple'){
        // alert(formField.fieldId);
        var selString = formField.fieldId + '-selectedValues';
        //alert(selString);
        //displaySelectedOptions(formField.fieldId, selString);
    }
}


function pgLoadGetDWRCountiesCities(stateId, countyId)
{

    var actionMode = getElementByIdOrByName("actionMode") == null ? "" : getElementByIdOrByName("actionMode").value;
    if(actionMode != 'Create') {
        return;
    }

    stateNode=getElementByIdOrByName(stateId);
    var state1 = stateNode.value;
    if(state1 == null) {
    	return;
    }
    getDWRCounties(state1, countyId)
    getDWRCitites(state1)
}

/**
 * getValue: this method returns the text of the option with the value received as a parameter
 * @param list
 * @param value
 * @returns {String}
 */

function getValue(list, value){
	
	var textOption = "";
	for(var i = 0; i< list.length; i++){
		if(list.options[i].value==value){
		textOption=list.options[i].text;
		}
	}
	return textOption;
	
}

/**
 * refeshHidden(): this method sets the value selected on the dropdown
 * @param e
 */
function refreshHidden(e){
	var id = e.id;
	getElementByIdOrByName(id+"_Hidden").value=document.getElementById(id).value;
	
}
/**
* selectValue: get the value from the hidden element and sets the value on the dropdown.
Also, onchange event it is added to the dropdown to update the hidden element
*/
function selectValue(id){
	
	if(getElementByIdOrByName(id+"_Hidden")!=null && getElementByIdOrByName(id+"_Hidden")!=undefined){
		var valueSelected = getElementByIdOrByName(id+"_Hidden").value;
		$j("#"+id).val(valueSelected);
		var list = document.getElementById(id);
		var textSelected = 	getValue(list, valueSelected);
		setElementValueByIdName(id + "_textbox", textSelected);
		//refresh the value on the hidden element
		getElementByIdOrByName(id).onchange = function(){refreshHidden(this);};
	}
}

/**
* populateCounty: sets the county on the dropdown
*/
function populateCounty( stateId, countiesId ) { 

	var elementState = getElementByIdOrByName(stateId);
	if(elementState!=null && elementState!=undefined){
		var valueState = elementState.value;
		getDWRCountiesWithValue(valueState, countiesId);//Populates the counties for the state
	}  
}

function pgPopulateCounties(){

	populateCounty ( 'DEM162', 'DEM165');
	populateCounty ('DEM162_W', 'DEM165_W');
	populateCounty ('INV503', 'INV505');
	populateCounty ('MTH166', 'MTH168');
	//Second investigation on merge screen
	populateCounty ( 'DEM162_2', 'DEM165_2');
	populateCounty ('DEM162_W_2', 'DEM165_W_2');
	populateCounty ('INV503_2', 'INV505_2');

}

function getDWRCountiesWithValue(state, elementId)
{
var state1 = state.value;
 
if (state1 == null) {
    state1 = state;
  }
 if (elementId == 'DEM165' || elementId == 'DEM165_W' || elementId == 'DEM165_2' || elementId == 'DEM165_W_2'  || elementId == 'INV505' || elementId == 'AR109'  || elementId == 'MTH168') {
    JPageForm.getDwrCountiesForState(state1, function(data)
    {
      DWRUtil.removeAllOptions(elementId);
      setElementValueByIdName(elementId + "_textbox", "");
      DWRUtil.addOptions(elementId, data, "key", "value");
	  selectValue(elementId);
	  
    });
  } else if (elementId == 'INV156') {
    JPageForm.getDwrImportedCountiesForState(state1, function(data)
    {
      DWRUtil.removeAllOptions(elementId);
      setElementValueByIdName(elementId + "_textbox", "");
      DWRUtil.addOptions(elementId, data, "key", "value");
	  selectValue(elementId);
    });
  }
}

function getDWRCounties(state, elementId)
{
var state1 = state.value;
 
if (state1 == null) {
    state1 = state;
  }
 if (elementId == 'DEM165' || elementId == 'DEM165_W' || elementId == 'INV505' || elementId == 'AR109' || elementId == 'MTH168') {
    JPageForm.getDwrCountiesForState(state1, function(data)
    {
      DWRUtil.removeAllOptions(elementId);
      setElementValueByIdName(elementId + "_textbox", "");
      DWRUtil.addOptions(elementId, data, "key", "value");
	  var list = document.getElementById("DEM165_W");
    
    });
  } else if (elementId == 'INV156') {
    JPageForm.getDwrImportedCountiesForState(state1, function(data)
    {
      DWRUtil.removeAllOptions(elementId);
      setElementValueByIdName(elementId + "_textbox", "");
      DWRUtil.addOptions(elementId, data, "key", "value");
    });
  }
}

function getDWRStatesByCountry(state, elementId)
{
  var state1 = state.value;
  if (state1 == null) {
    state1 = state;
  }
  JPageForm.getfilteredStatesByCountry(state1, function(data)
  {
    DWRUtil.removeAllOptions(elementId);
    setElementValueByIdName(elementId + "_textbox", "");
    DWRUtil.addOptions(elementId, data, "key", "value");
  });
}

function getDWRCitites(state)
{
    var stateCode = state.value;
    JBaseForm.getDwrCityList(stateCode, function(data) {
        DWRUtil.removeAllOptions("cityList");
        DWRUtil.addOptions("cityList", data, "value", "key" );
        // dwr.util.setValue("name", data);
    });
}

function checkRacesOptions()
{
    var hawaiianRace= getElementByIdOrByName("pageClientVO.hawaiianRace").checked;
    if(hawaiianRace) {
        getElementByIdOrByName("hawaiianlist").className="";
        getElementByIdOrByName("hawaiian-multi").className="";
    }
    else {
        getElementByIdOrByName("DEM245").className="none";
        getElementByIdOrByName("hawaiian-multi").className="none";
    }

    var asianRace = getElementByIdOrByName("pageClientVO.asianRace").checked;
    if(asianRace) {
        getElementByIdOrByName("asianlist").className="";
        getElementByIdOrByName("asian-multi").className="";
    } else {
        getElementByIdOrByName("DEM243").className="none";
        getElementByIdOrByName("asian-multi").className="none";
    }
}

function pageTabCount()
{
    var disabledTabHandleClass = ".ongletTextDis";
    var errorTabHandleClass    = ".ongletTextErr";
    var enabledTabHandleClass  = ".ongletTextEna";
    var pageTabCount = 0;
    pageTabCount = $j(disabledTabHandleClass).length + $j(errorTabHandleClass).length + $j(enabledTabHandleClass).length;
    return pageTabCount;
}

function pgPopulateMMWR(weekId, yearId)
{

	var todayDT = new Date();
	var dd = todayDT.getDate();
	var mm = todayDT.getMonth()+1;//January is 0!
	var yyyy = todayDT.getFullYear();
	if(dd<10){dd='0'+dd}
	if(mm<10){mm='0'+mm}
	var currentDate = mm+'/'+dd+'/'+yyyy;
	var aMMWR = CalcMMWR(currentDate);
	var varYear = getElementByIdOrByName(yearId);
	var varWeek = getElementByIdOrByName(weekId);
	if(varYear == null || varYear.value == undefined || varYear.value == "")
		if(varYear!=undefined)
			varYear.value = aMMWR[0];
	if(varWeek == null || varWeek.value == undefined || varWeek.value == "")
		if(varWeek!=undefined)
			varWeek.value = aMMWR[1];
	//alert("Week and Year are "+aMMWR[0]+aMMWR[1]);
}

function pgPopulateInfoAsOf(infoAsOfId)
{
	//alert("pgPopulateInfoAsOf");
	var todayDT = new Date();
	var dd = todayDT.getDate();
	var mm = todayDT.getMonth()+1;//January is 0!
	var yyyy = todayDT.getFullYear();
	if(dd<10){dd='0'+dd}
	if(mm<10){mm='0'+mm}
	var currentDate = mm+'/'+dd+'/'+yyyy;
	var varInfoAsOf = getElementByIdOrByName(infoAsOfId);
	if(varInfoAsOf == null || varInfoAsOf.value == undefined || varInfoAsOf.value == "")
		if(varInfoAsOf!=undefined)
			varInfoAsOf.value = currentDate;

}



function pgOnLoadCalcRptAge(dobID,rptAgeId,rptAgeU,asOfDt,othAsOf)
{
    var reportedAgeNode = getElementByIdOrByName(rptAgeId);
    var reportedAgeUnitsNode = getElementByIdOrByName(rptAgeU);

    if(reportedAgeNode!=null && reportedAgeUnitsNode!=null && reportedAgeNode.value == "" && reportedAgeUnitsNode.value == "") {
        pgCalculateReportedAge(dobID,rptAgeId,rptAgeU,asOfDt,othAsOf);
    }
}

//
// Calculate Reported Age from DOB
// Note: required either Other Personal Details As Of Date or the General As Of Date to be set.
// Parameters: Date of Birth Id, Reported Age Id, Reported Age Units Id, Other Personal Detail As Of, General As Of
//
function pgCalculateReportedAge(dobID,rptAgeId,rptAgeU,asOfDt,othAsOf)
{
    var reportedAgeNode = getElementByIdOrByName(rptAgeId);
    var reportedAgeUnitsNode = getElementByIdOrByName(rptAgeU);


    var dobNode = getElementByIdOrByName(dobID);
    // FIXME : make sure it is DEM115 
    var calcDOBNode = getElementByIdOrByName(dobID);

    var asOfDateNode = getElementByIdOrByName(asOfDt);
    if((asOfDateNode==null || asOfDateNode=='undefined') ||( asOfDateNode!=null && (asOfDateNode.value==null || asOfDateNode.value==""))) {
  	asOfDateNode = getElementByIdOrByName(othAsOf);
    }

    //alert("dobNode:" + dobNode.value);
    //alert("asOfDateNode:" + getElementByIdOrByName(othAsOf).value);
    //alert("reportedAgeNode:" + reportedAgeNode.value);
    //alert("reportedAgeUnitsNode:" + reportedAgeUnitsNode.value);

    if(dobNode!=null && dobNode.value!="" && isDate(dobNode.value)){
        calcDOBNode.value = dobNode.value;
    }

    //var calcDOBDate = new Date(calcDOBNode.value);

    //figure out the reported age and units
    //don't show if calc dob is empty
    if (dobNode!=null && dobNode.value!="" && asOfDateNode!=null && asOfDateNode.value!="")
    {
    	var calcDOBDate = new Date(calcDOBNode.value);
        var asOfDate = new Date(asOfDateNode.value);
        //alert("should reset reportedAgeNode");
        reportedAgeNode.value="";
        reportedAgeUnitsNode.value="";

        var reportedAgeMilliSec = asOfDate.getTime() - calcDOBDate.getTime();
        if(!window.isNaN(reportedAgeMilliSec))
        {
            var reportedAgeSeconds = reportedAgeMilliSec/1000;
            var reportedAgeMinutes = reportedAgeSeconds/60;
            var reportedAgeHours = reportedAgeMinutes/60;
            var reportedAgeDays = reportedAgeHours/24;
            var reportedAgeMonths = reportedAgeDays/30.41;
            var reportedAgeYears = reportedAgeMonths/12;

            if(isLeapYear(calcDOBDate.getFullYear())) reportedAgeMonths = Math.floor(reportedAgeDays)/30.5;

            if(Math.ceil(reportedAgeDays)<=28){
                reportedAgeNode.value=Math.floor(reportedAgeDays);
                reportedAgeUnitsNode.value="D";
            } else if(Math.ceil(reportedAgeDays)>28 && reportedAgeYears<1)  {
            	if(Math.ceil(reportedAgeDays) > 28 && Math.ceil(reportedAgeDays) < 31)
        			reportedAgeMonths = reportedAgeMonths + 1;
        				
                reportedAgeNode.value=Math.floor(reportedAgeMonths);
                reportedAgeUnitsNode.value="M";
            } else  {
                // get rough estimated year age
                var yearDiff = asOfDate.getFullYear() - calcDOBDate.getFullYear();
                //need to determine whether birthday has happened
                if(asOfDate.getMonth()<calcDOBDate.getMonth())
                    yearDiff = yearDiff-1;
                else if(asOfDate.getMonth()==calcDOBDate.getMonth()){
                    if(asOfDate.getDate()<calcDOBDate.getDate())
                        yearDiff = yearDiff-1;
                }
                reportedAgeNode.value=yearDiff;//Math.floor(reportedAgeYears);
                reportedAgeUnitsNode.value="Y";
            //this is only for leap year, if DOB is 02/29/YYYY and is leap year and is almost one year old, it should be 11 months
                if(calcDOBDate.getMonth() == 1 && calcDOBDate.getDate()==29 && reportedAgeYears > 1 && reportedAgeYears < 1.1 && isLeapYear(calcDOBDate.getFullYear()))
                {
                    currentAgeNode.innerText="11";
                    currentAgeUnitsNode.innerText="Months";
                }
            }

        } else {
            reportedAgeNode.value="";
            reportedAgeUnitsNode.value="";
        }
        autocompTxtValuesForJSP();
    }

    //alert("dobNode.value in calc:" + dobNode.value);
    //alert("calcDOBNode.value in calc:" + calcDOBNode.value);
    //alert("reportedAgeNode.value in calc:" + reportedAgeNode.value);
}

function isLeapYear(varyear)
{
   var leapyear = false;
   if((varyear% 4) == 0) leapyear = true;
   if((varyear% 100) == 0) leapyear = false;
   if((varyear% 400) == 0) leapyear = true;
   return leapyear;
}

function checkMaxLength(sTxtBox)
{
    maxlimit = 2000;
    if (sTxtBox.value.length > maxlimit)
    {
        sTxtBox.value = sTxtBox.value.substring(0, maxlimit);
    }
}
function checkTextAreaLength(sTxtBox, maxLen)
{
    if (sTxtBox.value.length > maxLen)
    {
        sTxtBox.value = sTxtBox.value.substring(0, maxLen);
        var theDateEle = getElementByIdOrByName(sTxtBox.id + "Date");
        var theUserEle = getElementByIdOrByName(sTxtBox.id + "User");
        if (theDateEle != null && theUserEle != null) {
                rollingNoteSetUserDate(sTxtBox.id);
        }
    }
}
function swallowEnter()
{
    if(event.keyCode==13){
        event.keyCode = null;
        return false;
    }
}

function isNumeric(pTextbox)
{
    var varVal = pTextbox.value;
    var y = 0; var s = ""; var c = "";
    y = varVal.length;
    var varKeys = [ 0, 8, 9, 16, 35, 36, 37, 38, 39, 40, 46];
    for(x=0; x<y; x++) {
        c = varVal.substr(x, 1);
        if(isInteger(c)) s += c;
         pTextbox.value = s;
    }
}


function isNumericString(pString)
{
    //  Establish a pattern:  one or more digits.
    var varPattern = /^\d+$/;
    //  Perform a regular expression match.
    var varMatch = pString.match(varPattern);
    if(varMatch == null)
    {
        //  The match failed.
        //  The string is not numeric.
        return false;
    }
    //  The match succeeded.
    //  The string is numeric.
    return true;
}


function displayInvHistory(oSwitchImage)
{
    var tbodyElts = invHistoryTable.getElementsByTagName("tbody");
    var tbody = tbodyElts[0];
    var trNodes = tbody.getElementsByTagName("tr");

    if(oSwitchImage.src.search(/minus_sign.gif/)==-1){
        oSwitchImage.src = "minus_sign.gif";
    }
    else {
        oSwitchImage.src = "plus_sign.gif";
    }

    for (var i=0; i < trNodes.length; i++)
    {
        if (i != 0)
        {
            if(trNodes[i].style.display == "none") {
                trNodes[i].style.display = "";
            }
            else {
                trNodes[i].style.display = "none";
            }
        }
    }
}

function genProviderAutocomplete(txt_id, div_id)
{
    new Ajax.Autocompleter(txt_id, div_id, "/nbs/getAutocompleterChoices",
            {paramName: "value",parameters : "type=investigator"});
}

function enabledDateAssignedToInvestigation()
{
	if(getElementByIdOrByName("INV110")!=null && getElementByIdOrByName("INV110")!=undefined){
	    getElementByIdOrByName("INV110").disabled=false;
	    getElementByIdOrByName("INV110L").className ="InputFieldLabel";
	    getElementByIdOrByName("INV110L").style.color="#000";
	    $j("#INV110").parent().parent().find("img").attr("disabled", false);
	    $j("#INV110").parent().parent().find("img").attr("tabIndex", "0");
	    
	}
}

function disabledDateAssignedToInvestigation()
{
    // disable the date assigned to investigation field (INV110).
    getElementByIdOrByName("INV110").value="";
    getElementByIdOrByName("INV110").disabled=true;
    $j("#INV110").parent().parent().find("img").attr("disabled", true);
    $j("#INV110").parent().parent().find("img").attr("tabIndex", "-1");
    
	
    getElementByIdOrByName("INV110L").className = "InputDisabledLabel";
    getElementByIdOrByName("INV110L").style.color="#666666";
}

function getProvider(identifier)
{
 	//alert('before clear: ' + identifier);
	clearProvider(identifier);
	//alert('After clear: ' + identifier);
	var urlToOpen = "/nbs/Provider.do?method=searchLoad&identifier="+identifier;
	var params="left=100, top=50, width=650, height=500, menubar=no,titlebar=no,toolbar=no,scrollbars=yes,location=no,status=yes,top=150,left=150";
	var pview = getElementByIdOrByName("pageview");
	pview.style.display = "block";
	 var o = new Object();
		    o.opener = self;

			var dialogFeatures =  "dialogWidth: " + 760 + "px;dialogHeight: " +
	            700 + "px;status: no;unadorned: yes;scroll: yes;help: no;" +
		            (true ? "resizable: yes;" : "");
					
					
		//	if(window.showModalDialog==undefined)
			//	ChildWindowHandle = window.open(urlToOpen,"",dialogFeatures);
		//	else
			//	var modWin = window.showModalDialog(urlToOpen,o,dialogFeatures);
			
			var modWin = openWindow(urlToOpen, o,dialogFeatures, pview, "");
			
	//newwindow = window.open(urlToOpen,'Provider', params);
	//newwindow.focus();
}

function clearProvider(identifier)
{
	var code = $(identifier+"Text");
	var zzForm = JPageForm;
    if (identifier.startsWith("CON"))
		zzForm = JCTContactForm;
	code.value = "";
	dwr.util.setValue(identifier, "");
	dwr.util.setValue(identifier+"Error", "");
	getElementByIdOrByName(identifier+"Text").style.visibility="visible";
	getElementByIdOrByName(identifier+"Icon").style.visibility="visible";
	getElementByIdOrByName(identifier+"CodeLookupButton").style.visibility="visible";
	getElementByIdOrByName("clear"+identifier).className="none";
	getElementByIdOrByName(identifier+"SearchControls").className="visible";

    // if the identifier is investigator
    if (identifier == "INV180") {
        disabledDateAssignedToInvestigation();
    }
    if (identifier == "NBS186" && getElementByIdOrByName('NBS187') != null) {  //Inteviewer
    	      pgRequireNotElement("NBS187"); //Date
    } 
    if (getElementByIdOrByName('NBS139') != null)
	  stdUpdateCurrentProvider();
	zzForm.clearDWRInvestigator(identifier);
}
function clearOtherContact(identifier)
{

	dwr.util.setValue(identifier, "");
	dwr.util.setValue(identifier+"Error", "");
	getElementByIdOrByName(identifier+"Icon").style.visibility="visible";
	getElementByIdOrByName("clear"+identifier).className="none";
	getElementByIdOrByName(identifier+"SearchControls").className="visible";
	JCTContactForm.clearDWRContact(identifier);
}
function getDWRProvider(identifier)
{
 dwr.util.setValue(identifier, "");
 var code = $(identifier+"Text");
 var codeValue= code.value;
  var zzForm = JPageForm;
  if (identifier.startsWith("CON"))
 	zzForm = JCTContactForm;
  zzForm.getDwrInvestigatorDetails(codeValue,identifier, function(data) {
       dwr.util.setEscapeHtml(false);
       if(data.indexOf('$$$$$') != -1) {
	         var code = $(identifier+"Text");
	         code.value = "";
	         dwr.util.setValue(identifier, "");
	         dwr.util.setValue(identifier+"Error", "");

	         dwr.util.setValue("investigator.personUid", data.substring(0,data.indexOf('$$$$$')));
	         dwr.util.setValue(identifier, data.substring(data.indexOf('$$$$$')+5));

	        getElementByIdOrByName(identifier+"Text").style.visibility="hidden";
	        getElementByIdOrByName(identifier+"Icon").style.visibility="hidden";
	        getElementByIdOrByName(identifier+"CodeLookupButton").style.visibility="hidden";
	        getElementByIdOrByName("clear"+identifier).className="";
	        getElementByIdOrByName(identifier+"SearchControls").className="none";

	        // enable the date assigned to investigator field
	        if (identifier == "INV180") {
	            enabledDateAssignedToInvestigation();
	        }
	        if (getElementByIdOrByName("attributeMap."+identifier+"Uid") != null) {
	        	getElementByIdOrByName("attributeMap."+identifier+"Uid").value = data.substring(0,data.indexOf('$$$$$'));
	        	if (identifier == "NBS139" || identifier == "NBS145" || identifier == "NBS161" || identifier == "NBS186" || identifier == "NBS197") {
				stdUpdateCurrentProvider(identifier);
			}
			if (identifier == "NBS186") { //Interviewer
				pgRequireElement("NBS187"); //Date
			}
	        }
       } else {
           dwr.util.setValue(identifier+"Error", data);
            getElementByIdOrByName(identifier+"Text").style.visibility="visible";
            getElementByIdOrByName(identifier+"Icon").style.visibility="visible";
            getElementByIdOrByName(identifier+"CodeLookupButton").style.visibility="visible";
            getElementByIdOrByName("clear"+identifier).className="none";
            getElementByIdOrByName(identifier+"SearchControls").className="visible";
       }
    });
}

function cleanupPatientRacesViewDisplay()
{
    var container = getElementByIdOrByName("patientRacesViewContainer");
    if (container != null) {
        var value = container.innerHTML;
        value = jQuery.trim(value);
        var loc = value.lastIndexOf(",");
        if (loc != -1) {
            if (loc + value.substring(loc, value.length).length == value.length) {
                container.innerHTML = value.substring(0, loc);
            }
        }
    }
}

function cleanupPatientRacesViewDisplay2()
{
    var container = getElementByIdOrByName("patientRacesViewContainer2");
    if (container != null) {
        var value = container.innerHTML;
        value = jQuery.trim(value);
        var loc = value.lastIndexOf(",");
        if (loc != -1) {
            if (loc + value.substring(loc, value.length).length == value.length) {
                container.innerHTML = value.substring(0, loc);
            }
        }
    }
}

function genAutocomplete(txt_id, div_id)
{
    new Ajax.Autocompleter(txt_id, div_id, "/nbs/getAutocompleterChoices", {paramName: "value",parameters : "type=city"});
}

function disablePrintLinks() {
	$j("a[href]:not([href^=#])").removeAttr('href');
}

 function genOrganizationAutocomplete(txt_id, div_id){
     new Ajax.Autocompleter(txt_id, div_id, "/nbs/getAutocompleterChoices", {paramName: "value",parameters : "type=organization"});
   }

function getDWROrganization(identifier)
    {
	 dwr.util.setValue(identifier, "");
	 var code = $(identifier+"Text");
     var codeValue= code.value;
     var zzForm = JPageForm;
	 if (identifier.startsWith("CON"))
		zzForm = JCTContactForm;
     zzForm.getDwrOrganizationDetails(codeValue,identifier, function(data) {
           dwr.util.setEscapeHtml(false);
           if(data.indexOf('$$$$$') != -1) {
        	   var code = $(identifier+"Text");
             code.value = "";
             dwr.util.setValue(identifier, "");
             dwr.util.setValue(identifier+"Error", "");
             if (getElementByIdOrByName("attributeMap."+identifier+"Uid") != null) {
 	        	getElementByIdOrByName("attributeMap."+identifier+"Uid").value = data.substring(0,data.indexOf('$$$$$'));
             }
             dwr.util.setValue("organization.organizationUid", data.substring(0,data.indexOf('$$$$$')));
             dwr.util.setValue(identifier, data.substring(data.indexOf('$$$$$')+5));

             getElementByIdOrByName(identifier+"Text").style.visibility="hidden";
             getElementByIdOrByName(identifier+"CodeLookupButton").style.visibility="hidden";
             getElementByIdOrByName("clear"+identifier).className="";
             getElementByIdOrByName(identifier+"SearchControls").className="none";
           } else {

        	   dwr.util.setValue(identifier+"Error", data);
               getElementByIdOrByName(identifier+"Text").style.visibility="visible";
               getElementByIdOrByName(identifier+"CodeLookupButton").style.visibility="visible";
               getElementByIdOrByName("clear"+identifier).className="none";
               getElementByIdOrByName(identifier+"SearchControls").className="visible";
           }
           
           if(identifier =="NBS_LAB365"){//If we are calling from Reporting Facility, the Resulted Test dropdown will be populated.
        	   codeLookupLaboratoryReport('entity-table-Org-ReportingOrganizationUID', document, "false");
        	   populateParticipationFromOne(getElementByIdOrByName('pageClientVO.answer(NBS_LAB267)'),'NBS_LAB365','NBS_LAB367');
     		}
        });
    }

 function getReportingOrg(identifier){
	 clearOrganization(identifier);
	 var urlToOpen = "/nbs/PamOrganization.do?method=searchOrganization&identifier="+identifier;
	 var params="left=100, top=50, width=650, height=500, menubar=no,titlebar=no,toolbar=no,scrollbars=yes,location=no,status=yes,top=150,left=150";
	 var varicella = getElementByIdOrByName("pageview");
	 varicella.style.display = "block";
     var o = new Object();
	 o.opener = self;
	// var modWin = window.showModalDialog(urlToOpen,o, "dialogWidth: " + 760 + "px;dialogHeight: " +
	  //          700 + "px;status: no;unadorned: yes;scroll: yes;help: no;" +
      //      (true ? "resizable: yes;" : ""));
	 
	 var dialogFeatures = "dialogWidth: " + 760 + "px;dialogHeight: " +
	            700 + "px;status: no;unadorned: yes;scroll: yes;help: no;" +
     (true ? "resizable: yes;" : "");
	 var modWin = openWindow(urlToOpen, o,dialogFeatures, varicella, "");
	 
	 
	// if(identifier =="NBS_LAB365")//If we are calling from Reporting Facility, the Resulted Test dropdown will be populated.
  	  // codeLookupLaboratoryReport('entity-table-Org-ReportingOrganizationUID');

	 
       // newwindow = window.open(urlToOpen,'Organization', params);
       // newwindow.focus();


 }
 

 /***************************************Beginning of methods related to Default Values Buttons**********************************************/
 
	
 
/**
 * populateSetValuesButton: depending on block_nm, we will know if the buttons are inside a repeating block or not.
 * We will indicate this as part of the Default value, with a preceing R if repeating, or a preceding D if discrete.
 * @param defaultValue
 */
 function populateSetValuesButton(defaultValue, elem){
 
	var preffix = "";
	
	 if(defaultValue!=null && defaultValue.length>2){
		 preffix= defaultValue.substring(0,3);
		 defaultValue = defaultValue.substring(3);
	 }
	 
	 
	if(preffix=="R==")
		populateSetValuesButtonRepeating(defaultValue, elem);
	else
		populateSetValuesButtonDiscrete(defaultValue);

}

 /**
  * populateSetValuesButtonDiscrete: this method will set the default value in the discrete questions
  * 
  * @param defaultValue
  */
 
 function populateSetValuesButtonDiscrete(defaultValue){
	 
		const myArray = defaultValue.split("~");
		var deleteWorkflow = false;//to know if we need to show the double dare message or not.
		
		
		if(defaultValue!=null && defaultValue.indexOf("[CLEAR]")!=-1){//it is the clear discrete functionality (careful with this, if in future we do a mix of blanks and no blanks in the discrete (which I don't this this will be the case, the double dare message will show).
			var confirmMsg="This action will delete all values entered. Are you sure you want to continue?";
			deleteWorkflow = true;
		}
		
	        if (!deleteWorkflow || (deleteWorkflow && confirm(confirmMsg))){
				for (let i = 0; i < myArray.length; i++) {
	
				const array2 = myArray[i].split("^");
				
					var key = array2[0];
					var code = array2[1].trim();
	
					if (code == "[CLEAR]")//Used to be BLANK
						code = "";//either we do this, or we change the default value from [CLEAR] to nothing, and it will work automatically.
					
					getElementByIdOrByName(key).value=code;		
				
			}
			
			autocompTxtValuesForJSP();
			if(deleteWorkflow)
				$j("#NBS456").change();//This is hardcoded, to make sure if there's any value in the OTher field, that after clearing the field, the business rule is triggered (menaing the Other field is disabled).
        }
 }
 

 /**
  * getAddEditViewModeOfRepeatingBlock: returns true if the repeating block is in Add mode (meaning, the Add button is visible, which also means, no View / Edit icon has been clicked from any of the repeating block rows.
  * it returns false, if the repeating block is in View or Edit mode (meaning, View or Edit icon from the repeating block has been clicked).
  * */
 
 function getAddEditViewModeOfRepeatingBlock(elem){
	 
	 //var isAdd = true;
	 
	 var subSection = getSubsectionIdOfRepeatingBlock(elem);// "NBS_UI_GA27033";//$j(elem).parents('table[class="subSect batchSubSection"]')[0].id;//getting the subsection id from the repeating block//"NBS_UI_GA27033";

	var addRow = "AddButtonToggle"+subSection;

	 var isAdd = $j("#"+addRow).is(":visible")
	 
	 return isAdd;
	 
 }
 
 /**
  * getSubsectionIdOFRepeatingBlock: returns the id of the repeating block where the element
  * received as a paratemer is inside.
  * @param elem
  * @returns
  */
 
 function getSubsectionIdOfRepeatingBlock(elem){
	 
	 var subsectionId = $j(elem).parents('table[class="subSect batchSubSection"]')[0].id;
	 
	 return subsectionId;
	 
 }
 
 /**
  * populateSetValuesButtonRepeating: this is the method called from the Default value buttons.
  * defaultValue will be either R==default_value indicated in the DB or D==default_value indicated in the database
  * that way we know if we need to handle it as discrete questions or repeating block.
  * @param defaultValue
  * @param elem
  */
 
 function populateSetValuesButtonRepeating(defaultValue, elem){
	//Check if the button is Add, otherwise, we are either on Add or Edit mode, and we should not click any of the default values
	//true, if we are on add mode, false if we are on either edit or view mode
	var AddMode = getAddEditViewModeOfRepeatingBlock(elem);
	
	if(AddMode){
		 var subSection =getSubsectionIdOfRepeatingBlock(elem);//getting the subsection id from the repeating block
		 var isFirefox = false;
		 var bulk = $j(elem).attr("name");
		 var browserAndVersion = browserAndVersionDetection();
		 if(browserAndVersion!=null && browserAndVersion.indexOf("Firefox")!=-1)//it's firefox
			 isFirefox = true;
		 
	
		 if(defaultValue.trim()=="[CLEAR]"){//if the default value is [CLEAR] that means that user clicked the CLEAR button
		
			 var confirm = deleteRowFromSubsection(subSection, true);
			 if(confirm)//to avoid calling again with the rest of the rows, if the user pressed cancel
			 deleteRowFromSubsection(subSection, false);//Issue in Chrome, not deleting one row, if async is true.
			 
		 }
		else{
		
		//	DWREngine.setAsync(false);

			if(elem.id == "NBS_SUS100"){//Fatima: we need to hardcoded this because there's no other information from the metadata to know this button needs to show the popup and the others don't/			
				OpenSusceptibilitiesTB(elem.id);
			}
			else{
				addDefaultValuesToSubSection(defaultValue, subSection,"");
			}	
			
		}
		 
		// DWREngine.setAsync(true);//Fatima: we need this for Chrome and Edge, otherwise, one of the rows never gets deleted, probably asynchronous issue.
			
	}else
		alert("Please click Add New or Update to continue.");
 }
 
 
	/**
	 * addDefaultValuesToSubSection: the default values will be added to a map and we will call another method to add each of the rows to the subsection (repeating block workflow).
	 * If there are values coming from the Susceptibilities pop up (bulkValues), they will be added to each of the rows.
	 * @param defaultValue
	 * @param subSection
	 */
 
	 function addDefaultValuesToSubSection (defaultValue, subSection, bulkValues){

	 var qId;
	 var code;
	 var arrayOfMaps = new Array(); 

	 var rows = defaultValue.split("|");
	 for (var j=0;j<rows.length;j++){
		 var row  = rows[j];
		 var map = {};
		 if(row!=null && row.trim()!=""){
			 
			 if(bulkValues!="")
				row=row+"~"+bulkValues;//Adding the values set in the popup, if any.
			 var myArray = row.split("~");
			 	
			 	for (var i = 0; i < myArray.length; i++) {
			 		const array2 = myArray[i].split("^");
			 		//for (let x = 0; x < array2.length; x++) {
			 			
			 			
			 qId = array2[0];
			 code = array2[1];
			 
			 qId = qId.trim();
			 code = code.trim();
			 map[qId] = code;
			 }
		
			 	
			 	arrayOfMaps.push(map);
			 	
			
			 }
	 }
	 addValuesToRepeatingblock(arrayOfMaps,subSection);
	 
	 }

	 
	 /**
	  * addValuesToRepeatingblock: this method will insert each of the rows in the repeating block.
	  * @param map
	  * @param subSecNm
	  */
	 
	 function addValuesToRepeatingblock(arrayOfMaps,subSecNm){
		 
		 
		 dwr.engine.beginBatch();

		 var pattern = "pattern"+ subSecNm  ;
		 var questionbody = "questionbody"+ subSecNm  ;	
		 var batchentry = { subsecNm:subSecNm, id:viewed,answerMaps:arrayOfMaps};

		 JPageForm.setAnswersBatchEntry(batchentry,subSecNm);//"io.undertow.servlet.spec.HttpSessionImpl@db68ee2");//TODO: see if it can be faster.
		 fillTable(subSecNm,pattern,questionbody);

		 dwr.engine.endBatch();

	}
	 
	 
	 /**
	  * deleteRowFromSubsection: this method will delete all the rows in the batch entry. It follows same logic than the one from Lab Report when Program area is changed
	  * and there are vales in the Resulted test repeating block.
	  * @param subsectionName
	  */

	 function deleteRowFromSubsection(subsectionName, showConfirmation){
	 	
		    var confirmMsg="This action will delete all values entered in the batch entry. Are you sure you want to continue?";
		    var confirmYes = true;
		    
		    if(showConfirmation)
		    	confirmYes = confirm(confirmMsg);
		    
	        if (confirmYes){
	        	
				blockUIAndDeleteRows(subsectionName);
		 		
	        }
	        
	        return confirmYes;
	 	}

	 /**
	  * blockUIAndDeleteRows: this method will first block the UI to show a message to let the user know the data is being cleared from the batch entry,
	  * and then, it will delete all the rows from the batch entry. We need to set a timeout to make sure the message shows before clearing the data
	  * otherwise, asyncronous behavior could interfare with Chrome.
	  * 
	  * @param subsectionName
	  */
	 
	 function blockUIAndDeleteRows (subsectionName){
		 
		 blockUiWhileClear();
		 
		 setTimeout("deleteAllRows("+subsectionName+")", 10);//This is to make sure we block the page before deleting the rows.

	 }
	 
	 /**
	  * deleteAllRows: based on the subsection name, all the rows of the batch entry with that subsection name will be removed.
	  * @param subsectionName
	  */
	 
	 function deleteAllRows(subsectionName){
		 
		 if(subsectionName.id!=null && subsectionName!=undefined)//Somehow the whole subsection was being passed instead of the id, so if that is the case, we will read the id.
			 subsectionName = subsectionName.id;
		 
		 
		 if(getElementByIdOrByName(subsectionName)!=null && getElementByIdOrByName(subsectionName)!=undefined){ 
	
		 			var deleteIcons = getElementByIdOrByName(subsectionName).getElementsByClassName("cursorHand");
	
		 			var viewIconsCount = deleteIcons.length;
	
		 			var methods="";
	
		 			
	
		 			for(var i=0; i<viewIconsCount; i++){
						var deleteIcon = deleteIcons[i];
		 				if(deleteIcon.getAttribute("id")!=null && deleteIcon.getAttribute("id").indexOf("delete")==0){//adding it only to view and edit, not delete
	
		 					var method = deleteIcon.getAttribute("onClick");
	
		 					var id = deleteIcon.getAttribute("id");
	
	
	
		 					if(id!="delete"+subsectionName){
	
		 						if(method.indexOf("return")!=-1){
	
		 							method = method.substring(0,method.indexOf("return"));
	
		 						}
	
		 						method=method.replace("this.id","'"+id+"'").replace(")",",'true')");//true added at the end in order to not show the confirmation message
	
		 						methods=(method)+";"+methods;
	
		 					}
	
		 				}
	
		 			}	
	
		 		eval(methods);
	
		 		
	
		 		}
				
				 setTimeout("$j.unblockUI()", 10);//This is to make sure we block the page before deleting the rows.
	 }
	 
	 
 /***************************************End of methods related to Default Values Buttons**********************************************/
 
	 
function getPatient(searchType){
	 var urlToOpen = "/nbs/PatientEntitySearch.do?method=searchLoad";
	 var params="left=100, top=50, width=650, height=500, menubar=no,titlebar=no,toolbar=no,scrollbars=yes,location=no,status=yes,top=150,left=150";
	 var parentPage = getElementByIdOrByName("pageview");
	 parentPage.style.display = "block";
     var o = new Object();
	 o.opener = self;
	// var modWin = window.showModalDialog(urlToOpen,o, "dialogWidth: " + 760 + "px;dialogHeight: " +
	  //          700 + "px;status: no;unadorned: yes;scroll: yes;help: no;" +
      //      (true ? "resizable: yes;" : ""));
	 
	 var dialogFeatures = "dialogWidth: " + 1200 + "px;dialogHeight: " +
	            700 + "px;status: no;unadorned: yes;scroll: yes;help: no;" +
     (true ? "resizable: yes;" : "");
	 var modWin = openWindow(urlToOpen, o,dialogFeatures, parentPage, "");
	 
       // newwindow = window.open(urlToOpen,'Organization', params);
       // newwindow.focus();


 }

 function clearOrganization(identifier){
	 var code = $(identifier+"Text");
	   var zzForm = JPageForm;
	   if (identifier.startsWith("CON"))
 			zzForm = JCTContactForm;
	   
	   if (code != null)
		   code.value = "";
		
	   dwr.util.setValue(identifier, "");
		dwr.util.setValue(identifier+"Error", "");
		
		if(getElementByIdOrByName(identifier+"Text")!=null)
			getElementByIdOrByName(identifier+"Text").style.visibility="visible";
		if(getElementByIdOrByName(identifier+"Icon")!=null)
			getElementByIdOrByName(identifier+"Icon").style.visibility="visible";
		if(getElementByIdOrByName(identifier+"CodeLookupButton")!=null)
			getElementByIdOrByName(identifier+"CodeLookupButton").style.visibility="visible";
		if(getElementByIdOrByName("clear"+identifier)!=null)
			getElementByIdOrByName("clear"+identifier).className="none";
		if(getElementByIdOrByName(identifier+"SearchControls")!=null)
			getElementByIdOrByName(identifier+"SearchControls").className="visible";
		
		zzForm.clearDWROrganization(identifier);
		
		if(identifier == "NBS_LAB365"){//Reporting Facility will Clear:
			clearFieldsAssociatedToReportingFacility(document);
				
			if(getElementByIdOrByName('pageClientVO.answer(NBS_LAB267)').checked==true)
				clearOrganization("NBS_LAB367");
		}
}

 
 function clearFieldsAssociatedToReportingFacility(parentDoc){
	 
	 	getElementByIdOrByNameNode("NBS_LAB220_textbox", parentDoc).value="";//Resulted Test dropdown value selected
	 	getElementByIdOrByNameNode("NBS_LAB280_textbox", parentDoc).value="";//Organism Name value selected
		hideOrganism(parentDoc);
		deleteSubFormValues(parentDoc);
		clearDropdown("NBS_LAB220", parentDoc);// - the Resulted Test dropdown
		clearSingleSelectWithSearchButton('NBS_LAB220', parentDoc);
		clearSingleSelectWithSearchButton('NBS_LAB112', parentDoc);//Click on Clear/Reassign Ordered Test button if applicable
		clearDropdown("NBS_LAB112", parentDoc);// - Ordered Test
		deleteResultedTestBlockAndSubForms(parentDoc);
		
		
		//Numeric result:
		clearValueFromTextBox("NBS_LAB364", parentDoc);
		
		//Units
		clearValueFromSelect("LAB115", parentDoc);
		
		//Text Result:
		clearValueFromTextBox("NBS_LAB208", parentDoc);
		
		//Reference Range From: 	
		clearValueFromTextBox("NBS_LAB119", parentDoc);
		
		//Reference Range To: 	
		clearValueFromTextBox("NBS_LAB120", parentDoc);
		
		//Status:
		clearValueFromSelect("NBS_LAB207", parentDoc);
		
		//Result Comments: 	
		clearValueFromTextBox("NBS_LAB104", parentDoc);
		
		clearMyArray();
		
 }
 
 

 function clearMyArray(){
	 
	 
		if (myArray!=null && myArray!='undefined')
			myArray = new Array();
		
 }
 
 
 function clearFieldsAssociatedToProgramArea(parentDoc){
	 
	 if(parentDoc==null || parentDoc == undefined)
		parentDoc = document;
	 
		getElementByIdOrByNameNode("NBS_LAB220_textbox", parentDoc).value="";//Resulted Test dropdown value selected
	 	getElementByIdOrByNameNode("NBS_LAB280_textbox", parentDoc).value="";//Organism Name value selected
		hideOrganism(parentDoc);
		deleteSubFormValues(parentDoc);
		clearDropdown("NBS_LAB220", parentDoc);// - the Resulted Test dropdown
		clearSingleSelectWithSearchButton('NBS_LAB220', parentDoc);
		deleteResultedTestBlockAndSubForms(parentDoc);
		
		
		
		//Numeric result:
		clearValueFromTextBox("NBS_LAB364", parentDoc);
		
		//Units
		clearValueFromSelect("LAB115", parentDoc);
		
		//Text Result:
		clearValueFromTextBox("NBS_LAB208", parentDoc);
		
		//Reference Range From: 	
		clearValueFromTextBox("NBS_LAB119", parentDoc);
		
		//Reference Range To: 	
		clearValueFromTextBox("NBS_LAB120", parentDoc);
		
		//Status:
		clearValueFromSelect("NBS_LAB207", parentDoc);
		
		//Result Comments: 	
		clearValueFromTextBox("NBS_LAB104", parentDoc);
	
		clearMyArray();
		
 }
 /**
  * deleteResultedTestOrderedTestAndSubForms: method called as part of business rules in case Resulted Test is cleared out
  */
 function deleteResultedTestBlockAndSubForms(parentDoc){
	 
	if(parentDoc==null || parentDoc == undefined)
		parentDoc = document;
	
	deleteResultedTestRepeatingBlock(parentDoc);//clear the Resulted Test Repeating block (and the subforms)

 }

function updateHospitalInformationFields(dropDownElementId, resultSpanId,admissionDtId, dischargeDtId, durationOfStay)
{

    var dropDownElement = getElementByIdOrByName(dropDownElementId);
    var codeClearButtonId = resultSpanId + "CodeClearButton";
    var searchButtonId =  resultSpanId + "Icon";
    var quickCodesearchTextBoxId = resultSpanId + "Text";
    var quickCodeLookupButtonId = resultSpanId + "CodeLookupButton";
    var searchControlsSpanId = resultSpanId + "SearchControls";
    var clearControlSpanId = "clear" + resultSpanId;
    var hospitalInformationLabel = resultSpanId + "HospitalInformationLabel";
    var hospitalSelectedLabel = resultSpanId + "HospitalSelectedLabel";
    var admissionDtIdLabel = getElementByIdOrByName(admissionDtId+"L");
    var dischargeDtIdLabel = getElementByIdOrByName(dischargeDtId+"L");
    var durationOfStayLabel = getElementByIdOrByName(durationOfStay+"L");

    if (dropDownElement != null) {
        var optionSelected = null;
        if (dropDownElement.selectedIndex >= 0) {
            optionSelected = dropDownElement.options[dropDownElement.selectedIndex].value;
        }
	    if (optionSelected == "Y") {

	        // enable all relevant elements
	        if (getElementByIdOrByName(codeClearButtonId) != null) {
	            getElementByIdOrByName(codeClearButtonId).disabled = false;
	        }
	        if (getElementByIdOrByName(searchButtonId) != null) {
	            getElementByIdOrByName(searchButtonId).disabled = false;
	        }
	        if (getElementByIdOrByName(quickCodesearchTextBoxId) != null) {
	            getElementByIdOrByName(quickCodesearchTextBoxId).disabled = false;
	        }
	        if (getElementByIdOrByName(quickCodeLookupButtonId) != null) {
	            getElementByIdOrByName(quickCodeLookupButtonId).disabled = false;
	        }
	        if (getElementByIdOrByName(hospitalInformationLabel) != null) {
	            getElementByIdOrByName(hospitalInformationLabel).className = "InputFieldLabel";
	        }
	        if (getElementByIdOrByName(hospitalSelectedLabel) != null) {
	            getElementByIdOrByName(hospitalSelectedLabel).className = "InputFieldLabel";
	        }
	        if (admissionDtIdLabel != null) {
	        	admissionDtIdLabel.style.color="#000";

			enableAllBrowsers($j("#" + admissionDtId).parent().parent().find(":input"));
			dischargeDtIdLabel.style.color="#000";

			enableAllBrowsers($j("#" + dischargeDtId).parent().parent().find(":input"));
			durationOfStayLabel.style.color="#000";

			enableAllBrowsers($j("#" + durationOfStay).parent().parent().find(":input"));
		}
	    }
	    else {

	        // disable all relevant elements
	        if (getElementByIdOrByName(codeClearButtonId) != null) {
	            getElementByIdOrByName(codeClearButtonId).disabled = true;
	        }
	        if (getElementByIdOrByName(searchButtonId) != null) {
	            getElementByIdOrByName(searchButtonId).disabled = true;
	        }
	        if (getElementByIdOrByName(quickCodesearchTextBoxId) != null) {
	            getElementByIdOrByName(quickCodesearchTextBoxId).disabled = true;
	        }
	        if (getElementByIdOrByName(quickCodeLookupButtonId) != null) {
	            getElementByIdOrByName(quickCodeLookupButtonId).disabled = true;
	        }
	        if (getElementByIdOrByName(resultSpanId) != null) {
	            getElementByIdOrByName(resultSpanId).innerHTML = "";
	        }
	        if (getElementByIdOrByName(hospitalInformationLabel) != null) {
	            getElementByIdOrByName(hospitalInformationLabel).className = "InputDisabledLabel";
	        }
	        if (getElementByIdOrByName(hospitalSelectedLabel) != null) {
	            getElementByIdOrByName(hospitalSelectedLabel).className = "InputDisabledLabel";
	        }
	        if (admissionDtIdLabel != null) {
	        	admissionDtIdLabel.style.color="#666666";

			disableAllBrowsers($j("#" + admissionDtId).parent().parent().find(":input"));
				   	   
			$j("#" + admissionDtId).parent().parent().find(":input").val("");
		}
		if (dischargeDtIdLabel != null) {
			dischargeDtIdLabel.style.color="#666666";

			disableAllBrowsers($j("#" + dischargeDtId).parent().parent().find(":input"));
			
			$j("#" + dischargeDtId).parent().parent().find(":input").val("");
		}
		if (durationOfStayLabel != null) {
			durationOfStayLabel.style.color="#666666";

			disableAllBrowsers($j("#" + durationOfStay).parent().parent().find(":input"));
			$j("#" + durationOfStay).parent().parent().find(":input").val("");
		}

	        clearOrganization(resultSpanId);
	    }
    }
}


function onLoadIllnessOnsetAgeCalc()
{
    var illnessOnsetAgeNode = getElementByIdOrByName("INV143");
    var illnessOnsetAgeUnitsNode = getElementByIdOrByName("INV144");
    var dobNode = getElementByIdOrByName("DEM115");
    var illnessOnsetDate = getElementByIdOrByName("INV137");
    var defaultAgeAtIllness = "";
    if(illnessOnsetAgeNode.value == "" && illnessOnsetAgeUnitsNode.value == "")
    {
    	calculateIllnessOnsetAge();

    }
}

function pgCalculateIllnessOnsetAge(dobId,onsDtId,onsAgeId,onsAgeUID) {
    //alert("in pgCalculateIllnessOnsetAge()");
    var illnessOnsetAgeNode = getElementByIdOrByName(onsAgeId);
    var illnessOnsetAgeUnitsNode = getElementByIdOrByName(onsAgeUID);

    var dobNode = getElementByIdOrByName(dobId);
    // FIXME : make sure it is DEM115
    var calcDOBNode = getElementByIdOrByName(dobId);
    var illnessOnsetDateNode = getElementByIdOrByName(onsDtId);

    if(dobNode.value!="" && isDate(dobNode.value)){
        calcDOBNode.value = dobNode.value;
    }
    var calcDOBDate = new Date(calcDOBNode.value);
	if((dobNode.value!=null && dobNode.value!= "")&& (illnessOnsetDateNode.value!=null && illnessOnsetDateNode.value!= "") )
	{
        var illnessOnsetDate = new Date(illnessOnsetDateNode.value);

        //alert("should reset reportedAgeNode");
        illnessOnsetAgeNode.value="";
        illnessOnsetAgeUnitsNode.value="";

        var illnessOnsetAgeMilliSec = illnessOnsetDate.getTime() - calcDOBDate.getTime();
        if (illnessOnsetAgeMilliSec < 0) {
	        //alert("Illness onset before birth date?");
	        return;
        }
        if(!window.isNaN(illnessOnsetAgeMilliSec)){
            var illnessOnsetAgeSeconds = illnessOnsetAgeMilliSec/1000;
            var illnessOnsetAgeMinutes = illnessOnsetAgeSeconds/60;
            var illnessOnsetAgeHours = illnessOnsetAgeMinutes/60;
            var illnessOnsetAgeDays = illnessOnsetAgeHours/24;
            var illnessOnsetAgeMonths = illnessOnsetAgeDays/30.41;
            var illnessOnsetAgeYears = illnessOnsetAgeMonths/12;

            if(isLeapYear(calcDOBDate.getFullYear())) illnessOnsetAgeMonths = Math.floor(illnessOnsetAgeDays)/30.5;

            if(Math.ceil(illnessOnsetAgeDays)<=31){
            	illnessOnsetAgeNode.value=Math.ceil(illnessOnsetAgeDays);
            	illnessOnsetAgeUnitsNode.value="D";
            } else if(Math.ceil(illnessOnsetAgeDays)>31 && illnessOnsetAgeYears<1)  {
            	st=calcDOBDate.valueOf();en=illnessOnsetDate.valueOf();diff=en-st-(-0);diffdate=new Date();diffdate.setTime(diff);monthdiff=diffdate.getMonth();

            	illnessOnsetAgeNode.value=monthdiff;
            	illnessOnsetAgeUnitsNode.value="M";
            } else  {
                // get rough estimated year age
                var yearDiff = illnessOnsetDate.getFullYear() - calcDOBDate.getFullYear();
                //need to determine whether birthday has happened
                if(illnessOnsetDate.getMonth()<calcDOBDate.getMonth())
                    yearDiff = yearDiff-1;
                else if(illnessOnsetDate.getMonth()==calcDOBDate.getMonth()){
                    if(illnessOnsetDate.getDate()<calcDOBDate.getDate())
                        yearDiff = yearDiff-1;
                }
                illnessOnsetAgeNode.value=yearDiff;//Math.floor(reportedAgeYears);
                illnessOnsetAgeUnitsNode.value="Y";
            //this is only for leap year, if DOB is 02/29/YYYY and is leap year and is almost one year old, it should be 11 months
                if(calcDOBDate.getMonth() == 1 && calcDOBDate.getDate()==29 && yearDiff > 1 && yearDiff < 1.1 && isLeapYear(calcDOBDate.getFullYear()))
                {
                    currentAgeNode.innerText="11";
                    currentAgeUnitsNode.innerText="Months";
                }
            }

        } else {
        	illnessOnsetAgeNode.value="";
        	illnessOnsetAgeUnitsNode.value="";
        }
        autocompTxtValuesForJSP();
	}
}


function pgCalculateIllnessDuration(onsAgeId,onsAgeU,onsDt,endDt) {

    //alert("in pgCalculateIllnessDuration()");

    var illnessOnsetAgeNode = getElementByIdOrByName(onsAgeId);
    var illnessOnsetAgeUnitsNode = getElementByIdOrByName(onsAgeU);

    var onSetNode = getElementByIdOrByName(onsDt);
    // FIXME : make sure it is INV137
    var calcOnSetNode = getElementByIdOrByName(onsDt);
    var illnessEndDateNode = getElementByIdOrByName(endDt);

    if(onSetNode.value!="" && isDate(onSetNode.value)){
        calcOnSetNode.value = onSetNode.value;
    }
    var calcOnSetDate = new Date(calcOnSetNode.value);
	if((onSetNode.value!=null && onSetNode.value!= "")&& (illnessEndDateNode.value!=null && illnessEndDateNode.value!= "") )
	{
        var illnessEndDate = new Date(illnessEndDateNode.value);

        //alert("should reset reportedAgeNode");
        illnessOnsetAgeNode.value="";
        illnessOnsetAgeUnitsNode.value="";

        var illnessOnsetAgeMilliSec = illnessEndDate.getTime() - calcOnSetDate.getTime();
        if(!window.isNaN(illnessOnsetAgeMilliSec)){
            var illnessOnsetAgeSeconds = illnessOnsetAgeMilliSec/1000;
            var illnessOnsetAgeMinutes = illnessOnsetAgeSeconds/60;
            var illnessOnsetAgeHours = illnessOnsetAgeMinutes/60;
            var illnessOnsetAgeDays = illnessOnsetAgeHours/24;
            var illnessOnsetAgeMonths = illnessOnsetAgeDays/30.41;
            var illnessOnsetAgeYears = illnessOnsetAgeMonths/12;

            if(isLeapYear(calcOnSetDate.getFullYear())) illnessOnsetAgeMonths = Math.floor(illnessOnsetAgeDays)/30.5;


	    //alert('illnessOnsetAgeDays: ' + illnessOnsetAgeDays + ', Math.ceil(illnessOnsetAgeDays): ' + Math.ceil(illnessOnsetAgeDays));

            if(Math.ceil(illnessOnsetAgeDays)<=31){
            	illnessOnsetAgeNode.value=Math.ceil(illnessOnsetAgeDays);
            	illnessOnsetAgeUnitsNode.value="D";
            } else if(Math.ceil(illnessOnsetAgeDays)>31 && illnessOnsetAgeYears<1)  {
           	st=calcOnSetDate.valueOf();en=illnessEndDate.valueOf();diff=en-st-(-0);diffdate=new Date();diffdate.setTime(diff);monthdiff=diffdate.getMonth();

        	illnessOnsetAgeNode.value= monthdiff;
            	illnessOnsetAgeUnitsNode.value="M";
            } else  {
                // get rough estimated year age
                var yearDiff = illnessEndDate.getFullYear() - calcOnSetDate.getFullYear();
                //need to determine whether birthday has happened
                if(illnessEndDate.getMonth()<calcOnSetDate.getMonth())
                    yearDiff = yearDiff-1;
                else if(illnessEndDate.getMonth()==calcOnSetDate.getMonth()){
                    if(illnessEndDate.getDate()<calcOnSetDate.getDate())
                        yearDiff = yearDiff-1;
                }
                illnessOnsetAgeNode.value=yearDiff;//Math.floor(reportedAgeYears);
                illnessOnsetAgeUnitsNode.value="Y";
            //this is only for leap year, if OnSet date is 02/29/YYYY and is leap year and is almost one year old, it should be 11 months
                if(calcOnSetDate.getMonth() == 1 && calcOnSetDate.getDate()==29 && reportedAgeYears > 1 && reportedAgeYears < 1.1 && isLeapYear(calcOnSetDate.getFullYear()))
                {
                    currentAgeNode.innerText="11";
                    currentAgeUnitsNode.innerText="Months";
                }
            }

        } else {
        	illnessOnsetAgeNode.value="";
        	illnessOnsetAgeUnitsNode.value="";
        }
        autocompTxtValuesForJSP();
	}


}


   	 	function reloadInvs(filler){
   	         	//alert("Inside reload :" +filler.value);
   	 	         JPageForm.callChildForm(filler.value, function(data) {
   	 	         });
   	 	         setTimeout("reldPage()", 1000);
   		  }

   		  function reldPage() {
   	 	  	  document.forms[0].action ="/nbs/LoadManageCtAssociation.do?method=manageContactsSubmit";
   			  document.forms[0].submit();
   		  }

   		function transferOwnership(){
    		   document.forms[0].target="";
 			document.forms[0].action ="${PageForm.attributeMap.TransferOwnership}";
 		}
   		function transferPamOwnership()
   		{
   		    var divElt = getElementByIdOrByName("pageview");
   		    divElt.style.display = "block";
   		    var o = new Object();
   		    o.opener = self;
   		    //window.showModalDialog("/nbs/PageAction.do?method=transferOwnershipLoad", o, GetDialogFeatures(600, 350, false));
   		    
   		    
   		    var URL = "/nbs/PageAction.do?method=transferOwnershipLoad";
   		    
   		    var modWin = openWindow(URL, o,GetDialogFeatures(850, 500, false, false), divElt, "");
   		 
   		    return false;
   		}


   		function createPamNotification()
   		{


            var urlToOpen =  "/nbs/PageAction.do?method=createNotification";
            var divElt = getElementByIdOrByName("pageview");
           // alert(divElt );
            if (divElt == null) {
	                   divElt = getElementByIdOrByName("blockparent");
	        }
	              //  alert("divElt :"+divElt.value );
	          divElt.style.display = "block";
	          var o = new Object();
	          o.opener = self;
	          var dlgStyle = "scroll:no;scrollbars:no;status:no;resizable:yes;help:no;dialog Height:700px;dialogWidth:840px;";
	         // window.showModalDialog(urlToOpen,o, dlgStyle);
	          
	          var modWin = openWindow(urlToOpen, o,dlgStyle, divElt, "");
	          
	        return false;
   		}

		function pgChangeCondition()
   		{
   		    var divElt = getElementByIdOrByName("pageview");
   		    divElt.style.display = "block";
   		    var o = new Object();
   		    o.opener = self;
   		 //   window.showModalDialog("/nbs/PageAction.do?method=changeConditionLoad", o, GetDialogFeatures(500, 305, false));

   		    var URL = "/nbs/PageAction.do?method=changeConditionLoad";
   		    
   		 var modWin = openWindow(URL, o,GetDialogFeatures(500, 500, false, false), divElt, "");
   		 
   		  return false;
   		}

		
			



		// Change Condition - perform the change
   		function pgChangeToNewCondition(conditionCd, conditionDesc) {
	    		blockUIDuringFormSubmission()
	    	//alert("in pgChangeToNewCondition(" + conditionCd + ", " + conditionDesc + ", " + userHasProgAreaPermission +")");
   			//alert( "action=" + "/nbs/PageAction.do?method=changeConditionSubmit&INV169=" + conditionCd + ';&INV169Desc=' + conditionDesc);
		   	document.forms[0].action ="/nbs/PageAction.do?method=changeConditionSubmit&INV169=" + conditionCd + '&INV169Desc=' + conditionDesc;
		   	document.forms[0].submit();
		   	return false;
		}


//
// enable or disable field based on value
// fromBoolField - must be Y,N,UNK field
// toTextField - text field to enable or disable
//
function enableOrDisableTarget(fromBoolField,toTextField)
{
	 var fromBoolNode = getElementByIdOrByName(fromBoolField);
	 var toTextBoxLabel = getElementByIdOrByName(toTextField+"L");

	//alert("Selected value:" + fromBoolNode.value);
	if (fromBoolNode==null || toTextBoxLabel==null) {
		return;
	}
	if (fromBoolNode.value=="Y") {
		toTextBoxLabel.style.color="#000";

		enableAllBrowsers($j("#" + toTextField).parent().parent().find(":input"));
		$j("#" + toTextField).parent().parent().find("img").attr("disabled", false);
		$j("#" + toTextField).parent().parent().find("img").attr("tabIndex", "0");
		
		return;
	} else {
		//not Yes -> target is disabled
		toTextBoxLabel.style.color="#666666";

		disableAllBrowsers($j("#" + toTextField).parent().parent().find(":input"));
		$j("#" + toTextField).parent().parent().find(":input").val("");
		$j("#" + toTextField).parent().parent().find("img").attr("disabled", true);
		$j("#" + toTextField).parent().parent().find("img").attr("tabIndex", "-1");
		
	}
}

//
// enable or disable field based on if value present
//
// toTextField - text field to enable or disable
//
function enableOrDisableIfDwrValue(fromField, toTextField) {

	var toTextBoxLabel = getElementByIdOrByName(toTextField + "L");
	var fromValue = dwr.util.getValue(fromField);

	if (fromValue == null || toTextBoxLabel == null) {
		return;
	}
	if (fromValue != "") {
		toTextBoxLabel.style.color = "#000";
		enableAllBrowsers($j("#" + toTextField).parent().parent().find(":input"));
		$j("#" + toTextField).parent().parent().find("img").attr("disabled", false);
		$j("#" + toTextField).parent().parent().find("img").attr("tabIndex", "0");
		
		return;
	} else {
		//not Yes -> target is disabled
		toTextBoxLabel.style.color = "#666666";
		disableAllBrowsers($j("#" + toTextField).parent().parent().find(":input"));
		$j("#" + toTextField).parent().parent().find(":input").val("");
		$j("#" + toTextField).parent().parent().find("img").attr("disabled", true);
		$j("#" + toTextField).parent().parent().find("img").attr("tabIndex", "-1");
		
	}
}


//
// enable or disable Imported Fields
//
// dImp -disease imported field
// 					INV152 INV153  INV154 INV155 INV156
function enableOrDisableDiseaseAcquired(disAcq, impCntry, impSt, impCity, impCounty) {
	
	var disAcqNode = getElementByIdOrByName(disAcq);
	if (disAcqNode == null) {
		return;
	}
	var impCntryLabel = getElementByIdOrByName(impCntry + "L");
	var impStLabel = getElementByIdOrByName(impSt + "L");
	var impCityLabel = getElementByIdOrByName(impCity + "L");
	var impCountyLabel = getElementByIdOrByName(impCounty + "L"); 
	
	//disable if cleared or set to Unknown..
	if (disAcqNode.value == "" || disAcqNode.value == "UNK"  ) {
		// disable country fields
		if (impCntryLabel != null) {
			impCntryLabel.style.color="#666666";

			disableAllBrowsers($j("#" + impCntry).parent().parent().find(":input"));
			$j("#" + impCntry).parent().parent().find(":input").val("");
			$j("#" + impCntry).parent().parent().find("img").attr("disabled", true);
			$j("#" + impCntry).parent().parent().find("img").attr("tabIndex", "-1");
			
		}
		if (impStLabel != null) {
			impStLabel.style.color="#666666";

			disableAllBrowsers($j("#" + impSt).parent().parent().find(":input"));
			$j("#" + impSt).parent().parent().find(":input").val("");
			$j("#" + impSt).parent().parent().find("img").attr("disabled", true);
			$j("#" + impSt).parent().parent().find("img").attr("tabIndex", "-1");
			
		}
		if (impCityLabel != null) {
		// disable city fields
			impCityLabel.style.color="#666666";

			disableAllBrowsers($j("#" + impCity));
			$j("#" + impCity).val("");
		}
		if (impCountyLabel != null) {
			// disable county fields
			impCountyLabel.style.color="#666666";

			disableAllBrowsers($j("#" + impCounty).parent().parent().find(":input"));
			$j("#" + impCounty).parent().parent().find(":input").val("");
			$j("#" + impCounty).parent().parent().find("img").attr("disabled", true);
			$j("#" + impCounty).parent().parent().find("img").attr("tabIndex", "-1");
			
		}
	} else if (disAcqNode.value == "OOC")  {

		// enable country fields
		if (impCntryLabel != null) {
			impCntryLabel.style.color="#000";

			enableAllBrowsers(	$j("#" + impCntry).parent().parent().find(":input"));
			$j("#" + impCntry).parent().parent().find("img").attr("disabled", false);
			$j("#" + impCntry).parent().parent().find("img").attr("tabIndex", "0");
			
		}
		if (impStLabel != null) {
			// enable state fields
			impStLabel.style.color="#666666";

			disableAllBrowsers($j("#" + impSt).parent().parent().find(":input"));
			$j("#" + impSt).parent().parent().find("img").attr("disabled", true);
			$j("#" + impSt).parent().parent().find("img").attr("tabIndex", "-1");
			
		}
		if (impCityLabel != null) {
		// enable city fields
			impCityLabel.style.color="#000";

			enableAllBrowsers($j("#" + impCity));
		}
		if (impCountyLabel != null) {
			// enable county fields
			impCountyLabel.style.color="#666666";
			
			disableAllBrowsers($j("#" + impCounty).parent().parent().find(":input"));
			$j("#" + impCounty).parent().parent().find("img").attr("disabled", true);
			$j("#" + impCounty).parent().parent().find("img").attr("tabIndex", "-1");
			
		}

	} else if (disAcqNode.value == "OOS")  {
			// disable country fields
		if (impCntryLabel != null) {
			impCntryLabel.style.color="#666666";
			
			disableAllBrowsers($j("#" + impCntry).parent().parent().find(":input"));
			$j("#" + impCntry).parent().parent().find("img").attr("disabled", true);
			$j("#" + impCounty).parent().parent().find("img").attr("tabIndex", "-1");
			
		}
		if (impStLabel != null) {
			// enable state fields
			impStLabel.style.color="#000";
		
			disableAllBrowsers($j("#" + impSt).parent().parent().find(":input"));
			$j("#" + impSt).parent().parent().find("img").attr("disabled", false);
			$j("#" + impSt).parent().parent().find("img").attr("tabIndex", "0");
			
			
		}
		if (impCityLabel != null) {
			// enable city fields
			impCityLabel.style.color="#000";

			enableAllBrowsers($j("#" + impCity));
		}
		if (impCountyLabel != null) {
			// enable county fields
			impCountyLabel.style.color="#000";

			enableAllBrowsers($j("#" + impCounty).parent().parent().find(":input"));
			$j("#" + impCounty).parent().parent().find("img").attr("disabled", false);
			$j("#" + impCounty).parent().parent().find("img").attr("tabIndex", "0");
			
		}
	} else if (disAcqNode.value == "OOJ")  {
			// disable country fields
		if (impCntryLabel != null) {
			impCntryLabel.style.color="#666666";

			disableAllBrowsers($j("#" + impCntry).parent().parent().find(":input"));
			$j("#" + impCntry).parent().parent().find("img").attr("disabled", true);
			$j("#" + impCntry).parent().parent().find("img").attr("tabIndex", "-1");
			
		}
			// disable state fields
		if (impStLabel != null) {
			impStLabel.style.color="#666666";

			disableAllBrowsers($j("#" + impSt).parent().parent().find(":input"));
			$j("#" + impSt).parent().parent().find("img").attr("disabled", true);
			$j("#" + impSt).parent().parent().find("img").attr("tabIndex", "-1");
			
		}
		if (impCityLabel != null) {
			// enable city fields
			impCityLabel.style.color="#000";

			enableAllBrowsers($j("#" + impCity));
		}
		if (impCountyLabel != null) {
			// enable county fields
			impCountyLabel.style.color="#000";

			enableAllBrowsers($j("#" + impCounty).parent().parent().find(":input"));
			$j("#" + impCounty).parent().parent().find("img").attr("disabled", false);
			$j("#" + impCounty).parent().parent().find("img").attr("tabIndex", "0");
			
		}

	}

}

//
// calculate the duration of hospital stay
// based on the discharge date - the admission date
//
function pgCalcDaysInHosp(hospAdmitDateId, hospDischargeDateId, targetDaysStayId) {

	var hospAdmitDateNode = getElementByIdOrByName(hospAdmitDateId);
	var hospDischargeDateNode = getElementByIdOrByName(hospDischargeDateId);
	var durationOfStayNode = getElementByIdOrByName(targetDaysStayId);

	if (hospAdmitDateNode.value == null || hospAdmitDateNode.value == "" || hospDischargeDateNode.value == "") {
		return;
	}

	var hospStartDate = new Date(hospAdmitDateNode.value);
	var hospEndDate = new Date(hospDischargeDateNode.value);

	var hospStayMilliSec = hospEndDate.getTime() - hospStartDate.getTime();
	var staySeconds = hospStayMilliSec / 1000;
	var stayMinutes = staySeconds / 60;
	var stayHours = stayMinutes / 60;
	var stayDays = stayHours / 24;

	//alert('Hosp Stay Days: ' + stayDays + ', Math.ceil(stayDays): ' + Math.ceil(stayDays));
	if (stayDays > 0 && stayDays < 1000) {
		durationOfStayNode.value = Math.ceil(stayDays);
	}
}

//   It is the text field to enable or disable
//
function pgDisableElement(elementId) {
	
	  var disNode = $j("#" + elementId);
	  var labelNode = getElementByIdOrByName(elementId + "L");
	  if ((disNode == null || disNode == 'undefined') && (labelNode == null || labelNode == 'undefined')) {
	    return;
	  }
	
	//could be no label
	if (labelNode != null) {
		labelNode.style.color = "#555555";
	}
	//disable any inputs, images or buttons associated with the element

	disableAllBrowsers($j("#" + elementId).parent().parent().find(":input"));
	disableAllBrowsers($j("#" + elementId+"L").parent().parent().find(":button"));
	disableAllBrowsers($j("#" + elementId+"L").parent().parent().find("a"));
	$j("#" + elementId).parent().parent().find(":input").val("");
	$j("#" + elementId).parent().parent().find("img").attr("disabled", true);
	$j("#" + elementId).parent().parent().find("img").attr("tabIndex", "-1");
	
	$j("#" + elementId).parent().parent().find("checkbox").attr("disabled", true);
	//if multiselect is there - get rid of selected values
	var spanSelectedVal = getElementByIdOrByName(elementId + "-selectedValues");
	if (spanSelectedVal != null) {
		spanSelectedVal.innerHTML = " Selected Values: "
	}
}


/**
 * pgDisableElementWithoutRemovingValue: this is the same method than pgDisableElement but the value is not removed.
 * This is used from TB page, to disable case verification and case status.
 * if pgDisableElement was used, the value was lost after edit load.
 * @param elementId
 */
function pgDisableElementWithoutRemovingValue(elementId) {
	
	  var disNode = $j("#" + elementId);
	  var labelNode = getElementByIdOrByName(elementId + "L");
	  if ((disNode == null || disNode == 'undefined') && (labelNode == null || labelNode == 'undefined')) {
	    return;
	  }
	
	//could be no label
	if (labelNode != null) {
		labelNode.style.color = "#555555";
	}
	//disable any inputs, images or buttons associated with the element

	disableAllBrowsers($j("#" + elementId).parent().parent().find(":input"));
	disableAllBrowsers($j("#" + elementId+"L").parent().parent().find(":button"));
	disableAllBrowsers($j("#" + elementId+"L").parent().parent().find("a"));
	//$j("#" + elementId).parent().parent().find(":input").val("");
	$j("#" + elementId).parent().parent().find("img").attr("disabled", true);
	$j("#" + elementId).parent().parent().find("img").attr("tabIndex", "-1");
	
	$j("#" + elementId).parent().parent().find("checkbox").attr("disabled", true);
	//if multiselect is there - get rid of selected values
	var spanSelectedVal = getElementByIdOrByName(elementId + "-selectedValues");
	if (spanSelectedVal != null) {
		spanSelectedVal.innerHTML = " Selected Values: "
	}
}



function pgReadOnlyElement(elementId) {
  $j("#" + elementId).parent().parent().find(":input").attr("readonly", true);
  $j("#" + elementId).parent().parent().find("img").attr("disabled", true);
  $j("#" + elementId).parent().parent().find("img").attr("tabIndex", "-1");
  
  $j("#" + elementId).parent().parent().find("checkbox").attr("readonly", true);
}

//   It is the text field to enable or disable
//
function pgEnableElement(elementId) {
	  var enabNode = $j("#" + elementId);
	  var labelNode = getElementByIdOrByName(elementId + "L");
	  if ((enabNode == null || enabNode == 'undefined') && (labelNode == null || labelNode == 'undefined')) {
	    return;
	  }
	
	//could be no label
	if (labelNode != null) {
		labelNode.style.color = "#000";
	}
	//disable any inputs, images or buttons associated with the element
	enableAllBrowsers($j("#" + elementId).parent().parent().find(":input"));
	enableAllBrowsers($j("#" + elementId+"L").parent().parent().find(":button"));
	enableAllBrowsers($j("#" + elementId+"L").parent().parent().find("a"));
	$j("#" + elementId).parent().parent().find("img").attr("disabled", false);
	if($j("#" + elementId).parent().parent().find("img")!=null && $j("#" + elementId).parent().parent().find("img")[0]!=null &&
	   $j("#" + elementId).parent().parent().find("img")[0].getAttribute("src")!="type-ahead2.gif")//For not adding tabIndex to down arrow
			$j("#" + elementId).parent().parent().find("img").attr("tabIndex", "0");
	

	enableAllBrowsers($j("#" + elementId).parent().parent().find("checkbox"));
}

//   Disable a Participation Type Element
//   i.e. Investigator, Reporting Provider, Reporting Organization
//
function pgDisableParticipationElement(elementId, parentDoc)
{
	
	if(parentDoc == null || parentDoc == undefined)
		parentDoc = document;
		
	
  //alert("pgDisable " + elementId);
  var textEl = getElementByIdOrByNameNode(elementId + "Text", parentDoc);
  var iconEl = getElementByIdOrByNameNode(elementId + "Icon", parentDoc);
  var clbEl = getElementByIdOrByNameNode(elementId + "CodeLookupButton", parentDoc);
  var clearEl = getElementByIdOrByNameNode("clear" + elementId, parentDoc);
  var searchEl = getElementByIdOrByNameNode(elementId + "SearchControls", parentDoc)


  dwr.util.setValue(elementId, "");
  dwr.util.setValue(elementId + "Error", "");
  if (textEl != null) {
        textEl.value = "";
  	textEl.style.visibility = "visible";
  } //contact doesn't have QC lookup
  if (iconEl != null) {
    iconEl.style.visibility = "visible";
  }
  if (clbEl != null) {
    clbEl.style.visibility = "visible";
  }
  if (clearEl != null) {
    clearEl.className = "none";
  }
  if (searchEl != null) {
    searchEl.className = "visible";
  }

  disableAllBrowsers( $j("#" + elementId + "SearchControls").parent().parent().find(":input"));
  $j("#" + elementId + "ICON").parent().parent().find("img").attr("disabled", true);
  $j("#" + elementId + "ICON").parent().parent().find("img").attr("tabIndex", "-1");
  
  $j("#" + elementId + "L").css("color", "#666666");
  $j("#" + elementId + "S").css("color", "#666666");
}
//   Enable a Participation Type Element
//   i.e. Investigator, Reporting Provider, Reporting Organization
//
function pgEnableParticipationElement(elementId) {
  //alert ("in pgEnableParticipationElement -> " + elementId);
  var inpEl = $(elementId+"Text");
  var iconEl = getElementByIdOrByName(elementId+"Icon");
  var clbEl = getElementByIdOrByName(elementId+"CodeLookupButton");
  var clearEl = getElementByIdOrByName("clear"+elementId);
  var searchEl = getElementByIdOrByName(elementId+"SearchControls");


  var selectedItem = dwr.util.getValue(elementId);
  if (selectedItem != "") { return; }  //don't clear data when loading page if data selected


  enableAllBrowsers($j("#clear" + elementId).parent().parent().find(":input"));
  $j("#clear" + elementId).parent().parent().find("img").attr("disabled", false);
  $j("#clear" + elementId).parent().parent().find("img").attr("tabIndex", "0");
  

  enableAllBrowsers($j("#" + elementId + "Icon").parent().parent().find(":input"));
  enableAllBrowsers($j("#" + elementId + "CodeLookupButton").parent().parent().find(":input"));
  $j("#" + elementId + "L").css("color", "#000");
  $j("#" + elementId + "S").css("color", "#000");


   dwr.util.setValue(elementId+"Error", "");  //clear any errors
   if (inpEl != null)inpEl.style.visibility="visible";
   if (iconEl != null) { iconEl.style.visibility="visible"; }
   if (clbEl != null) { clbEl.style.visibility="visible"; }
   if (clearEl != null) { clearEl.className="none"; }
   if (searchEl != null) { searchEl.className="visible"; }

    if (getElementByIdOrByName(elementId+"S") != null) {
    	getElementByIdOrByName(elementId+"S").className="InputFieldLabel"; }
    if (getElementByIdOrByName(elementId+"L") != null) {
    	if ($j("#"+elementId+"L").hasClass("requiredInputField") == true) {
  		getElementByIdOrByName(elementId+"L").className="InputFieldLabel requiredInputField";
    	} else {
  		getElementByIdOrByName(elementId+"L").className="InputFieldLabel";
  	}
    }

}

//
// enable or disable other field based on value
// fromSelFieldId - user must have selected Other in order to enable Other field for text entry
//   The toTextField is by convention is fromSelField + "Oth"
//   It is the text field to enable or disable
//
function enableOrDisableOther(fromSelFieldId)
{
  var selectElt = getElementByIdOrByName(fromSelFieldId);
  if (selectElt == null) {
    return;
  }
  var i;
  var foundOther = 0;
  if (selectElt.options != null) {
    for (i = 0; i < selectElt.options.length; i++) {
      if (selectElt.options[i].selected && selectElt.options[i].text != "") {
        //alert(selectElt.options[i].text);
        //probably shoud match with regular expression here..
        if (selectElt.options[i].value == "OTH")
          foundOther++;
      }
    }
  }

  var toTextField = fromSelFieldId + "Oth";
  var toTextBoxLabel = getElementByIdOrByName(toTextField + "L");

  if (foundOther != 0) {
    toTextBoxLabel.style.color = "#000";

	enableAllBrowsers($j("#" + toTextField).parent().parent().find(":input"));
    if (getElementByIdOrByName(toTextField + "L") != null) {
      getElementByIdOrByName(toTextField + "L").disabled = false;
    }

    return;
  } else {
    //not Other -> target is disabled
    toTextBoxLabel.style.color = "#666666";

	disableAllBrowsers($j("#" + toTextField).parent().parent().find(":input"));
    $j("#" + toTextField).parent().parent().find(":input").val("");
  }
  /*
  //if the parent is hidden, hide the oth child. The attribute display has not been used since the element doesn't have that attribute. The <tr> has the attribute disable.
  if(getElementByIdOrByName(fromSelFieldId).offsetWidth == 0 && getElementByIdOrByName(fromSelFieldId).offsetHeight == 0)
	 pgHideElement(toTextField);
  else
	 pgUnhideElement(toTextField);
	 */
}

//
// To support the Require If rule, add a class to mark an element as required
//
function pgRequireElement(reqNodeId)
{
  var reqNode = $j("#" + reqNodeId);
  if (reqNode == null || reqNode == 'undefined' || (reqNode.length == 0) || (reqNode.length > 1)) {
    return;
  }
  //check if label is disabled
  if (reqNodeId.charAt(reqNodeId.length - 1) == 'L') {
     if (reqNode[0].style.color == "#666666" || reqNode[0].style.color == "#666666")
     	return;
  }
  for (var i = 0; i < reqNode.length; i++) {
    var isDisabledFld = $j(reqNode[i]).attr('disabled');
    if (isDisabledFld != null && isDisabledFld)
      	return; //don't require a disabled field
    if ($j(reqNode[i]).hasClass("requiredInputField") == false) {
      $j(reqNode[i]).addClass("requiredInputField");
      var lastChar = reqNodeId.charAt(reqNodeId.length - 1);
      if (lastChar != null && lastChar == "L") {
        $j('<span style="color:#CC0000">* </span>').insertBefore("#" + reqNodeId);
      }
      else {
        $j('<span style="color:#CC0000">* </span>').insertBefore("#" + reqNodeId + "L");
      }
    }
  }
  return;
}
//
//To support the Require If rule, remove the required class from an element
//
function pgRequireNotElement(reqNodeId) {
		var reqNode = $j("#"+reqNodeId);
		if (reqNode == null || reqNode == 'undefined' || (reqNode.length==0) || (reqNode.length>1) ) {
			//alert("Pourquoi reqNotNode(" + reqNodeId + ") is null?");
			return;
		}
		for (var i = 0; i < reqNode.length; i++) {
			if ($j(reqNode[i]).hasClass("requiredInputField") == true) {
				$j(reqNode[i]).removeClass("requiredInputField");
				var reqText = $j(reqNode[i]).parent().children('span:first').text();
				if (reqText == "* ") {
					$j(reqNode[i]).parent().children('span:first').remove();
				} else {
					labelNode = $j("#"+reqNodeId+"L");
					if (labelNode != null) {
						reqText = $j(labelNode).parent().children('span:first').text();
						if (reqText == "* ") {
							$j(labelNode).parent().children('span:first').remove();
						}
					}
				}
			}
		}
		return;
}

//
// check entered structured numeric value
//
function isStructuredNumericCharEntered(pTextbox)
{
    //alert("in checkStructuredNumericVal()");
    var varVal = pTextbox.value;
    var y = 0; var prevStr = ""; var s = ""; var c = "";
	var count=0;
    y = varVal.length;
    var pattern = /^([<>=]|[<][=]|[>][=]|[<][>])?(((((\d){0,10})|((\d){1,10})([\.]{1})((\d){1,5})?)?)|(((((\d){1,10})([\.]{1})((\d){1,5})[+])|(((\d){1,10})[+]))|((((\d){1,10})|(((\d){1,10})([\.]{1})((\d){1,5})))[-:\/](((\d){1,10})|(((\d){1,10})([\.]{1})((\d){1,5})?)?)?)?)?)?$/;

    for(x=0; x<y; x++) {
        c = varVal.substr(x, 1);
        prevStr = s;
        s += c;
    	if ((c == '\b') || (pattern.test(s))) {
         	pTextbox.value = s;
   	 } else {
    		pTextbox.value = prevStr;
    	}
    }
}

function pageCreateLoad(multiselects,fromLab)
{
    var actionMode = getElementByIdOrByName("actionMode") == null ? "" : getElementByIdOrByName("actionMode").value;
    if(actionMode == 'Preview') return;


    // AutoComplete Stuff
    autocompTxtValuesForJSP();

    // update multi-select results span to display selected options
    var selectEltIdsArray = multiselects.split("|");
    for (var i = 0; i < selectEltIdsArray.length; i++)
    {
        var selectElt = getElementByIdOrByName(selectEltIdsArray[i]);
        if(selectElt != null && !(selectElt.isDisabled) && selectElt.type == 'select-multiple')
        {
            var valuesDisplaySpanId = selectEltIdsArray[i] + "-selectedValues";
            displaySelectedOptions(selectElt, valuesDisplaySpanId);
        }
    }

    // get error tabs
    var errorTabsPresent = false;


	if(actionMode!="Merge"){
		JBaseForm.getErrorTabs(function(data)
		{
			if (data.length > 0)
			{
			   errorTabsPresent = true;
			   handleErrorTabs(data);
			}

			// if there are no error tabs, get the tab is selected in view mode
			// and automatically select it
			if (errorTabsPresent == false && !fromLab)//to avoid changing the tab to a different one in Lab Reports
			{
				JBaseForm.getTabId(function(data) {
					if(data!=null && data!="" && data == '5') {
							data = '0'
					}

					if(data!=null && data!="")
					{
						selectTab(0,pageTabCount(),data,'ongletTextEna','ongletTextDis','ongletTextErr',null,null);
					}
					else
					{
						selectTab(0,pageTabCount(),0,'ongletTextEna','ongletTextDis','ongletTextErr',null,null);
					}
				});
			}
		});
	}

}


function pageCreateLoad2(multiselects)
{
    var actionMode = getElementByIdOrByName("actionMode") == null ? "" : getElementByIdOrByName("actionMode").value;
    if(actionMode == 'Preview') return;


    // AutoComplete Stuff
    autocompTxtValuesForJSP();

    // update multi-select results span to display selected options
    var selectEltIdsArray = multiselects.split("|");
    for (var i = 0; i < selectEltIdsArray.length; i++)
    {
        var selectElt = getElementByIdOrByName(selectEltIdsArray[i]+"_2");
        if(selectElt != null && !(selectElt.isDisabled) && selectElt.type == 'select-multiple')
        {
            var valuesDisplaySpanId = selectEltIdsArray[i] +"_2"+ "-selectedValues";
            displaySelectedOptions(selectElt, valuesDisplaySpanId);
        }
    }

    // get error tabs
    var errorTabsPresent = false;

	if(actionMode!="Merge"){
    JBaseForm.getErrorTabs(function(data)
    {
        if (data.length > 0)
        {
           errorTabsPresent = true;
           handleErrorTabs(data);
        }

        // if there are no error tabs, get the tab is selected in view mode
	    // and automatically select it
	    if (errorTabsPresent == false)
	    {
	        JBaseForm.getTabId(function(data) {
	            if(data!=null && data!="" && data == '5') {
	                    data = '0'
	            }

	            if(data!=null && data!="")
	            {
	                selectTab(0,pageTabCount(),data,'ongletTextEna','ongletTextDis','ongletTextErr',null,null);
	            }
	            else
	            {
	                selectTab(0,pageTabCount(),0,'ongletTextEna','ongletTextDis','ongletTextErr',null,null);
	            }
	        });
	    }
    });
	}
}
////////////////////
//use a regular expression for temperature validation as entered
function isTemperatureCharEntered(pTextbox)
{
  var varVal = pTextbox.value;
  var y = 0;
  var prevStr = "";
  var s = "";
  var c = "";
  var count = 0;
  y = varVal.length;
  var pattern = /^\d{1,3}(\.(\d{1})?)?$/;

  for (x = 0; x < y; x++) {
    c = varVal.substr(x, 1);
    prevStr = s;
    s += c;
    if ((c == '\b') || (pattern.test(s))) {
      pTextbox.value = s;
    } else {
      pTextbox.value = prevStr;
    }
  }
}

////////////////////
//use a regular expression for temperature validation onBlur
function isTemperatureEntered(pTextbox)
{
  var varVal = pTextbox.value;
  if (varVal == "") {
    return;
  }

  var varPattern = /^\d{1,3}(\.\d{1})?$/;
  if (varPattern.test(varVal)) {
    return;
  } else {
    alert("Please enter a valid temperature.");
  }
}

function pgCheckOnloadOtherEntryAllowedFields()
{
  var otherElts = $j(".otherEntryField");
  //alert(otherElts);
  //alert("# of elts with otherEntryField set = " + otherElts.length);
  for (var i = 0; i < otherElts.length; i++) {
    var fieldId = $j(otherElts[i]).attr("id")
      //alert("id = "+fieldId.length-4);
      //alert ("calling enableOrDisableOther("+fieldId+")");
      enableOrDisableOther(fieldId.substr(0, fieldId.length - 4));
  }
}

// Check the min and max values of a numeric field
// Alert the user if the value is not in the range
function pgCheckFieldMinMax(pTextbox, pMinVal, pMaxVal)
{
  if (pTextbox.value == "") {
    return;
  }
  //if decimal point - getting stored as zero
  if (pMinVal == 0 && pMaxVal == 0) {
    return;
  }
  var varVal = pTextbox.value;
  if (varVal < pMinVal) {
    alert("Please enter a value greater than or equal to " + pMinVal);
    pTextbox.focus();
    return;
  }
  if (varVal > pMaxVal) {
    alert("Please enter a value less than or equal to " + pMaxVal);
    pTextbox.focus();
    return;
  }
}

// Check that the year entered is 1875 to the current year
// Alert the user if the value is not in the range
function pgCheckFullYear(pTextbox)
{
  if (pTextbox.value == "") {
    return;
  }

  var varVal = pTextbox.value;
  if (varVal < 1875) {
    alert("Please enter a year greater than 1874.");
    pTextbox.focus();
    return;
  }

  var now = new Date();
  var currentYear = now.getFullYear();
  if (varVal > currentYear) {
    alert("Please enter a year less than or equal to " + currentYear);
    pTextbox.focus();
    return;
  }
}

//after the on change on a selection box, set the next focus
//to the next text, multi-select, singel-select, etc. input that is not hidden,button,image
function pgSelectNextFocus(currentElt)
{
  var fields = $j(currentElt).parents('form:eq(0),body').find(':input').not('[type=hidden]');
  var index = fields.index(currentElt);

  if (index > -1 && (index + 1) < fields.length) {
    for (index = index + 1; index < fields.length; ++index) {
      if (fields.eq(index).attr("disabled") || ((fields.eq(index).attr("type") == "button") || (fields.eq(index).attr("type") == "image"))) {
        continue;
      }
      break;
    }
    if (index < fields.length) {
      fields.eq(index).focus();
    }
  }
}

function pgSubSectionEnabled(elementId)
{
  var subSectionId = "#" + elementId;
  if (subSectionId == null || typeof(subSectionId) == 'undefined')
	  return;
  
  var subSectionBody = $j(subSectionId).find("tbody");
  if (subSectionBody == null)
  	return;
  for (var ii = 0; ii < subSectionBody.length; ii++) {
    var subSectionTBody = $j(subSectionBody.get(ii));

	enableAllBrowsers( $j(subSectionTBody).find("INPUT"));

	enableAllBrowsers( $j(subSectionTBody).find("checkbox"));
	$j(subSectionBody.get(ii)).find("img").attr("disabled", false);
	var calendars = $j( "img[src*='calendar.gif']");
	$j(subSectionBody.get(ii)).find(calendars)[0].attr("tabIndex", "0");
    

	enableAllBrowsers(  $j(subSectionBody.get(ii)).find(id + "_textbox"));

	enableAllBrowsers( $j(subSectionBody.get(ii)).find("td"));

    var subSectionsInput = subSectionTBody.find("INPUT");
    for (var i = 0; i < subSectionsInput.length; i++) {
      if ($j(subSectionsInput.get(i)).attr("id") != null &&
        $j(subSectionsInput.get(i)).attr("id").length > 0) {
        var id = "#" + $j(subSectionsInput.get(i)).attr("id");
        $j(id + "L").removeAttr("disabled", true).css("color", "#000");
        $j(id).removeAttr("disabled", true).css("color", "#000");
      }
    }

    var subSectionsSelect = $j(subSectionBody.get(ii)).find("SELECT");
    for (var i = 0; i < subSectionsSelect.length; i++) {
      if ($j(subSectionsSelect.get(i)).attr("id") != null &&
        $j(subSectionsSelect.get(i)).attr("id").length > 0) {
        var id = "#" + $j(subSectionsSelect.get(i)).attr("id");
        $j(id + "L").removeAttr("disabled", true).css("color", "#000");
        $j(id).removeAttr("disabled", true).css("color", "#000");
        $j("#" + id).parent().parent().find("img").attr("disabled", false);
        $j("#" + id).parent().parent().find("img").attr("tabIndex", "0");
        
      }
    }
  }
  if ($j(subSectionId).hasClass("batchSubSectionDisabled")) {
  	$j(subSectionId).removeClass("batchSubSectionDisabled");
  }
}

function pgSubSectionDisabled(elementId)
{
  var subSectionId = "#" + elementId;
  if (subSectionId == null || typeof(subSectionId) == 'undefined')
	  return;
  
  
  var subSectionBody = $j(subSectionId).find("tbody");
   if (subSectionBody == null)
  	return;
  for (var ii = 0; ii < subSectionBody.length; ii++) {
    var subSectionTBody = $j(subSectionBody.get(ii));

	disableAllBrowsers( $j(subSectionTBody).find("INPUT"));
    //$j(subSectionTBody).find("INPUT").val("");
    $j(subSectionTBody).find("checkbox").attr("disabled", true);
    $j(subSectionBody.get(ii)).find("img").attr("disabled", true);
    $j(subSectionBody.get(ii)).find("img").attr("tabIndex", "-1");
    
	disableAllBrowsers($j(subSectionBody.get(ii)).find("td"));
	


    var subSectionsInput = subSectionTBody.find("INPUT");
    for (var i = 0; i < subSectionsInput.length; i++) {
      if ($j(subSectionsInput.get(i)).attr("id") != null &&
        $j(subSectionsInput.get(i)).attr("id").length > 0) {
        var origId = $j(subSectionsInput.get(i)).attr("id");
        var id = "#" + origId;

		disableAllBrowsers($j(id + "L"));
		
		
        //$j(id).attr("disabled", true);
        var eleType = $j(id).attr("type");
        if (eleType != 'button' && eleType != 'image') {
          $j(id).val("");
          if ($j(id).hasClass("requiredInputField") == true) {
            pgRequireNotElement(origId);
          } //if required          
        } //button
        if ($j(id + "L").hasClass("requiredInputField") == true) {
          pgRequireNotElement(origId + "L");
        } //if required
      }
    }

   
    var subSectionsSelect = $j(subSectionBody.get(ii)).find("SELECT");
       for (var i = 0; i < subSectionsSelect.length; i++) {
         if ($j(subSectionsSelect.get(i)).attr("id") != null &&
           $j(subSectionsSelect.get(i)).attr("id").length > 0) {
           var origId = $j(subSectionsSelect.get(i)).attr("id");
           var id = "#" + origId;

		   disableAllBrowsers($j(id + "L"));
		   disableAllBrowsers($j(id));
			   
           var str = $j(subSectionsSelect.get(i)).attr("id") + "_textbox";
           if (getElementByIdOrByName(str) != null) {
             getElementByIdOrByName($j(subSectionsSelect.get(i)).attr("id")).value = "";
             getElementByIdOrByName(str).value = "";
   
           }
           if ($j(id + "L").hasClass("requiredInputField") == true) {
             pgRequireNotElement(origId + "L");
           } //if required

           $j("#" + id).parent().parent().find("img").attr("disabled",true);
           $j("#" + id).parent().parent().find("img").attr("disabled",true);
 		  
		 
         }
       }
  }
  //if batch subsection - clear the data in the repeating section
  if ($j(subSectionId).hasClass("batchSubSection")) {
  	if(window.event!=null && window.event.type != 'load') {
		clearRepeatingblk(elementId);
        }		
	$j(subSectionId).addClass("batchSubSectionDisabled");
  }  

}

function sharePamCaseLoad()
{
  var divElt = getElementByIdOrByName("pageview");
  divElt.style.display = "block";
  var o = new Object();
  o.opener = self;
  //window.showModalDialog("/nbs/PageAction.do?method=sharePageCaseLoad", o, GetDialogFeatures(700, 400, false));
  
  var URL = "/nbs/PageAction.do?method=sharePageCaseLoad";
  
  var modWin = openWindow(URL, o,GetDialogFeatures(700, 400, false, false), divElt, "");
  
  return false;
}

function sharePageCaseSubmit(exportFacility, comment, docType)
{
	if (docType == 'undefined' || docType == null)
  		document.forms[0].action = "/nbs/PageAction.do?method=sharePageCaseSubmit&exportFacility=" + exportFacility + '&comment=' + comment;
  	else
  		document.forms[0].action = "/nbs/PageAction.do?method=sharePageCaseSubmit&exportFacility=" + exportFacility + '&comment=' + comment +"&documentType=" +docType;
  document.forms[0].submit();
}

function getDWRPlace(identifier)
{
  dwr.util.setValue(identifier, "");
  var code = $(identifier + "Text");
  JPageForm.getDwrPlaceDetails(code.value, identifier, function(retData) {
    handlePlaceData(retData, identifier);
  });
}

function handlePlaceData(retData, identifier)
{
  dwr.util.setEscapeHtml(false);
  if (retData.indexOf('$$$$$') != -1) {
    var code = $(identifier + "Text");
    code.value = "";
    dwr.util.setValue(identifier, "");
    dwr.util.setValue(identifier + "Error", "");

    var uidElement = getElementByIdOrByName(identifier);var ar = retData.split("$$$$$");
    var uidValue = ar[0];
    uidElement ? uidElement.value = uidValue : "";
    var d = ar[1];
    d += "<br/>" + ar[2];
    dwr.util.setValue(identifier + "Disp", d);
    $j("#clear" + identifier).show();
    $j("#" + identifier + "SearchControls").hide();
  } else {
    dwr.util.setValue(identifier + "Error", retData);
    clearPlace(identifier);
  }
}

function clearPlace(identifier)
{
  $j("#" + identifier + "Text").show();
  $j("#" + identifier + "CodeLookupButton").show();
  $j("#clear" + identifier ).hide();
  $j("#" + identifier + "SearchControls").show();
  $j("#" + identifier + "Disp").html("");
}

function getHangoutPlace(identifier)
{

  var urlToOpen = "/nbs/Place.do?method=find&identifier="+identifier;
  var params="left=100, top=50, width=650, height=500, menubar=no,titlebar=no,toolbar=no,scrollbars=yes,location=no,status=yes,top=150,left=150";
  var pview = getElementByIdOrByName("pageview");
  pview.style.display = "block";
  var o = new Object();
  o.opener = self;
 // var modWin = window.showModalDialog(urlToOpen,o, "dialogWidth: " + 760 + "px;dialogHeight: " +
   //           700 + "px;status: no;unadorned: yes;scroll: yes;help: no;" +
 //           (true ? "resizable: yes;" : ""));
  
  var dialogFeatures = "dialogWidth: " + 760 + "px;dialogHeight: " +
              700 + "px;status: no;unadorned: yes;scroll: yes;help: no;" +
  (true ? "resizable: yes;" : "");
  
  var modWin = openWindow(urlToOpen, o,dialogFeatures, pview, "");
  
  /*var nm= getElementByIdOrByName(identifier).value;        
   if (nm != null && nm != "") {
     var returnedValue = "";
     JBaseForm.getDwrPlaceDetailsByName(nm, function(retData){
   	  returnedValue = retData;
   	   handlePlaceData(returnedValue, identifier);
     });
   }*/
}

function pgEnableElements(destArr)
{
  for(var i = 0; i < destArr.length; i++){
    pgEnableElement( destArr[i] );
  }
}

function pgDisableElements(destArr)
{
  for(var i = 0; i < destArr.length; i++){
    pgDisableElement( destArr[i] );
  }
}

function pgRequireElements(destArr)
{
  for(var i = 0; i < destArr.length; i++){
    pgRequireElement( destArr[i] );
  }
}

function pgSubSectionDisabledGrey(elementId)
{
  var subSectionId = "#" + elementId;
  var subSectionBody = $j(subSectionId).find("tbody");
  for (var ii = 0; ii < subSectionBody.length; ii++) {
    var subSectionTBody = $j(subSectionBody.get(ii));
    var subSectionsInput = subSectionTBody.find("INPUT");
    for (var i = 0; i < subSectionsInput.length; i++) {
      if ($j(subSectionsInput.get(i)).attr("id") != null &&
        $j(subSectionsInput.get(i)).attr("id").length > 0) {
        var origId = $j(subSectionsInput.get(i)).attr("id");
        pgDisableElement(origId);
        pgRequireNotElement(origId);
      }
    }

    var subSectionsSelect = $j(subSectionBody.get(ii)).find("SELECT");
    for (var i = 0; i < subSectionsSelect.length; i++) {
      if ($j(subSectionsSelect.get(i)).attr("id") != null &&
        $j(subSectionsSelect.get(i)).attr("id").length > 0) {
        var origId = $j(subSectionsSelect.get(i)).attr("id");
        pgDisableElement(origId);
        pgRequireNotElement( origId );
      }
    }
  }
  //if batch subsection - clear the data in the repeating section
  if ($j(subSectionId).hasClass("batchSubSection")) {
    if(window.event!=null && window.event.type != 'load') {
    	clearRepeatingblk(elementId);
    }
  }
}

//Hide the element and clear any data
function pgHideElement(elementId) {
	//hide any inputs or images associated with the element
	$j("#"+elementId+"L").parent().parent().hide(); //find the TR and hide it
	//$j("#"+elementId).parent().parent().hide(); //added for the business rule view
	
	pgClearElement(elementId);
}

//Show the element
function pgUnhideElement(elementId) {
	//alert("unhide " + elementId);
	//show any inputs or images associated with the element
	//$j("#"+elementId).parent().parent().show(); //added for the business rule view
	$j("#"+elementId+"L").parent().parent().show(); //find the TR and unhide it
}

//Hide the participation
function pgHideParticipationElement(elementId) {
	//clear the value if present
	//alert("hidePar "  + elementId);
	if ($j("#clear" + elementId).hasClass("none") == false) {
		//alert("click");
		$j("#" + elementId + "CodeClearButton").click();
	}
	//hide the Participation
	$j("#" + elementId + "L").parent().parent('tr').hide();
	$j("#" + elementId + "S").parent().hide();
}

//Show the participation
function pgUnhideParticipationElement(elementId) {
	//Show the Participation
	$j("#" + elementId + "L").parent().parent('tr').show();
	$j("#" + elementId + "S").parent().show();
	// pgEnableParticipationElement(elementId);
}

//Hide the Subsection
function pgSubSectionHidden(elementId) {
	//clear values
	pgSubSectionDisabled(elementId);
	//hide subsection
	if(getElementByIdOrByName(elementId)!=null)//Fatima: added because it's an issue
		getElementByIdOrByName(elementId).style.display = "none";
}
//Show the Subsection
function pgSubSectionShown(elementId) {
	//if currently hidden, unhide
	
	if (getElementByIdOrByName(elementId)!=null){//Fatima: added because it is an issue
	if (getElementByIdOrByName(elementId).style.display == "none") {
		getElementByIdOrByName(elementId).style.display = "";
		pgSubSectionEnabled(elementId);
	}
	}
}

//   Clear any value associated with the input
function pgClearElement(elementId) {
	//clear any inputs associated with the element
	$j("#" + elementId).parent().parent().find(":input").val("");
	//if multiselect is there - get rid of selected values
	var spanSelectedVal = getElementByIdOrByName(elementId + "-selectedValues");
	if (spanSelectedVal != null) {
		spanSelectedVal.innerHTML = " Selected Values: "
	}
}

//	Specific function for other race radio
function getCheckedOtherRace(radioObj) {
	if(!radioObj)
		return "";
	var radioLength = radioObj.length;
	if(radioLength == undefined) {
		if (getElementByIdOrByName("DEM154") != null) {
			if(radioObj.checked) 
				pgUnhideElement("DEM154");
			else
				pgHideElement("DEM154");
		}
	}
	return;
}

//	Specific function for other race radio
function getOnLoadOtherRace() {
		if (getElementByIdOrByName("DEM154") == null) 
			return;
			
		var otherRaceChkd = $j("input[type='checkbox'][name='pageClientVO.otherRace']").attr('checked');
		if (otherRaceChkd != null && otherRaceChkd) {
			pgUnhideElement("DEM154");
			return;
		}
		if($j("#DEM154").val())
			pgUnhideElement("DEM154");
		else
			pgHideElement("DEM154");
	return;
}





function getDataFromForm()
{
  JPageForm.getAnswerMapFromForm(function(data) {
	  console.log(data);
    });
  
}

function populatePatient(mprUid) {
	clearPatientData();
	JPageForm.getDwrPatientDetails(mprUid, function(retData) {
		var person = retData;
		var today = new Date();
		var dd = today.getDate();
		var mm = today.getMonth() + 1; //January is 0!
		var yyyy = today.getFullYear();

		if (dd < 10) {
		  dd = '0' + dd;
		}

		if (mm < 10) {
		  mm = '0' + mm;
		}

		today = mm + '/' + dd + '/' + yyyy;
		
		dwr.util.setValue("NBS104", today);//admin as  of date
		dwr.util.setValue("DEM104", person.DEM104);//last Name
		dwr.util.setValue("DEM105", person.DEM105);//middle name
		dwr.util.setValue("DEM102", person.DEM102);//first name
		dwr.util.setValue("DEM107", person.DEM107);//sufix
		autocompTxtValuesForJSPByElement('DEM107');
		//dwr.util.setValue("NBS095", person.NBS095);//name info as of date
		//dwr.util.setValue("NBS096", person.NBS096);//other as of date
		dwr.util.setValue("DEM115", person.DEM115);//DOB
		
		
		dwr.util.setValue("INV2001", person.INV2001);//reported age
		dwr.util.setValue("INV2002", person.INV2002);//reported age unit
		autocompTxtValuesForJSPByElement('INV2002');
		
		dwr.util.setValue("DEM113", person.DEM113);//current sex
		autocompTxtValuesForJSPByElement('DEM113');
		
		if(person.DEM113 != '' && person.DEM113 == 'F'){
			pgEnableElement('INV178');// Preganncy Status
			pgEnableElement('NBS128');// pregnant week
		}
		else{
			pgDisableElement('INV178');
			pgDisableElement('NBS128');
		}
		
		//dwr.util.setValue("NBS097", person.NBS097);//Mortality Information As Of Date
		dwr.util.setValue("DEM127", person.DEM127);//deceased
		autocompTxtValuesForJSPByElement('DEM127');
		
		enableOrDisableTarget("DEM127","DEM128");
		dwr.util.setValue("DEM128", person.DEM128);//deceased date
		//dwr.util.setValue("NBS098", person.NBS098);//Marital Status As Of Date
		dwr.util.setValue("DEM140", person.DEM140);//Marital Status
		autocompTxtValuesForJSPByElement('DEM140');
		//dwr.util.setValue("NBS451", person.NBS451);//SSN As Of Date
		dwr.util.setValue("DEM133", person.DEM133);//SSN
		//dwr.util.setValue("NBS102", person.NBS102);//address as of
		dwr.util.setValue("DEM159", person.DEM159);//street address 1
		dwr.util.setValue("DEM160", person.DEM160);//street address 2
		dwr.util.setValue("DEM161", person.DEM161);//city
		
		
		dwr.util.setValue("DEM162", person.DEM162);//state
		autocompTxtValuesForJSPByElement('DEM162');
		var stateId = getElementByIdOrByName('DEM162');
		getDWRCounties(stateId, 'DEM165');
		
		dwr.util.setValue("DEM163", person.DEM163);//zip
		dwr.util.setValue("DEM167", person.DEM167);//country
		autocompTxtValuesForJSPByElement('DEM167');
		//dwr.util.setValue("NBS103", person.NBS103);//telphone as of
		dwr.util.setValue("DEM177", person.DEM177);//home phone
		dwr.util.setValue("NBS002", person.NBS002);//work phone
		dwr.util.setValue("NBS003", person.NBS003);//ext.
		dwr.util.setValue("NBS006", person.NBS006);//cell phone
		dwr.util.setValue("DEM182", person.DEM182);//email
		//dwr.util.setValue("NBS100", person.NBS100);//ethnicity as of
		dwr.util.setValue("DEM155", person.DEM155);//ethnicity
		autocompTxtValuesForJSPByElement('DEM155');
		
		//dwr.util.setValue("NBS470", person.NBS470);//person parent uid
		
		//dwr.util.setValue("NBS101", person.NBS101); //race as of
		
		//Race Information
		dwr.util.setValue("pageClientVO.americanIndianAlskanRace", person.americanIndianAlskanRace);
		dwr.util.setValue("pageClientVO.asianRace", person.asianRace);
		dwr.util.setValue("pageClientVO.africanAmericanRace", person.aAfricanAmericanRace);
		dwr.util.setValue("pageClientVO.hawaiianRace", person.hawaiianRace);
		dwr.util.setValue("pageClientVO.whiteRace", person.whiteRace);
		dwr.util.setValue("pageClientVO.otherRace", person.otherRace);
		dwr.util.setValue("pageClientVO.refusedToAnswer", person.refusedToAnswer);
		dwr.util.setValue("pageClientVO.notAsked", person.notAsked);
		dwr.util.setValue("pageClientVO.unKnownRace", person.unKnownRace);
		pgCalculateReportedAge('DEM115','INV2001','INV2002','NBS096','NBS104');
		
		dwr.util.setValue("SSN", person.DEM133);
		dwr.util.setValue("PatientId", person.PatientId);
		
		dwr.util.setValue("Address", person.Address);
		dwr.util.setValue("Name", person.FullName);
		var sex = person.Sex;
		if(sex == null || (sex !=null && sex.length==0))
			sex = "---";
		dwr.util.setValue("Sex",sex);
		
		dwr.util.setValue("Dob",person.DEM115+" "+person.PersonAge);
		
		populateBatchRecords();
		
		var county = person.DEM165;
		setTimeout(function() {
			countyTimer(county);
		}, 1000)
		//dwr.util.setValue("DEM165", person.DEM165);//county
		//autocompTxtValuesForJSPByElement('DEM165');
	});
	
}

function countyTimer(county){
	getElementByIdOrByName("DEM165").value=county;
	autocompTxtValuesForJSPByElement('DEM165');
}

function clearPatientData(){
	clearRepeatingblk('ENTITYID100');
	getElementByIdOrByName("NBS104").value="";//admin as  of date
	getElementByIdOrByName("DEM104").value="";//last Name
	getElementByIdOrByName("DEM105").value="";//middle name
	getElementByIdOrByName("DEM102").value="";//first name
	getElementByIdOrByName("DEM107").value="";//sufix
	getElementByIdOrByName("DEM107_textbox").value="";
	//getElementByIdOrByName("NBS095").value="";//name info as of date
	//getElementByIdOrByName("NBS096").value="";//other as of date
	getElementByIdOrByName("DEM115").value="";//DOB
	
	getElementByIdOrByName("INV2001").value="";//reported age
	getElementByIdOrByName("INV2002").value="";//reported age unit
	getElementByIdOrByName("INV2002_textbox").value="";
	getElementByIdOrByName("DEM113").value="";//current sex
	getElementByIdOrByName("DEM113_textbox").value="";
	pgDisableElement('INV178');
	pgDisableElement('NBS128');
	//getElementByIdOrByName("NBS097").value="";//Mortality Information As Of Date
	getElementByIdOrByName("DEM127").value="";//deceased
	getElementByIdOrByName("DEM127_textbox").value="";
	
	enableOrDisableTarget("DEM127","DEM128");
	getElementByIdOrByName("DEM128").value="";//deceased date
	//getElementByIdOrByName("NBS098").value="";//Marital Status As Of Date
	getElementByIdOrByName("DEM140").value="";//Marital Status
	getElementByIdOrByName("DEM140_textbox").value="";
	//getElementByIdOrByName("NBS451").value="";//SSN As Of Date
	getElementByIdOrByName("DEM133").value="";//SSN
	//getElementByIdOrByName("NBS102").value="";//address as of
	getElementByIdOrByName("DEM159").value="";//street address 1
	getElementByIdOrByName("DEM160").value="";//street address 2
	getElementByIdOrByName("DEM161").value="";//city
	
	getElementByIdOrByName("DEM162").value="";//state
	getElementByIdOrByName("DEM162_textbox").value="";
	getElementByIdOrByName("DEM163").value="";//zip
	getElementByIdOrByName("DEM167").value="";//country
	getElementByIdOrByName("DEM167_textbox").value="";
	//getElementByIdOrByName("NBS103").value="";//telphone as of
	getElementByIdOrByName("DEM177").value="";//home phone
	getElementByIdOrByName("NBS002").value="";//work phone
	getElementByIdOrByName("NBS003").value="";//ext.
	getElementByIdOrByName("NBS006").value="";//cell phone
	getElementByIdOrByName("DEM182").value="";//email
	//getElementByIdOrByName("NBS100").value="";//ethnicity as of
	getElementByIdOrByName("DEM155").value="";//ethnicity
	getElementByIdOrByName("DEM155_textbox").value="";
	//getElementByIdOrByName("NBS101").value="";//race as of
	//getElementByIdOrByName("NBS470").value="";//person parent uid
	
	//Race Information
	getElementByIdOrByName("pageClientVO.americanIndianAlskanRace").checked=false;
	getElementByIdOrByName("pageClientVO.asianRace").checked=false;
	getElementByIdOrByName("pageClientVO.africanAmericanRace").checked=false;
	getElementByIdOrByName("pageClientVO.hawaiianRace").checked=false;
	getElementByIdOrByName("pageClientVO.whiteRace").checked=false;
	getElementByIdOrByName("pageClientVO.otherRace").checked=false;
	getElementByIdOrByName("pageClientVO.refusedToAnswer").checked=false;
	getElementByIdOrByName("pageClientVO.notAsked").checked=false;
	getElementByIdOrByName("pageClientVO.unKnownRace").checked=false;
	
	getElementByIdOrByName("DEM165").value="";//county
	getElementByIdOrByName("DEM165_textbox").value="";
	
	//Clear lab hearder when clear button clicked (Data Entry flow).
	if(getElementByIdOrByName("PatientId")!=null)
		getElementByIdOrByName("PatientId").innerHTML="";
	if(getElementByIdOrByName("Address")!=null)
		getElementByIdOrByName("Address").innerHTML="";
	if(getElementByIdOrByName("Name")!=null)
		getElementByIdOrByName("Name").innerHTML="---";
	if(getElementByIdOrByName("Sex")!=null)
		getElementByIdOrByName("Sex").innerHTML="---";
	if(getElementByIdOrByName("Dob")!=null)
		getElementByIdOrByName("Dob").innerHTML="---";
	if(getElementByIdOrByName("SSN")!=null)
		getElementByIdOrByName("SSN").innerHTML="";
	
	clearRepeatingblk('ENTITYID100');
	fillTable("ENTITYID100","patternENTITYID100","questionbodyENTITYID100");
	JPageForm.clearDwrPatientDetails();

}


/**********************************************************NEW METHODS RELATED TO LAB REPORT IN PAGE BUILDER**********************************************************/
	/**
	 * setRowKey: in the corresponding idSection, the currentKey is sets in the idRow received as a parameter. If the currentKey doesn't exist,
	 * then the method getKey is called in order to get the currentKey. 
	 */
	function setRowKey(idRow, currentKey, idSection){

		if(currentKey=="" || currentKey==null || currentKey == undefined){
			if($j("#"+idRow)!=null && $j("#"+idRow) !=undefined)
				if($j("#"+idRow).children()!=null &&
					$j("#"+idRow).children()!=undefined &&
					$j("#"+idRow).children().length!=null &&
					$j("#"+idRow).children().length!=0){
					
					var children =  $j("#"+idRow).children();
					
						if($j(children[0]).find('input[name~="rowKey"]')!=null &&  $j(children[0]).find('input[name~="rowKey"]')!=undefined
						&& $j(children[0]).find('input[name~="rowKey"]').length!=0)
						if($j(children[0]).find('input[name~="rowKey"]')[0].value==null || $j(children[0]).find('input[name~="rowKey"]')[0].value == undefined || $j(children[0]).find('input[name~="rowKey"]')[0].value ==""){
							$j(children[0]).find('input[name~="rowKey"]')[0].value = getKey(idSection);
						//	alert("assigned key"+$j(children[0]).find('input[name~="rowKey"]')[0].value);
						}
	
						
						}
			
			}else{
				var children =  $j("#"+idRow).children();
				$j(children[0]).find('input[name~="rowKey"]')[0].value = currentKey;
				
				
			}
		emptyCurrentKey();
	}
	
	/**
	 * deleteKeyFromHashMapInSession: delete the record from the page
	 */
	function deleteKeyFromHashMapInSession(id){
		
		var key = getKeyNumberAssociatedToRow(id);
		JPageForm.deleteSubFormFromSession(key, function(){
		});	
		
	}
	
	
	/**
	 * setCurrentKeyfromSelectedRow: sets the the row number of the corresponding key based on the id in that row in the hidden currentKey field. That id is coming from viewClicked, editClicked or delete
	 * also the mode is appended to the key, that way we know if the user clicked from View or Edit icon.
	 * @param id
	 */
	function setCurrentKeyfromSelectedRow(id, mode){
		
		var keyNumber = getKeyNumberAssociatedToRow(id);
		keyNumber = keyNumber +"_MODE_"+mode;//Key plus the mode, which is the action selected in the batch entry: view or edit.
		//alert(id+" "+keyNumber);
		if(document.getElementById("NBS459")!=null && document.getElementById("NBS459")!=undefined)
			 document.getElementById("NBS459").setAttribute("value",keyNumber);
		
	}
	
	/**
	 * enableActionButtons: enable the isolate tracking and susceptibility page from Lab Report view once the view icon
	 * from resulted test batch entry has been selected.
	 */
	function enableActionButtons(){
		
		if(document.getElementById("NBS_LAB222Button")!=null && document.getElementById("NBS_LAB222Button") != undefined)
			document.getElementById("NBS_LAB222Button").disabled=false;
		if(document.getElementById("NBS_LAB329Button")!=null && document.getElementById("NBS_LAB329Button") != undefined)
			document.getElementById("NBS_LAB329Button").disabled=false;

	}
	
	/**
	 * getKeyNumberAssociatedToRow: returns the value for the key stored in the same row than the id
	 * @param id
	 * @returns {String}
	 */
	function getKeyNumberAssociatedToRow(id){
		
		var keyNumber = "";
		
		if($j("#"+id)!=null && $j("#"+id)!=undefined &&
				$j("#"+id).parent()!=null & $j("#"+id).parent()!=undefined &&
				$j("#"+id).parent().parent()!=null && $j("#"+id).parent().parent()!=undefined
						&&  $j($j("#"+id).parent().parent()[0]).find('input[name~="rowKey"]')!=null 
						&&  $j($j("#"+id).parent().parent()[0]).find('input[name~="rowKey"]')!=undefined
						&& $j($j("#"+id).parent().parent()[0]).find('input[name~="rowKey"]').length >0)
						
						keyNumber = $j($j("#"+id).parent().parent()[0]).find('input[name~="rowKey"]')[0].value;
		
		return keyNumber;	
	}
	
	/**
	getNextAvailableKey: returns a key not used in the batch entry
	*/
	function getNextAvailableKey(idSection){
		
		var key=0;
		
		var rows = $j("#"+idSection).find('input[name~="rowKey"]');
		
		for (var i=0; i<rows.length;i++){
			
			keyNew=rows[i].value;
			if(keyNew>key)
				key = keyNew;
		}
			
		key=parseFloat(key)+parseFloat(1);
		//alert("next available key is "+key);
		//$j($j(document.getElementById("viewRESULTED_TEST_CONTAINER2").parentElement.parentElement).children()[0]).children()[0]
		return key;	
	}
	
	function getCurrentKey(parentDoc){
		
		var key=0;
		
		if(parentDoc == null || parentDoc == undefined)
			parentDoc = document;
			
		if(getElementByIdOrByNameNode("NBS459", parentDoc)!=null && getElementByIdOrByNameNode("NBS459", parentDoc)!=undefined){
			 key = getElementByIdOrByNameNode("NBS459", parentDoc).getAttribute("value");
	
		}
		
		return key;
	}
	
	
	/**
	 * getMode: returns the mode used to select the row from the batch entry:  View or Edit
	 * @returns {String}
	 */
	function getMode(){
		
		var mode="";
		
		if(document.getElementById("NBS459")!=null && document.getElementById("NBS459")!=undefined){
			mode = document.getElementById("NBS459").getAttribute("value");
			 
			if(mode.indexOf("_MODE_")!=-1){
				var arrayKeyMode = mode.split("_MODE_");
				mode = arrayKeyMode[1];
				
			}
			else
				mode="";
		}
		
		return mode;
	}

	/**
	 * emptyCurrentKey: sets the value "" in the current key field (NBS459)
	 */
	function emptyCurrentKey(){
		
		if(document.getElementById("NBS459")!=null && document.getElementById("NBS459")!=undefined)
			document.getElementById("NBS459").setAttribute("value","");
		
	}
	
	/**
	* getKey(): if there's no key in the currentKey field, get the next available (not used in the batch entry), put it in the current key field, so both
	iso and susceptibilities use the same key.
	*/
	
	function getKey(idSection){
		
		var key = getCurrentKey();
	
		if(key == undefined || key == null || key == "")
			key = getNextAvailableKey(idSection);
	
		if(document.getElementById("NBS459")!=null && document.getElementById("NBS459")!=undefined)
			document.getElementById("NBS459").setAttribute("value",key);
		
		if(!(key == undefined || key == null || key == ""))
			if((key+"").indexOf("_MODE_")!=-1){
				var arrayKeyMode = key.split("_MODE_");
				key = arrayKeyMode[0];	
			}
	
			
		return key;
	}
	
	/**
	 * addSusceptibilityToResultedTestBatchEntry: adds to the section idSection, and the column column received as a pararmeter, for example 5 if we are on Lab Report Edit page, or 3 if we are on Lab Report View page,
	 * the Show Reflex Test Result link which shows the susceptibility data in the Resulted Test batch entry once the mouse is over the link.
	 * index is expected to be 0 the first time the method is call, that way, we can make this function recursive and the DWR will work as expected
	 * in Lab reports
	 * @param idSection
	 * @param index
	 * @param column
	 */
	function addSusceptibilityToResultedTestBatchEntry(idSection, index, column){
	
		var rowNumber = 0;
		var count = $j("#"+idSection).find('input[name~="rowKey"]').length;
		var children = $j("#"+idSection).find('input[name~="rowKey"]');
		var rowKey ="";

		if(index<count){
			if(children[index].value!=""){
				rowKey = children[index].value;
	
				JPageForm.getSusceptibilityData(rowKey, function(susceptData){
			
					var organismCell = $j($j("#"+idSection).find('tr[id~="pattern"]')[index]).find('td')[column];
	
					if(organismCell!=null && organismCell!='undefined'){
				
						var content = organismCell.textContent;
						
						if(content!=null && content!=undefined && content.indexOf("Show Reflex Test Results")!=-1)
							content = content.substring(0,content.indexOf("Show Reflex Test Results"));
						
						organismCell.textContent="";
						
						$j($j($j("#"+idSection).find('tr[id~="pattern"]')[index]).find('td')[column]).append(content+susceptData);
					}
					index=index+1;
					addSusceptibilityToResultedTestBatchEntry(idSection, index, column);
				});
		
				}
		}
	}
	
	/**
	 * generateRowKeyValues: from view lab report, it generates consecutive integer numbers and assign them to the rowKey (hidden field on each of the resulted test rows)
	 * @param idSection
	 */
	function generateRowKeyValues(idSection){

		var children = $j("#"+idSection).find('input[name~="rowKey"]');
		var index = 1;

		for(var i=0; i<children.length;i++){
		
			children[i].value=index;
			index=index+1;
		}
	}

	
	
	/**
	 * OpenForm: open the Isolate tracking, or the susceptilibity popup page from the action button (nbs_ui_component = 1033).
	 */
	
	function OpenForm(formCd, questionIdentifier)
	   {
		var mode = getMode();
	//	if(mode=="" || mode == null || mode == undefined)
	//		mode = "View";
		//var electronicInd = 'N';
		
//		if($j("img[src$='ind_electronic.gif']").length==1)
//			electronicInd = 'Y';
		
		var id = questionIdentifier.id;
		var idSection = $j("#"+id).parents(".subSect")[0].id;//get the subsection name from the parent of the button question identifier clicked which class is subSect
		var key = getKey(idSection);
		var qId = questionIdentifier.id;
		var currentKey = qId+"_"+key;
		
		//alert("currentKey "+currentKey);
	
		if (formCd.indexOf("OpenForm: ")!=-1){
			formCd = formCd.substring(formCd.indexOf("OpenForm: ")+10);
			formCd = formCd.trim();
		}
	
	       var urlToOpen =  "/nbs/PageSubFormAction.do?method=createGenericLoad&mode=Create&Action=DSInvestigationPath&formCd="+formCd+"&NBS459="+currentKey+"&modeBatchEntry="+mode;//+"&electronicInd="+electronicInd;
	      
	       var divElt = getElementByIdOrByName("pageview");
	       if (divElt == null) {
	           divElt = getElementByIdOrByName("blockparent");
	       }
	       divElt.style.display = "block";
	       var o = new Object();
	       o.opener = self;
	       var modWin = openWindow(urlToOpen, o, GetDialogFeatures(1050, 700, false, true), divElt, "");
	   }
	
	
	 /**
	  * populateSingleSelectInLabs: populates single select from lab, for example, resulted test, called from edit onload.
      */
	function populateSingleSelectInLabs(){
			
	 codeLookupLaboratoryReport('entity-table-Org-ReportingOrganizationUID', document, "false", "edit");
	
	}
	
	
	/**
	 * codeLookupLaboratoryReport: method called from the Reporting Facility Search and Quick Code on Lab Reports.
	 * @param type
	 * @parentDoc: document or the parent of the popup in case this method is called from the Search popup
	 * @closeWindows: if the method is call from the document, the value should be "false", if the method
	 * is called from the popup child, for example, from search facility popup, we need to close the popup
	 * after all the DWR calls, so the value should be "true"
	 */
	
	function codeLookupLaboratoryReport(type, parentDoc, closeWindows, mode)
	{
		 DWREngine.setAsync(false);
		var orgSearchResult = "";
		var parseString ="";
		var code = "";
		var labelList = new Array();
		var errorText = "";
		var targetOrdered = "";
		var targetResulted="";
		var programAreaCode = "";
		var UID = "";
		var reportUID = "";
		var programAreaCode ="";
		var target ="";
		var dropdownQuestionIdentifier="";
		var conditionCode = "";
	
			
		target = "resultedTest";
	
		if(type == "entity-table-Org-ReportingOrganizationUID")//TODO: Change this name??
		{
	
			clearDropdown("NBS_LAB220", parentDoc);//Clear the Resulted Test dropdown
			clearDropdown("NBS_LAB112", parentDoc);//Clear the Resulted Test dropdown
			
			code = getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc).value;//Reporting Facility Code
			
			UID = type.substring((type.lastIndexOf("entity-table-Org") +13), type.length);
			
			programAreaCode = getElementByIdOrByNameNode("INV108",parentDoc).value;
			
			//if(programAreaCode==null || programAreaCode=="")
			//	programAreaCode="NONE";
	
			targetResulted = "resultedTest";
			targetOrdered = "orderedTest";
			dropdownQuestionIdentifierResulted = "NBS_LAB220";
			dropdownQuestionIdentifierOrdered = "NBS_LAB112";
			
			reportUID = getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid", parentDoc).value;
		}
		else
		if(type == "entity-table-Org-HospitalUID")
		{
			code = getElementByIdOrByNameNode("entity-codeLookupText-Org-HospitalUID",parentDoc).value;
			UID = type.substring((type.lastIndexOf("entity-table-Org") +13), type.length);
		}
		else if(type == "entity-table-Org-OrderingFacilityUID")
		{
			code = getElementByIdOrByNameNode("entity-codeLookupText-Org-OrderingFacilityUID",parentDoc).value;
			UID = type.substring((type.lastIndexOf("entity-table-Org") +13), type.length);
		}
		else if(type == "entity-table-Prov-entity.providerUID")
		{
			code = getElementByIdOrByNameNode("entity-codeLookupText-Prov-entity.providerUID",parentDoc).value;
			UID = type.substring((type.lastIndexOf("entity-table-Org") +14), type.length);
		}
		else if(type == "entity-table-Prov-entity.reporterUID")
		{
			code = getElementByIdOrByNameNode("entity-codeLookupText-Prov-entity.reporterUID",parentDoc).value;
			UID = type.substring((type.lastIndexOf("entity-table-Org") +14), type.length);
		}
		else if(type == "entity-table-Prov-entity.entityProvUID")
		{
			code = getElementByIdOrByNameNode("entity-codeLookupText-Prov-entity.entityProvUID",parentDoc).value;
			UID = type.substring((type.lastIndexOf("entity-table-Org") +14), type.length);
		}
	
		var codeLength = 0;

		if(!(programAreaCode==null || programAreaCode=="")){
			
			populateLabTest(type, code, target, targetOrdered,targetResulted, UID, reportUID, conditionCode, programAreaCode, dropdownQuestionIdentifierResulted, dropdownQuestionIdentifierOrdered, parentDoc, closeWindows, mode);
	
		}
			
			//	else
		//	if(closeWindows=="true")//If it is coming from the Search popup
	      //    	self.close();
	
		 DWREngine.setAsync(true);
	}
	
	/**
	 * populateLabTest: contains a DWR call to get the values of the Resulted Test dropdown. Populates the resulted test data in the dropdown in the lab report page
	 * @param type
	 * @param code
	 * @param target
	 * @param targetOrdered
	 * @param targetResulted
	 * @param uid
	 * @param reportUid
	 * @param conditionCode
	 * @param programAreaCode
	 */
	
	function populateLabTest(type, code, target, targetOrdered,targetResulted, uid, reportUid, conditionCode, programAreaCode,dropdownQuestionIdentifierResulted,dropdownQuestionIdentifierOrdered,parentDoc, closeWindows, mode)
	  {
		 var dropdownCheckedParam="";	
		 var conditionCode ="";
	
	     JPageForm.getResultedTestData(target, targetOrdered, targetResulted,
				type, code, reportUid, uid, programAreaCode, conditionCode,
				dropdownCheckedParam, dropdownQuestionIdentifierResulted, closeWindows, function(data) {
				
	    	 
	    	 //Only trigger this business rule if the mode is not On Edit load (mode!="edit")
	    	 if(mode!="edit")	 
	    		 clearFieldsAssociatedToReportingFacility(parentDoc);
	    	 
			
			if(parentDoc==document){
			  //Resulted Test
				    	
			 DWRUtil.removeAllOptions(getElementByIdOrByNameNode(dropdownQuestionIdentifierResulted,parentDoc));
	         DWRUtil.addOptions(getElementByIdOrByNameNode(dropdownQuestionIdentifierResulted,parentDoc), data[0], "key", "value" );
			
			  //Ordered Test
	         DWRUtil.removeAllOptions(getElementByIdOrByNameNode(dropdownQuestionIdentifierOrdered,parentDoc));
	         DWRUtil.addOptions(getElementByIdOrByNameNode(dropdownQuestionIdentifierOrdered,parentDoc), data[1], "key", "value" );
	       
			}else{
	         //In case the DWRUtil call doesn't work (or it is coming from the Search button)
	    	 var selectData = data[0];
			 var elem = getElementByIdOrByNameNode(dropdownQuestionIdentifierResulted,parentDoc);
	    	 fillSelectElement(elem, selectData, parentDoc);
			
			 //In case the DWRUtil call doesn't work
	    	 selectData = data[1];
			 elem = getElementByIdOrByNameNode(dropdownQuestionIdentifierOrdered,parentDoc);
	    	 fillSelectElement(elem, selectData, parentDoc);
			}
	         
	         
	    	 
	         //Prepopulate NBS_LAB112 if already has a value (edit)
	       
	         if(data[2]!=null && data[2]!=undefined && data[2][0] != null && data[2][0] != undefined ){
	        	 
	        	 
	        	 var codeValue = data[2][0].split("$$");
	        	 var code = codeValue[0];
	        	 var value = codeValue[1];
	        	 
	        	 var val = val;
	        	 var questionId = "NBS_LAB112";
	        	 var description = value;
	        	 var descriptionId = value +"("+code+")";
	        	 var codeId = code;

	        	 repeatingBlockHandleEditCodedWithSearch(val, questionId, description, descriptionId, codeId)
	         }
	         
	         
			 if(closeWindows=="true"){//If it is coming from the Search popup
				//ND-25420 // ND-23349
				 populateParticipationFromOne(getElementByIdOrByNameNode('pageClientVO.answer(NBS_LAB267)', parentDoc),'NBS_LAB365','NBS_LAB367', parentDoc);//ND-23349	
				
	          	self.close();
			 
			 }//ND-26486
	      }); 	
	  }	
	  
	/**
	 * fillSelectElement: create options inside the select elem. This has been created in order to fix an issue with IE and the DWR call. Somehow the DWR call is not working when using the Reporting Facility Search button with IE: ND-14239
	 * @param elem
	 * @param selectData
	 */
	function fillSelectElement(elem, selectData, parentDoc){

		
	
		
		 if (selectData!=null && selectData!=undefined && selectData.length>0)
			 if(elem!=null && elem!=undefined){
				elem.remove(0);
				
				 for (var i = 0; i < selectData.length; i++) {
					var option = parentDoc.createElement("option");
					option.value = selectData[i].key;
					option.text = selectData[i].value;
					elem.appendChild(option);
					}
			 }
	}
	  /**
	   * populateOrganismData: called on onload of the new Lab Report page. Populates the organism data dropdown in the lab report page
	   */
	  function populateOrganismData(parent){
		  
		  var questionIdentifier = "NBS_LAB280";
		  var parentDoc = parent;
		  
		  if(parentDoc==null || parentDoc==undefined)
			  parentDoc = document;

		
		  JPageForm.getOrganismData(function(data) {
		//alert("organism dataaaaa")
			  DWRUtil.removeAllOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc));
		 //     DWRUtil.addOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc), data, "key", "value" );

				 var selectData = data;
				 var elem = getElementByIdOrByNameNode(questionIdentifier,parentDoc);
		    	 fillSelectElement(elem, selectData, parentDoc);
		    	 
		  	if(parentDoc!=document)//It is coming from the Search popup
				 self.close();
		  	
		  });
	  
	  }
	  
	  /**
	   * populateDrugTestData: called on onload of Susceptibility page. Populates the Drug Test dropdown in the Susceptibility sub form page
	   */
	  function populateDrugTestData(){
		  
		  var questionIdentifier = "NBS_LAB110";
		  var parentDoc = document;
		  
		
		  JPageForm.getDrugtestData(function(data) {
			  
			  
			  DWRUtil.removeAllOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc));
		      DWRUtil.addOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc), data, "key", "value" );
		       
		  });
	  
	  }
var codedResultDataDropdown = null;
	  
	  
	  function populateCodedResultData(parent){
		  
		  var questionIdentifier = "NBS_LAB280";//Same for Organism and Coded Result
		  var parentDoc = parent;
		  
		  if(parentDoc==null || parentDoc == undefined)
			  parentDoc = document;
		  
		  if(codedResultDataDropdown==null)//if it is the first time getting the values for the coded result dropdown, do the DWR call, otherwise, get it from the variable.
		
		  JPageForm.getCodedResultData(function(data) {
	
			  DWRUtil.removeAllOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc));
		   //   DWRUtil.addOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc), data, "key", "value" );
		      
			  
				 var selectData = data;
				 var elem = getElementByIdOrByNameNode(questionIdentifier,parentDoc);
		    	 fillSelectElement(elem, selectData, parentDoc);

		         codedResultDataDropdown=data;
		         
		      if(parentDoc!=document && parentDoc!=null && 
		    		  ((parentDoc.location.toString().indexOf("AddLabDataEntry")==-1 && parentDoc.location.toString().indexOf("AddLab")==-1)
		    		  &&
		    		  (parentDoc.location.toString().indexOf("AddMorbDataEntry")==-1 && parentDoc.location.toString().indexOf("AddMorb")==-1)
		    		  ))//It is coming from the Search popup and not from Add organization from the Search popup
					 self.close();
			
		
		       
		  });
		  
		  else{
			
			  

			  DWRUtil.removeAllOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc));
		   //   DWRUtil.addOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc), data, "key", "value" );
		      
			  
				 var selectData = codedResultDataDropdown;
				 var elem = getElementByIdOrByNameNode(questionIdentifier,parentDoc);
		    	 fillSelectElement(elem, selectData, parentDoc);

		    	 
		    	 if(parentDoc!=document && parentDoc!=null && 
			    		  ((parentDoc.location.toString().indexOf("AddLabDataEntry")==-1 && parentDoc.location.toString().indexOf("AddLab")==-1)
			    		  &&
			    		  (parentDoc.location.toString().indexOf("AddMorbDataEntry")==-1 && parentDoc.location.toString().indexOf("AddMorb")==-1)
			    		  ))//It is coming from the Search popup and not from Add organization from the Search popup
		      {
		    	  self.close();
		      }
				
			  
			  
			  
		  }
	  
	  }
	  
	  /**
	   * populateCodedResultDataSusc: populates data in Coded Result dropdown in Susceptibility page
	   */
	  function populateCodedResultDataSusc(){
		  
		  var questionIdentifier = "NBS367";
		  var parentDoc = document;
		  
		
		  JPageForm.getCodedResultDataSusc(function(data) {
			  
			  
			  DWRUtil.removeAllOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc));
		      DWRUtil.addOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc), data, "key", "value" );
		       
		  });
	  
	  }
	  
	  /**
	   * populateResultMethodDataSusc: populates data in Resulted Method dropdown in Susceptibility page
	   */
	  function populateResultMethodDataSusc(){
		  
		  var questionIdentifier = "NBS377";
		  var parentDoc = document;
		  
		
		  JPageForm.getResultMethodDataSusc(function(data) {
			  
			  
			  DWRUtil.removeAllOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc));
		      DWRUtil.addOptions(getElementByIdOrByNameNode(questionIdentifier,parentDoc), data, "key", "value" );
		       
		  });
	  
	  }
	  
 
	  
	  
	  
	/**
	 * showHideOrganism: called from onchange event of Resulted test. If it has an organism, the organism field will be shown.
	 * In order to use this method from View Lab Report, since the NBS_LAB365 doesn't exist on that view, we can get
	 * the Resulted Facility Uid from the Session: variable called: DSLabMap, variable in the map : ORD106UID 
	 */
	  /**
		 * showHideOrganism: called from onchange event of Resulted test. If it has an organism, the organism field will be shown.
		 * In order to use this method from View Lab Report, since the NBS_LAB365 doesn't exist on that view, we can get
		 * the Resulted Facility Uid from the Session: variable called: DSLabMap, variable in the map : ORD106UID 
		 */
		  
			function showHideOrganism(parent, testNameSearchButton){

			      
				  //Clear the dropdown before the DWR call to avoid issue ND-15808
				  var codeSelectedNBS_LAB280 = $j("#NBS_LAB280").val();
				  DWREngine.setAsync(false);
				  $j("#NBS_LAB280").empty()
				  var parentDoc;
				  
				  if(parent==null|| parent==undefined)
					  parentDoc= document;
				  else
					  parentDoc = parent;
				  
				  var resultedTestSection = getResultedTestSectionName(parentDoc);
				  var programAreaCode = getProgramArea(parentDoc);

			
				  var key = getCurrentKey();

				  if(key!=null && key!="" && key.indexOf("_MODE")!=-1)
					  key=key.substring(0,key.indexOf("_MODE"));
				  
				  var labUid = getReportingFacilityUid(parentDoc);
			
				  
				  var testName="";
				  //if(getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=null &&
					//  getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=undefined)
					  //testName=getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc).value;
				  
				  if(testNameSearchButton == null || testNameSearchButton == "" || testNameSearchButton == undefined){//it is coming from dropdown
					  testName =getElementByIdOrByNameNode("NBS_LAB220",parentDoc).value;
					 
				  }else
					  testName=testNameSearchButton;//From Search button
				  
				  if(parentDoc!=document)
					  JPageForm = JBaseForm;
				  
				  if(labUid!=null){
					  if(labUid!=-1 && labUid.indexOf("|")!=-1)
						  labUid = labUid.substring(0,labUid.indexOf("|"));
				
				
					  var rowKey =  getPositionRowKey(key);
					
				
						
					  JPageForm.showHideOrganism(programAreaCode,labUid,testName, key, rowKey,function(data) {
						  
				
						  var length = myArray.length;
						  var keyOrganismCoded = getKey(resultedTestSection);
						  
						
						  if(data){//organism
							  
					
							  removeKeyFromArray(keyOrganismCoded+"-2", parentDoc);//if coded is already there, remove it
							  if(parentDoc!=document)//childWindow
								  getDialogArgument().myArray[length]=keyOrganismCoded+"-1";
							  else
								  myArray[length]=keyOrganismCoded+"-1";
							  
							
						  }else
							  {
							  removeKeyFromArray(keyOrganismCoded+"-1", parentDoc);//if coded is already there, remove it

				
							  if(parentDoc!=document)//childWindow
								  getDialogArgument().myArray[length]=keyOrganismCoded+"-2";
							  else
								  myArray[length]=keyOrganismCoded+"-2";
							  
							  }
							  
						  
						  
						 if(data){
							 //alert("Data "+data);
							 //alert("parentDoc.isOrganismCurrent: "+parentDoc.isOrganismCurrent)
							 //alert("parentDoc.isOrganismPrevious: "+parentDoc.isOrganismPrevious)
							 
							 if(!parentDoc.isOrganismCurrent)
								 showOrganism(parentDoc); 
							 else{
								 showOrganism(parentDoc); 
								//Set te previous value back!!
								 $j("#NBS_LAB280").val(codeSelectedNBS_LAB280);
								 autocompTxtValuesForJSP();
								 
								 if(parentDoc!=document)//It is coming from the Search popup
									 self.close();
								
								 
							 }
							 
						 }
						 else{
							 if(parentDoc.isOrganismCurrent){
								 hideOrganism(parentDoc);
								 deleteSubFormValues(parentDoc);
							 }
							 else{
								 hideOrganism(parentDoc);
								 //Set te previous value back!!
								 $j("#NBS_LAB280").val(codeSelectedNBS_LAB280);
								 autocompTxtValuesForJSP();
								 
								 if(parentDoc!=document)//It is coming from the Search popup
									 self.close();
								
								 
							 }
							 
						 }
						 
					//	 if(parentDoc!=document)//It is coming from the Search popup
						//	 self.close();
					  });
				  }
				  
				  DWREngine.setAsync(true);
			  }
			
				

		function isOrganism(parent, testNameSearchButton){

			  var parentDoc;
			  var orgYesOrNo = false;
			  
			  if(parent==null|| parent==undefined)
				  parentDoc= document;
			  else
				  parentDoc = parent;
			  
			  var programAreaCode = getElementByIdOrByNameNode("INV108",parentDoc).value;
			  var labUid=-1;
			  var key = getCurrentKey();

			  if(key!=null && key!="" && key.indexOf("_MODE")!=-1)
				  key=key.substring(0,key.indexOf("_MODE"));
			  if(getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=null &&
				getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=undefined)
				 
				  labUid = getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc).value;//Reporting Facility Code
				
			  var testName="";
			  //if(getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=null &&
				//  getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=undefined)
				  //testName=getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc).value;
			  
			  if(testNameSearchButton == null || testNameSearchButton == "" || testNameSearchButton == undefined){//it is coming from dropdown
				  testName =getElementByIdOrByNameNode("NBS_LAB220",parentDoc).value;
				 
			  }else
				  testName=testNameSearchButton;//From Search button
			  
			  if(parentDoc!=document)
				  JPageForm = JBaseForm;
			  
			  if(labUid!=null){
				  if(labUid!=-1 && labUid.indexOf("|")!=-1)
					  labUid = labUid.substring(0,labUid.indexOf("|"));
			
			
				
				  JPageForm.showHideOrganism(programAreaCode,labUid,testName, key, function(data) {
					  //alert(data);
					 if(data){
						 orgYesOrNo=true;
						 return true;
					 }
					 else{
						 orgYesOrNo=false;
						 return false;
					 }
					 
				
				  });
			  }
			  
			  
			 
		  }
		
		
		
		/**
		 * showHideOrganismFromEditIcon: same than showHideOrganism but called from Edit icon from the batch table
		 * in order to make sure if it is a non organism, dont call the hideOrganism because it will delete the value
		 * @param parent
		 * @param testNameSearchButton
		 */
		function showHideOrganismFromViewEditIcon(parent, testNameSearchButton,mode, id){

			  var parentDoc;
			  var organismIdentifier = "NBS_LAB280";
			  
			  if(parent==null|| parent==undefined)
				  parentDoc= document;
			  else
				  parentDoc = parent;
			  
			  var programAreaCode = getElementByIdOrByNameNode("INV108",parentDoc).value;
			  var labUid=-1;
			  var key = getCurrentKey();

			  if(key!=null && key!="" && key.indexOf("_MODE")!=-1)
				  key=key.substring(0,key.indexOf("_MODE"));
			  if(getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=null &&
				getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=undefined)
				 
				  labUid = getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc).value;//Reporting Facility Code
				
			  var testName="";
			  //if(getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=null &&
				//  getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=undefined)
				  //testName=getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc).value;
			  
			  if(testNameSearchButton == null || testNameSearchButton == "" || testNameSearchButton == undefined){//it is coming from dropdown
				  testName =getElementByIdOrByNameNode("NBS_LAB220",parentDoc).value;
				 
			  }else
				  testName=testNameSearchButton;//From Search button
			  
			  if(parentDoc!=document)
				  JPageForm = JBaseForm;
			  
			  if(labUid!=null){
				  if(labUid!=-1 && labUid.indexOf("|")!=-1)
					  labUid = labUid.substring(0,labUid.indexOf("|"));
			
			
				
				  JPageForm.showHideOrganismByID(programAreaCode,labUid,testName, id, function(data) {
					 if(data){
						 showOrganism(parentDoc); 
					 }
					 else{
					//	 hideOrganism(parentDoc);
						 
						 $j("#"+organismIdentifier+"Search").hide();
						 $j("#"+organismIdentifier+"ClearButton").hide();
						 
					 }
					 
					 if(mode=="view"){
						 $j("#"+organismIdentifier+"Search").hide();
						 $j("#"+organismIdentifier+"ClearButton").hide();
					 }
					 if(mode=="edit"){
						 $j("#"+organismIdentifier+"Search").hide();
						// $j("#"+organismIdentifier+"ClearButton").hide();
					 }
					
						 
					 
					 
					 if(parentDoc!=document)//It is coming from the Search popup
						 self.close();
				  });
			  }
		  }
		
		
	var isOrganismPrevious;
	var isOrganismCurrent;
//	var previousResultedTest;
//	var currentResultedTest;

		function showOrganism(parentDoc){
			
			var organismIdentifier = "NBS_LAB280";
			if(parentDoc==null || parentDoc == undefined)
				parentDoc = document;
			
			$j("#"+organismIdentifier+"L", parentDoc).parents("tr")[0].show();//Show the Organism row
			//Required when shown
			 $j("#"+organismIdentifier+"L", parentDoc).addClass("requiredInputFieldRESULTED_TEST_CONTAINER");
			 if($j("#"+organismIdentifier+"L", parentDoc).parent().children().length==1)//if it doesn't have the *
			 $j("#"+organismIdentifier+"L", parentDoc).parent().prepend("<span style='color:#CC0000'>*</span>");//add *
			 
			 

			 
			// Coded Result should be hidden for Organism Resulted Test. For example, if the user selects ‘AMOEBA IDENTIFIED.’
		//	hideCodedResult(parentDoc);
			 //SHOW THE SEARCH CLEAR BUTTONS???????????
			populateOrganismData(parentDoc);
		
			// For Organism Resulted Test, unhide Susceptibility and Track Isolate action button
			showSusceptibilityIsolateButtons(parentDoc);
			
			 //Show Search clear buttons
			 
			 $j("#"+organismIdentifier+"Search", parentDoc).show();
			 $j("#"+organismIdentifier+"ClearButton", parentDoc).show();
			 
			 
			 parentDoc.isOrganismPrevious=isOrganismCurrent;
			 parentDoc.isOrganismCurrent = true;
			
		
			getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc).value="";
			
			
		}


	/**
	 * valueInDropdown: returns true if the value exists in the dropdown list
	 */
	function valueInDropdown(questionIdentifier, value, parentDoc)
	{
	var exists = false;

	for(var i = 0, opts = getElementByIdOrByNameNode(questionIdentifier, parentDoc).options; i < opts.length; ++i){

	   if( opts[i].text === value )
	   {
	      exists = true; 
	      break;
	   }
	}

	return exists;

	}
	
	
	
	function hideOrganism(parentDoc){
		//alert(getElementByIdOrByNameNode("NBS_LAB280_textbox",parentDoc).value);
	//	var valueCodedResult = getElementByIdOrByNameNode("NBS_LAB280_textbox",parentDoc).value;
		var organismIdentifier = "NBS_LAB280";
		if(parentDoc==null || parentDoc == undefined)
			parentDoc = document;
		
		
		//$j("#"+organismIdentifier+"L", parentDoc).parents("tr")[0].hide();//Hide the Organism row
		 
		//Clear the value from the dropdown
		 $j("#"+organismIdentifier, parentDoc).val("");
		 if(getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=null && getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=undefined)
			 getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc).value="";

		 
		//Clear the value from the Search button if we are on edit/add mode
		 if(getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=null && getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=undefined)
			 clearSingleSelectWithSearchButton(organismIdentifier, parentDoc);	
		 
		 //Not required when hidden

		 $j("#"+organismIdentifier+"L", parentDoc).removeClass("requiredInputFieldRESULTED_TEST_CONTAINER");
		 getElementByIdOrByNameNode(organismIdentifier+"L", parentDoc).setAttribute("style","");//remove red color
		 if($j("#"+organismIdentifier+"L", parentDoc).parent().children().length>1)//if already has the *
			 $j("#"+organismIdentifier+"L", parentDoc).parent().children()[0].remove();//remove *
		 
		// Coded Result should be hidden for Organism Resulted Test. For example, if the user selects ‘AMOEBA IDENTIFIED'.
		// And shown for non Organism Resulted Test.
		
		 
		 //showCodedResult(parentDoc);
		 
		 
		 populateCodedResultData(parentDoc);
		// For Non Organism Resulted Test, hide Susceptibility and Track Isolate action button
		 hideSusceptibilityIsolateButtons(parentDoc);
		 
		 //Hide Search clear buttons
		 
		 $j("#"+organismIdentifier+"Search",parentDoc).hide();
		 $j("#"+organismIdentifier+"ClearButton", parentDoc).hide();
		 
		 
		 parentDoc.isOrganismPrevious=isOrganismCurrent;
		 parentDoc.isOrganismCurrent = false;		
		
		
	//	getElementByIdOrByNameNode("NBS_LAB280_textbox",parentDoc).value=valueCodedResult;
			
		 
		 //Delete values from subforms
		 //deleteSubFormValues(parentDoc);
		
		
		
	}
	

	/*

	function hideOrganism(parentDoc){
		//alert(getElementByIdOrByNameNode("NBS_LAB280_textbox",parentDoc).value);
	//	var valueCodedResult = getElementByIdOrByNameNode("NBS_LAB280_textbox",parentDoc).value;
		var organismIdentifier = "NBS_LAB280";
		if(parentDoc==null || parentDoc == 'undefined')
			parentDoc = document;
		
		
		//$j("#"+organismIdentifier+"L", parentDoc).parents("tr")[0].hide();//Hide the Organism row
		 
		//Clear the value from the dropdown
		 $j("#"+organismIdentifier, parentDoc).val("");
		 if(getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=null && getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=undefined)
			 getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc).value="";

		 
		//Clear the value from the Search button if we are on edit/add mode
		 if(getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=null && getElementByIdOrByNameNode(organismIdentifier+"_textbox", parentDoc)!=undefined)
			 clearSingleSelectWithSearchButton(organismIdentifier, parentDoc);	
		 
		 //Not required when hidden

		 $j("#"+organismIdentifier+"L", parentDoc).removeClass("requiredInputFieldRESULTED_TEST_CONTAINER");
		 getElementByIdOrByNameNode(organismIdentifier+"L", parentDoc).setAttribute("style","");//remove red color
		 if($j("#"+organismIdentifier+"L", parentDoc).parent().children().length>1)//if already has the *
			 $j("#"+organismIdentifier+"L", parentDoc).parent().children()[0].remove();//remove *
		 
		// Coded Result should be hidden for Organism Resulted Test. For example, if the user selects �AMOEBA IDENTIFIED'.
		// And shown for non Organism Resulted Test.
		
		 
		 //showCodedResult(parentDoc);
		 
		 
		 populateCodedResultData();
		// For Non Organism Resulted Test, hide Susceptibility and Track Isolate action button
		 hideSusceptibilityIsolateButtons(parentDoc);
		 
		 //Hide Search clear buttons
		 
		 $j("#"+organismIdentifier+"Search").hide();
		 $j("#"+organismIdentifier+"ClearButton").hide();
		 
		 
		isOrganismPrevious=isOrganismCurrent;
		isOrganismCurrent = false;		
		
		
	//	getElementByIdOrByNameNode("NBS_LAB280_textbox",parentDoc).value=valueCodedResult;
		
	}*/
	
	function hideSusceptibilityIsolateButtons(parentDoc){
		$j("#NBS_LAB222L", parentDoc).parents("tr")[0].hide();
		$j("#NBS_LAB329L", parentDoc).parents("tr")[0].hide();
		
	}
	
	function showSusceptibilityIsolateButtons(parentDoc){	
		$j("#NBS_LAB222L", parentDoc).parents("tr")[0].show();
		$j("#NBS_LAB329L", parentDoc).parents("tr")[0].show();
		
	}
	
	function emptyResultedTestBatchEntry(){
		
		var isEmpty = false;
		
		if(getElementByIdOrByName("nopatternRESULTED_TEST_CONTAINER")!=null &&
				getElementByIdOrByName("nopatternRESULTED_TEST_CONTAINER")!= undefined &&
				getElementByIdOrByName("nopatternRESULTED_TEST_CONTAINER").getAttribute("style").indexOf("display: none")==-1)
			isEmpty = true;
		
		
		return isEmpty;
	}
	/**
	 * clearDropdown: removes all the options from the specific dropdown id
	 */
	function clearDropdown (id, parentDoc){
	
		if($j(getElementByIdOrByNameNode(id, parentDoc))!=null && $j(getElementByIdOrByNameNode(id, parentDoc))!='undefined'){
			$j(getElementByIdOrByNameNode(id, parentDoc)).empty();
			
			getElementByIdOrByNameNode("NBS_LAB112_textbox", parentDoc).value="";//clear the value selected
			
		}
	}
	
	/**
	 * setOrganismShowHideToEventOnChange: this method is called from onload to set the onClick event with the method that shows/hides the organism
	 */
	function setOrganismShowHideToEventOnClick(){
			
		var resultedTestSection = getResultedTestSectionName(document);
		
		if( getElementByIdOrByName(resultedTestSection)!=null &&  getElementByIdOrByName(resultedTestSection)!=undefined){
			var viewIcons = getElementByIdOrByName(resultedTestSection).getElementsByClassName("cursorHand");
			var viewIconsCount = viewIcons.length;
			
		
		for(var i=0; i<viewIconsCount; i++){
			if(viewIcons[i].getAttribute("id")!=null && viewIcons[i].getAttribute("id").indexOf("delete")!=0){//adding it only to view and edit, not delete
				var methods = viewIcons[i].getAttribute("onClick");
				if(methods.indexOf("return")!=-1){
					
					var methodsFirst = methods.substring(0,methods.indexOf("return"));
					var methodsSecond = methods.substring(methods.indexOf("return"));
					if(viewIcons[i].id.indexOf("view")!=-1)
						viewIcons[i].setAttribute("onClick","clearSingleSelectWithSearchButton('NBS_LAB220');"+methodsFirst+"showHideOrganismFromViewEditIcon(document,'','view',this.id);"+methodsSecond);
					else
						viewIcons[i].setAttribute("onClick","clearSingleSelectWithSearchButton('NBS_LAB220');"+methodsFirst+methodsSecond);
					
					
				}
				else{
					if(viewIcons[i].id.indexOf("view")!=-1)
						viewIcons[i].setAttribute("onClick","clearSingleSelectWithSearchButton('NBS_LAB220');"+methods+";showHideOrganismFromViewEditIcon(document,'','view', this.id);");
					else
						viewIcons[i].setAttribute("onClick","clearSingleSelectWithSearchButton('NBS_LAB220');"+methods);
					
				}
				
				}
		}	
		}
	}
	
	
	
	/**
	 * getAttributeMapFromScreen: returns an attribute map with the values from the screen corresponding to the question identifier received as a parameter
	 * @param qIdentifier
	 * @param attrMap
	 * @param idSection
	 * @returns {___anonymous129053_129059}
	 */
	function getAttributeMapFromScreen(qIdentifier, attrMap, idSection)
	{
		if(qIdentifier == "NBS459"){
			
			if(document.getElementById("NBS459")!=null && document.getElementById("NBS459")!=undefined){ 
				var key = getKey(idSection);
				attrMap["NBS459"]=key;//currentKey
			}
			
		}else{
	
		var isDropdown = "false";
	
		var resultedTestDropdown = document.getElementsByName(qIdentifier+"_textbox")[0];
		if(resultedTestDropdown!=null && resultedTestDropdown!=undefined){
			var styleDropdown = resultedTestDropdown.parentElement.getAttribute("style");
			if (styleDropdown.indexOf("display: none")==-1)
				isDropdown ="true";
			
		}
		
		
		if(isDropdown=="true")//the resulted test was selected from the dropdown, not the search button
		{
			var resultedTestCodeValue = document.getElementById(qIdentifier).value;
			var resultedTestNameValue = document.getElementsByName(qIdentifier+"_textbox")[0].value
			attrMap[qIdentifier+'_Code'] = resultedTestCodeValue;
			attrMap[qIdentifier+'_Name'] = resultedTestNameValue;
			
		}
			
		else{	
			
			 var resultedTestCode = getElementByIdOrByName(qIdentifier+'CodeId');
			 var resultedTestName = getElementByIdOrByName(qIdentifier+'DescriptionId');
			 if (resultedTestCode != null && resultedTestCode.value != "") {
				var resultedTestCodeValue = resultedTestCode.value;
				attrMap[qIdentifier+'_Code'] = resultedTestCodeValue;
				
				var resultedTestNameValue ="";
			
				if(resultedTestName!=null && resultedTestName.value!="")
					resultedTestNameValue=resultedTestName.value.replace("("+resultedTestCodeValue+")","");
				else
					resultedTestNameValue= resultedTestName.value;
			
				attrMap[qIdentifier+'_Name'] = resultedTestNameValue;
				
			}
	
		}
	}
		
		return attrMap;
	
}
	
	
	
	/**
	 * setQuestionInAnswerMap: set questions of type 1031 like Ordered test (NBS_LAB112) in the answerMap.
	 * This is handled in a different way than the elements of type 1031 that are in a batch entry, like
	 * Resulted Test. They are already handled on the batch entry map.
	 * @param qIdentifier
	 */
	function setQuestionInAnswerMap(qIdentifier){

		var code ="";
		var value = "";

		var map = "";
		var isDropdown = "false";
		
		if(document.getElementsByName(qIdentifier+"_textbox")!=null && document.getElementsByName(qIdentifier+"_textbox")!=undefined){
			
			var questionDropdown = document.getElementsByName(qIdentifier+"_textbox")[0];
			if(questionDropdown!=null && questionDropdown!=undefined){
				var styleDropdown = questionDropdown.parentElement.getAttribute("style");
				if (styleDropdown.indexOf("display: none")==-1)
					isDropdown ="true";
				
			}
	
			if(isDropdown=="true")//the value was selected from the dropdown, not the search button
			{
				var questionCodeValue = document.getElementById(qIdentifier).value;
				var questionNameValue = document.getElementsByName(qIdentifier+"_textbox")[0].value
	
				
				map=qIdentifier+'CodeId'+"$A$"+questionCodeValue+"NEXTCODE"+
				qIdentifier+'Description'+"$A$"+questionNameValue+"NEXTCODE"+
				qIdentifier+"$A$"+questionCodeValue+"$$"+questionNameValue+"NEXTCODE"+
				qIdentifier+'DescriptionId'+"$A$"+questionNameValue+"("+questionCodeValue+")";
	
			}
				
			else{	
				
				 var questionCodeElement = getElementByIdOrByName(qIdentifier+'CodeId');
				 var questionValueElement = getElementByIdOrByName(qIdentifier+'DescriptionId');
				 var questionDescriptionElement = getElementByIdOrByName(qIdentifier+'Description');
				 
				 if ((questionCodeElement != null && questionCodeElement.value != "")
			|| (questionCodeElement.textContent!=null && questionCodeElement!="")) {
					 code = questionCodeElement.value;
				
					 if(code=="")
						 code = questionCodeElement.textContent;
					 
					 
					 if(questionValueElement!=null && questionValueElement.value!="")
						 value = questionValueElement.value;
					 else
						value=questionValueElement.textContent;

					value=value.replace("("+code+")","");
			
		
		
						
					map=qIdentifier+'CodeId'+"$A$"+code+"NEXTCODE"+
					qIdentifier+'Description'+"$A$"+value+"NEXTCODE"+	
					qIdentifier+"$A$"+code+"$$"+value+"NEXTCODE"+
					qIdentifier+'DescriptionId'+"$A$"+value+"("+code+")";
				
				
				 }
			
			}
		}
		return map;
	}
	
	/**
	 * selectTabLab: called from Lab Report in PBP. Default to Patient Tab from Data Entry; Default to Lab Repot Tab from All Other Paths
	 */
	function selectTabLab(tabtoFocus)
	{	
		//Default to Patient Tab from Data Entry; Default to Lab Repot Tab from All Other Pathsa
		 if(tabtoFocus == 'Patient'){
          	data = '0';                 
      	 }else{
      		 if(pageTabCount()>0)
      			 data = '1';  
      		 else
      			 data = '0';
	     }
				 
		 JBaseForm.setTabId(data, function() {
		 
			selectTab(0,2,data,'ongletTextEna','ongletTextDis','ongletTextErr',null,null);
		 });
		    
	}
	
	/**
	 * checkOnlyOneNumericOrCodedResultFromSusceptibility: returns true if there's none or only 1 numeric/coded result selected
	 * @returns {Boolean}
	 */
	
	function checkOnlyOneNumericOrCodedResultFromSusceptibility(){
		
		var onlyOne = true;
		
		var numeric = $j("#NBS369");
		var codedResult = $j("#NBS367");
		
		
		if(numeric!=null && numeric!=undefined && codedResult!=null && codedResult!=undefined)
			if(numeric.val()!=null && numeric.val()!="" && codedResult.val()!=null && codedResult.val()!="")
				onlyOne = false;
		
		
		return onlyOne;
	}
	/**
	 * checkAtLeastOneValueEnteredResultedTest: returns true if there's at least one value netered for Resulted Test
	 * @returns {Boolean}
	 */
	function checkAtLeastOneValueEnteredResultedTest(){
		
		var atLeastOneValue = false;
		var organismIdentifier = "NBS_LAB280";
		//Organism name
		if(hasAValue($j("#"+organismIdentifier)))//From dropdown
			atLeastOneValue = true;
		if(hasAValue($j("#"+organismIdentifier+"CodeId")))//From search button
			atLeastOneValue = true;		
		//Numeric Result
		if(hasAValue($j("#NBS_LAB364")))
			atLeastOneValue = true;	
		//Text Result
		if(hasAValue($j("#NBS_LAB208")))
			atLeastOneValue = true;	
			
		return atLeastOneValue;
	}
	
	function hasAValue(elem){
		
		var hasValue=false;
		
		if(elem!=null && elem !=undefined && elem.val()!="" && elem.val()!=null && elem.val()!=undefined)
			hasValue=true;
	
		return hasValue;
	}
	
	function hideSameAsReportingFacilityCheckBoxOnLoad(){
		var actionMode =getElementByIdOrByName("actionMode");
		if(actionMode!=null && actionMode.value == 'Edit'){
			$j("#NBS_LAB267L").parents("tr")[0].hide();
		}
		if(actionMode!=null && actionMode.value == 'View'){
			$j("#NBS_LAB267L").parents("tr")[0].hide();
		}
	}
	
	
	function addMethodToOnchangeNumericLabReportOnLoad(questionIdentifier){
        if(document.getElementById(questionIdentifier)!=null && document.getElementById(questionIdentifier)!=undefined){
			var onkeyupCurrent = document.getElementById(questionIdentifier).getAttribute("onkeyup");
			
			if(onkeyupCurrent==null || onkeyupCurrent==undefined)
				onkeyupCurrent="";
			var functionkeyup = 
			document.getElementById(questionIdentifier).setAttribute("onkeyup",onkeyupCurrent+";"+"enableOrDisableNumericResult('"+questionIdentifier+"')");
		}
	}
	
	/**
	 * enableOrDisableNumericResult: If a user enters any data in Numeric result then selecting a value from the Unit question is required
	 */
	function enableOrDisableNumericResult(questionIdentifier){
		var value = "";
		
		if($j("#"+questionIdentifier)!=null && $j("#"+questionIdentifier)!=undefined)
			value = $j("#"+questionIdentifier).val();
		if(value!="" && value!=null && value !=undefined){
			enableUnits('LAB115');
			enableUnits('NBS372');
		}
			
		else{
			disableUnits('LAB115');
			disableUnits('NBS372');
		}
			

	}
	
	function enableUnits(questionIdentifier){


		var units = getElementByIdOrByName(questionIdentifier+"_textbox");
		var units2 = getElementByIdOrByName(questionIdentifier);
	//	var unitsLabel = getElementByIdOrByName("LAB115L");
		var valueDisabled = false
			if(	getElementByIdOrByName("NBS_LAB364") !=null  && getElementByIdOrByName("NBS_LAB364") !=undefined)
				valueDisabled=getElementByIdOrByName("NBS_LAB364").disabled;
			else if(getElementByIdOrByName("NBS369") !=null  && getElementByIdOrByName("NBS369") !=undefined)
				valueDisabled=getElementByIdOrByName("NBS369").disabled;
		
		if(units !=null && units !=undefined && valueDisabled==false){
			//Enable Units
			
			units.disabled=false;
			units2.disabled=false;
	//		unitsLabel.disabled=false;
			
			//Required Units
			// $j("#LAB115L", document).addClass("requiredInputFieldRESULTED_TEST_CONTAINER");
			// if($j("#LAB115L", document).parent().children().length==1)//if it doesn't have the *
			// $j("#LAB115L", document).parent().prepend("<span style='color:#CC0000'>*</span>");//add *
		}
		 
	}
	
	function disableUnits(questionIdentifier){

		var units = getElementByIdOrByName(questionIdentifier+"_textbox");
		var units2 = getElementByIdOrByName(questionIdentifier);
		
			if(units !=null && units !=undefined){
					units.disabled=true;
					units2.disabled=true;
				
				//Not required
			//	$j("#LAB115L", document).removeClass("requiredInputFieldRESULTED_TEST_CONTAINER");
			//	getElementByIdOrByNameNode("LAB115L", document).setAttribute("style","");//remove red color
			//	if($j("#LAB115L", document).parent().children().length>1)//if already has the *
			//	 $j("#LAB115L", document).parent().children()[0].remove();//remove *
				
				
				getElementByIdOrByName(questionIdentifier+"_textbox").value="";
				$j("#"+questionIdentifier).val("")
				
			}
	}
	
	/**
	*deleteResultedTestRepeatingBlock: delete all the rows from the Resulted Test Repeating block and the susceptibility and isolate subforms
	*/

	function deleteResultedTestRepeatingBlock(parentDoc){
		
		//ND-25420: I had to add this as part of this user story because RESULTED_TEST_CONTAINER was null.
		if(getElementByIdOrByNameNode("RESULTED_TEST_CONTAINER", parentDoc)!=null && getElementByIdOrByNameNode("RESULTED_TEST_CONTAINER", parentDoc)!=undefined){ 
			var deleteIcons = getElementByIdOrByNameNode("RESULTED_TEST_CONTAINER", parentDoc).getElementsByClassName("cursorHand");
			var viewIconsCount = deleteIcons.length;
			var methods="";
			
			for(var i=0; i<viewIconsCount; i++){
				if(deleteIcons[i].getAttribute("id")!=null && deleteIcons[i].getAttribute("id").indexOf("delete")==0){//adding it only to view and edit, not delete
					var method = deleteIcons[i].getAttribute("onClick");
					var id = deleteIcons[i].getAttribute("id");

					if(id!="deleteRESULTED_TEST_CONTAINER"){
						if(method.indexOf("return")!=-1){
							method = method.substring(0,method.indexOf("return"));
						}
						method=method.replace("this.id","'"+id+"'").replace(")",",'true')");//true added at the end in order to not show the confirmation message
						methods=(method)+";"+methods;
					}
				}
			}	
		eval(methods);
		
		}
	}

	/**
	 * validateNumericResult: validate if the Numeric Result Value in Resulted Test Batch entry in Lab reports in PBP has the following format:
	 * Comparator ^ Numeric Value 1 ^ Separator ^ Numeric Value 2
	 * meaning:
	 * (<, <=, <>, =,>, >=) ^ Numeric Value 1 ^ (+,-,.,/,:) ^ Numeric Value 2
	 * @returns {Boolean}
	 */
	function validateNumericResult(questionIdentifer){

		var valid = true;
		var numericValue = $j.trim($j("#"+questionIdentifer).val());
		var errorText = "";
		var regExpression = "^([<>=]|[<][=]|[>][=]|[<][>])?(((((\\d){0,10})|((\\d){1,10})([\\.]{1})((\\d){1,5}))?)|(((((\\d){1,10})([\\.]{1})((\\d){1,5})[+])|(((\\d){1,10})[+]))|((((\\d){1,10})|(((\\d){1,10})([\\.]{1})((\\d){1,5})))[-:+/\\/](((\\d){1,10})|(((\\d){1,10})([\\.]{1})((\\d){1,5})))))?)?$";
			var pattern = new RegExp(regExpression);
			
			
			if(pattern.exec(numericValue) == null){
				valid=false;
			
			}
			
			return valid;
		}


	
	function clearValueFromTextBox(id, parentDoc){
		
		if(parentDoc==null || parentDoc == undefined)
			parentDoc = document;
		
		$j("#"+id, parentDoc).val("");
	}

	function clearValueFromSelect(id, parentDoc){

		
		if(parentDoc==null || parentDoc == undefined)
			parentDoc = document;
		
		$j("#"+id, parentDoc).val("");
		getElementByIdOrByNameNode(id+"_textbox", parentDoc).value="";

	}

	//Called from onchange of Resulted Test
/*
	function storePreviousValue(){

		previousResultedTest = currentResultedTest;
		
		currentResultedTest = $j("#NBS_LAB220").val();//check if it is coming from Search button
	}*/

	/*function deleteDataWhenResultedTestChanges(){

	//Check if the previous one is an organism resulted test:
	var previosValue = previousResultedTest;
	var actualValue = currentResultedTest;
	var isOrgPrev=isOrganismPrevious;//from show/hide organism
	var isOrgCurrent = isOrganismCurrent;//from show/hide organism


	//From Organism Resulted test
	if(isOrgPrev==true){

				//Check if resulted test is in the batch entry: DWR call to search code in the batch entry

				JPageForm.isResultedTestInBatchEntry(actualValue, function(data){
				
				
				if(data==false){
				
					//if not
						//clear all the fields:

							//Organism name:
							clearValueFromSelect("NBS_LAB280")
							
							//Numeric result:
							clearValueFromTextBox("NBS_LAB364");
							
							//Units
							clearValueFromSelect("LAB115");
							
							//Text Result:
							clearValueFromTextBox("NBS_LAB208");
							
							//Reference Range From: 	
							clearValueFromTextBox("NBS_LAB119");
							
							//Reference Range To: 	
							clearValueFromTextBox("NBS_LAB120");
							
							//Status:
							clearValueFromSelect("NBS_LAB207");
							
							//Result Comments: 	
							clearValueFromTextBox("NBS_LAB104");
							
							//Susceptibilities and Track Isolate subforms
							var currentKey = getCurrentKey();
							if(currentKey!=null && currentKey!=undefined){
								if(currentKey.indexOf("_MODE_")!=-1)
									currentKey = currentKey.substring(0, currentKey.indexOf("_MODE_"));
							
								JPageForm.deleteSubFormFromSession(currentKey);
							}
							
						}else{//if yes, 

								//if changed to an organism
								//Do not clear

								//if changed to a non organism
								if(isOrgCurrent==false){
									// clear organism name (automatically??)
									
									
									
									// clear subforms data
										JPageForm.deleteSubFormFromSession(currentKey);
							
							
							
								}
							}
							});
							
							
							
	}
	else
		if(isOrgPrev==false){
		//From NON Organism Resulted test


	}
	}*/

	
	function deleteSubFormValues(parentDoc){
		//alert(parentDoc);
		if(parentDoc==null || parentDoc == undefined)
			parentDoc = document;
		//Susceptibilities and Track Isolate subforms
		var currentKey = getCurrentKey(parentDoc);
		if(currentKey!=null && currentKey!=undefined){
			if(currentKey.indexOf("_MODE_")!=-1)
				currentKey = currentKey.substring(0, currentKey.indexOf("_MODE_"));
		
			JPageForm.deleteSubFormFromSession(currentKey);
		}
		
		
	}
	
	function deleteSubFormForUpdate(parentDoc, testCode){
    	
    	var programAreaCode = getElementByIdOrByNameNode("INV108",parentDoc).value;
    	var labUid=-1;
    	if(getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=null &&
				getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=undefined)
				 
				  labUid = getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc).value;//Reporting Facility Code
    	
		  JPageForm.showHideOrganismByTestCode(programAreaCode,labUid,testCode, function(data) {
				 if(!data){
					 deleteSubFormValues(parentDoc);
				 }
			  });
    	
    	
    	
    }
	

	/**
	 * getResultedTestSectionName: it returns the name of the resulted test section depending on the page (lab report = NBS_UI_RESULTED_TEST_CONTAINER, morb report = NBS_UI_GA95004)
	 * */
	function getResultedTestSectionName(parentDoc){
		
		var resultedTestSection = "NBS_UI_RESULTED_TEST_CONTAINER";
		
		if(getElementByIdOrByNameNode(resultedTestSection, parentDoc)== null || getElementByIdOrByNameNode(resultedTestSection, parentDoc)== undefined){
			resultedTestSection = "RESULTED_TEST_CONTAINER";//This is in order to apply changes for ND-17070 when NBS_UI scripts have not been applied to 6.0.4
			if(getElementByIdOrByNameNode(resultedTestSection, parentDoc)== null || getElementByIdOrByNameNode(resultedTestSection, parentDoc)== undefined)
				resultedTestSection="NBS_UI_29";
		}
		
		return resultedTestSection;
	}
		
	
	

	

	
	/**
	 * getReportingFacilityUid: if the page is a Lab Report, the reporting facility question identifier is NBS_LAB365, if it is a morbidity report, the reporting facility quesiton identifier is INV183
	 */
	function getReportingFacilityUid(parentDoc){
		var labUid = -1;
		//If lab report
		 if(getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=null && getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=undefined)
				labUid = getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc).value;//Reporting Facility Code
		//If morb report
		if(getElementByIdOrByNameNode("attributeMap.NBS517Uid",parentDoc)!=null && getElementByIdOrByNameNode("attributeMap.NBS517Uid",parentDoc)!=undefined)
				labUid = getElementByIdOrByNameNode("attributeMap.NBS517Uid",parentDoc).value;//Reporting Facility Code 		  
		
		return labUid;
	}
	
	
	/**
	 * getProgramArea: depending on if we are getting the value in a Lab or Morb page, the value is read from a single select or read only respectively.
	 */
	function getProgramArea(parentDoc){
		
		var programAreaCode = "";
		
		if(getElementByIdOrByNameNode("INV108",parentDoc)!=null && getElementByIdOrByNameNode("INV108",parentDoc)!=undefined)
			  programAreaCode = getElementByIdOrByNameNode("INV108",parentDoc).value;

		  if(programAreaCode=="")//Morbidity report gets the value from a read-only field
			  programAreaCode = getElementByIdOrByNameNode("pageClientVO.answer(INV108)",parentDoc).value;
		  
	//	  if(programAreaCode=="")
		//	  programAreaCode="STD";//TODO:Fatima, to delete. This is just temportal while there's no PA value from Morb
		  return programAreaCode;
	}
	
	
	function getPositionRowKey(key){
		var resultedTestSection = getResultedTestSectionName(document);
		var indexRow = "-1";
		if(getElementByIdOrByName("questionbody"+resultedTestSection)!=null && getElementByIdOrByName("questionbody"+resultedTestSection)!=undefined){
			var rows = (getElementByIdOrByName("questionbody"+resultedTestSection)).children;
	
			
				
				for(var i = 0; i<rows.length && indexRow=="-1" ;i++){
	
					var row = rows[i];
					var rowIndex = $j("#"+row.id).find('input[name~="rowKey"]')[0].value;
					if(rowIndex==key){
						indexRow=i+1;
					}
	
						
	
					}
		}
		
		return indexRow;
	}
	

	function isOrganism(parent, testNameSearchButton){

		  var parentDoc;
		  var orgYesOrNo = false;
		  
		  if(parent==null|| parent==undefined)
			  parentDoc= document;
		  else
			  parentDoc = parent;
		  
		  var programAreaCode = getProgramArea(parentDoc);
		  var labUid=-1;
		  var key = getCurrentKey();

		  if(key!=null && key!="" && key.indexOf("_MODE")!=-1)
			  key=key.substring(0,key.indexOf("_MODE"));
		  
		 /* if(getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=null &&
			getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc)!=undefined)
			 
			  labUid = getElementByIdOrByNameNode("attributeMap.NBS_LAB365Uid",parentDoc).value;//Reporting Facility Code
			*/
		  
		  labUid = getReportingFacilityUid(parentDoc);
		  var testName="";
		  //if(getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=null &&
			//  getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc)!=undefined)
			  //testName=getElementByIdOrByNameNode("NBS_LAB220CodeId",parentDoc).value;
		  
		  if(testNameSearchButton == null || testNameSearchButton == "" || testNameSearchButton == undefined){//it is coming from dropdown
			  testName =getElementByIdOrByNameNode("NBS_LAB220",parentDoc).value;
			 
		  }else
			  testName=testNameSearchButton;//From Search button
		  
		  if(parentDoc!=document)
			  JPageForm = JBaseForm;
		  
		  if(labUid!=null){
			  if(labUid!=-1 && labUid.indexOf("|")!=-1)
				  labUid = labUid.substring(0,labUid.indexOf("|"));
		
		
			 var rowKey =  getPositionRowKey(key);
			  JPageForm.showHideOrganism(programAreaCode,labUid,testName, key, rowKey, function(data) {
				  //alert(data);
				 if(data){
					 orgYesOrNo=true;
					 return true;
				 }
				 else{
					 orgYesOrNo=false;
					 return false;
				 }
				 
			
			  });
		  }
		  
		  
		 
	  }
	
	//ND-25420 //ND-23348
	 function selfCloseSpecialChrome(){
		  
		  
		  var browser = browserAndVersionDetection();
			 
			/* if(browser!=null && browser.indexOf("Chrome")!=-1)//is chrome
			 	setTimeout(function(){ self.close(); }, 1000);
			 else*/
				 self.close();
			 
			 
	  }
	 

	/*
	 * blockUiWhileClear: shows a message while the repeating block is being cleared after clicking Clear button.
	 * */
	 function blockUiWhileClear()
	    		{

				var clearWaitMessage ="Clearing the repeating block data..";

								var saveMsg = '<div class="submissionStatusMsg"> <div class="header"> Clearing data </div>' +  
									'<div class="body"> <img src="saving_data.gif" alt="Saving data" title="Saving data"/> The batch entry is being cleared. Please wait ... </div> </div>';         
								



				$j.blockUI({  
									message: saveMsg ,
									css: {  
										top:  ($j(window).height() - 500) /2 + 'px', 
										left: ($j(window).width() - 500) /2 + 'px', 
										width: '500px'
									}  
								});
	}


	

	 function OpenSusceptibilitiesTB(id) {

	    		

	     	var block = getElementByIdOrByName("blockparent");

	     	if(block!=null && block!=undefined)

	     		block.style.display = "block";

	     	else{

	     		  var divElt = getElementByIdOrByName("pageview");

	     		  divElt.style.display = "block"; 

	     	}

	     	

	     	var o = new Object();

	     	o.opener = self;

	     	var URL = "";

	     	var w = 750;

	     	var h = 350;

	     	//To center the popup in the middle of the screen:

	     	var left = (screen.width/2)-(w/2);

	     	var top = (screen.height/2)-(h/2);



	     

	     	  

	     		URL = "/nbs/SusceptibilitiesTB.do?method=susceptibilitiesLoad&ContextAction=loadSusceptibilities&id="+id;

	     
	 	
	 	
	 	
	     	var dialogFeatures =  "dialogWidth: " + w + "px;dialogHeight: " +  h + "px; top: "+top+" px; left: "+left+" px;status: no;unadorned: yes;scroll: no;help: no;" +(true ? "resizable: yes;" : "");

	     	var modWin = openWindow(URL, o,dialogFeatures, block, "");

	 		

	     	

	     	return false;

	   

	 }
	 
	 
	 /*VerCrit methods for new TB page*/
	 
	 
 /*VerCrit methods for new TB page*/
	 
	 /**
	 * disableCaseVerificationAndCaseStatusOnLoad: this method will only execute if the page is the new TB page, with condition code 102201 to disable the fields
	 Case Verification and Case Status
	 */

	 function disableCaseVerificationAndCaseStatusOnLoad(currentTask){

		 var actionMode = getElementByIdOrByName("actionMode") == null ? "" : getElementByIdOrByName("actionMode").value;
		 var conditionCode = $j("#headerConditionCode")[0].textContent;
	
		 if(conditionCode == "102201" && currentTask != "CreateInvestigation11"){//New TB page and not coming from PHDC (ND-27618)
			 
			 if(actionMode=="Edit"){	//Case Verification is editable from Create. Rules to make it editable or not are from Edit
			
				 disableCaseVerificationBasedOnValue();
			 }else
				 if(actionMode=="Create"){	//Case Verification is non editable from Create
						
						pgDisableElementWithoutRemovingValue("INV1115");
				 } 
		 
		 	pgDisableElementWithoutRemovingValue("INV163");//Always disable
		 }
 
	 }
	 
	 
	 
	 /**
	 * disableCaseVerificationAndCaseStatusOnLoad: this method will only execute if the page is the new TB page, with condition code 102201 to disable the fields
	 Case Verification and Case Status
	 */

	 function disableCaseVerificationBasedOnValue(){
		 	var caseVerification = $j("#INV1115")[0].value ;
		 	var reasonStopped = $j("#INV1140")[0].value;
		 	
		 	if((caseVerification == "PHC162" && reasonStopped == "PHC72") || //Not a verified case and equal to Not tb, then it was manually entered
		 		caseVerification == "PHC97"||
		 	   caseVerification == "PHC653"|| caseVerification == "PHC98"||
		 	   caseVerification == "PHC654"){
		 		pgDisableElementWithoutRemovingValue("INV1115");//Always disable
		 		$j("#INV1115_Hidden").removeAttr("disabled");//remove disabled from the hidden field that stores the value when INV1115 is disabled so it can be read from the Java code
		 		
		 	}
		 	
			if(caseVerification == "415684004" ||//Suspect
			   caseVerification == "PHC165" ||//Verified by provider diagnosis
			   caseVerification == "PHC162"){//Not a verified case - User Entered (not calculated)
			
				//Filter out any value differet than the following ones from the dropdown: PHC165, PHC162, 415684004
				filterOutAll("INV1115");
				filterIn("INV1115", "415684004");
				filterIn("INV1115", "PHC165");
				filterIn("INV1115", "PHC162");
			}			
		 }
		
		 
		 

		 /**
		  * setValueHiddenCaseVerification: this is used to set the value selected from Case Verification into the Hidden Case Verification.
		  * This is useful when Case Verification is disabled, so we can read the data from Java from the hidden field.
		  */
		 function setValueHiddenCaseVerification(){
			 
			 var valueCaseVerification = $j("#INV1115").val();
			 
			 if(valueCaseVerification !=null && valueCaseVerification!="")
				 if($j("#INV1115_Hidden")!=null){
					 $j("#INV1115_Hidden").val(valueCaseVerification);
				 } 
		 }
	 
	 
		 


		 /****************************************<FILTERING METHODS>**************************************************/


		 /**
		 * filterOut: filters out (hides) 1 value from the element with that id
		 */


		 function filterOut (id, value){


		 var options = $j("#"+id+" option");

		 if(options!=null && options!=undefined)
		 	for (var i =0; i<options.length; i++){

		 	if(options[i].value==value)
		 		$j(options[i]).attr("hidden","true");


		 	}
		 }

		 /**
		 * filterIn: filters in (shows) 1 value from the element with that id
		 */

		 function filterIn (id, value){


		 var options = $j("#"+id+" option");

		 if(options!=null && options!=undefined)
		 	for (var i =0; i<options.length; i++){

		 	if(options[i].value==value)
		 		$j(options[i]).removeAttr("hidden");
		 	}
		 }


		 /**
		 * filterOutValues: filters out (hides) all the values within the array from the element with that id
		 */

		 function filterOutValues(id, values){

		 if(values!=null && values!=undefined)
		 	for(var i = 0; i<values.length; i++)
		 		filterOut(id, values[i]);
		 }



		 /**
		 * filterInValues: filters in (shows) all the values within the array from the element with that id
		 */

		 function filterInValues(id, values){

		 if(values!=null && values!=undefined)
		 	for(var i = 0; i<values.length; i++)
		 	filterIn(id, values[i]);
		 }

		 
		 /**
		 * filterOutAll: filters out (hides) all the values from the element with that id
		 */
		 
		 function filterOutAll (id){


		 var options = $j("#"+id+" option");

		 if(options!=null && options!=undefined)
		 	for (var i =0; i<options.length; i++){

		 		$j(options[i]).attr("hidden","true");
		 	}
		 }

		 
		 /**
		 * filterInAll: filters in (shows) all the values from the element with that id
		 */
		 
		 function filterInAll (id){


		 var options = $j("#"+id+" option");

		 if(options!=null && options!=undefined)
		 	for (var i =0; i<options.length; i++){

		 		$j(options[i]).removeAttr("hidden");
		 	}
		 }

		 
		 
		 /*
		 setCasesStatusBasedOnCaseVerification: 
		 */

		 function setCasesStatusBasedOnCaseVerification(){

		 	var caseVerificationId = "INV1115";
		 	var caseStatusId = "INV163"
		 	var caseVerificationValue = $j("#"+caseVerificationId).val();
		 	var caseStatusValue = "";
		 	if(caseVerificationValue=="PHC165")//Rule 6: Verified by Provider By Data Entry
		 		caseStatusValue = "C";
		 	else
		 		if(caseVerificationValue=="PHC162")//Rule 7: 0 - Not a Verified Case
		 			caseStatusValue = "N";
		 		else
		 			if(caseVerificationValue=="415684004")//Rule 8: 5 - Suspected
		 				caseStatusValue = "S";
		 		
		 	//Setting the value in Case Status:

		 	$j("#"+caseStatusId).val(caseStatusValue);
		 	autocompTxtValuesForJSP();

		 }
		 
		
		 /****************************************</FILTERING METHODS>**************************************************/
		 
	 
		 
		 /**
		  * detailedRaceBusinessRule: this method will show/hide the detailed race based on the status of the race checkbox (checked or not).
		  * It receives the race checkbox name and the detailed race question id as parameters.
		  */
		 function detailedRaceBusinessRule(raceQuestionId, detailedRaceQuestionId){

				var checked = false;

				if(getElementByIdOrByName(raceQuestionId)!=null && getElementByIdOrByName(raceQuestionId)!=undefined)
					checked = getElementByIdOrByName(raceQuestionId).checked;


				if($j("#"+detailedRaceQuestionId)!=null && $j("#"+detailedRaceQuestionId)!=undefined && $j("#"+detailedRaceQuestionId).parents("tr")[0]!=null && $j("#"+detailedRaceQuestionId).parents("tr")[0]!=undefined){
					var detailedRaceRow = $j("#"+detailedRaceQuestionId).parents("tr")[0];
					
					if(checked)
						detailedRaceRow.show();
					
					else{
						//remove the current selection:
						
						$j("#"+detailedRaceQuestionId).val("");
						$j("#"+detailedRaceQuestionId).change();
						detailedRaceRow.hide();
					}
					}

			}
		 
		 /*
		  * questionIdentifier: it will return true if the parent row is hidden (meaning, the field with that question identifier is hidden)
		  */
		 function isRowHidden(questionIdentifier){
			 
			var hiddenRow = false;

			if(getElementByIdOrByName(questionIdentifier)==null || getElementByIdOrByName(questionIdentifier)==undefined
			|| $j(getElementByIdOrByName(questionIdentifier).closest("tr")).is(":hidden")==true)
				hiddenRow=true;
				
			return hiddenRow;
			 
		 }
		 
		 
		 /**
		  * addBusinessRuleToRaces: this method will be called from the on load of the PB pages in order to assign the on change event to the races. That way, if a race that has
		  * an associated detailed races is checked (or unchecked) the detailed race will be shown (or hidden).
		  */
		           
		 function addBusinessRuleToRaces(){

			 var checkBoxes = ["pageClientVO.whiteRace", "pageClientVO.americanIndianAlskanRace", "pageClientVO.asianRace", "pageClientVO.africanAmericanRace", "pageClientVO.hawaiianRace"];
			 var detailedRaces = ["DEM246", "DEM242", "DEM243", "DEM244", "DEM245"];
	
			 for (var i = 0; i<checkBoxes.length; i++){
	
			 	var raceCheckBox = checkBoxes[i];
			 	var detailedRace = detailedRaces[i];
				
	
			if(isRowHidden(raceCheckBox)==false && isRowHidden(detailedRace)==false){//ND-27842: make sure both, the detailed race and the parent race are not hidden
				
			 	if(getElementByIdOrByName(raceCheckBox)!=null && getElementByIdOrByName(raceCheckBox)!=undefined){
			 		getElementByIdOrByName(raceCheckBox).setAttribute("onchange","detailedRaceBusinessRule('"+raceCheckBox+"', '"+detailedRace+"')"); 
			 		getElementByIdOrByName(raceCheckBox).onchange();//triggering the event so it shows/hides the detailed race accordingly on load
			 	}
			 	
			 	if(getElementByIdOrByName(detailedRace)!=null && getElementByIdOrByName(detailedRace)!=undefined){
			 		getElementByIdOrByName(detailedRace).onchange();//ND-27807: triggering the detailed race in case there's any selection, to show the "Selected Values" list
			 	}
			 }
			 
			 
			 }
			 
			 
		 }
		 
