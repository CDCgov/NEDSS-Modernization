import groovy.time.TimeCategory
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

import java.text.MessageFormat

def testsResults = [] // Container for tests summaries
def testFailures = 0

tasks.named("test") { testTask ->
    testTask.finalizedBy('testEvaluation')

    def name = project.name
    def root = project.projectDir

    doLast {
        println 'TEST FINISHED'
    }

    testsResults = []
    testLogging {
        events "failed"
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }

    ignoreFailures = true // Always try to run all tests for all modules
    afterSuite { descriptor, result ->

        if (descriptor.parent) return // Only summarize results for whole modules
        if (descriptor.getParent() == null) {
            testFailures += result.getFailedTestCount() //count failures
        }

        String summary = """
  ${name}:${testTask.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped) in ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}

    Report: 
        ${testTask.reports.html.entryPoint}

    Cucumber report:    
        ${root}/build/reports/tests/test/cucumber-report.html

    Jacoco report:  
        ${root}/build/reports/jacoco/test/html/index.html

"""

        // Add reports in `testsResults`, keep failed suites at the end
        if (result.resultType == TestResult.ResultType.SUCCESS) {
            testsResults.add(0, summary)
        } else {
            testsResults += summary
        }
    }
}

tasks.register('testEvaluation') {

    group = 'Verification'
    description = 'Evaluates the results of Test Suites'

    doLast {
        if (!testsResults.isEmpty()) {
            framed testsResults
        }

        if (testFailures > 0) { // check if any tests failed
            String message = new MessageFormat("There {0,choice,0#are no|1#is one|were {0,number}} failing {0,choice,1#test|tests}.")
                    .format(new Object[]{testFailures});

            throw new VerificationException(message)
        }
    }
}

private static void framed(allResults) {
    def maxLength = allResults*.readLines().flatten().collect { it.length() }.max()
    def line = "─" * maxLength;

    println "┌${line}┐"

    println allResults.collect {
        it.readLines().collect {
            "│${it}${" " * (maxLength - it.length()) }│"
        }.join("\n")
    }.join("\n├${line}┤\n")

    println "└${line}┘"
}
